.TH "packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/gtest-spi.h" 3 "Wed Nov 3 2021" "Version 0.2.3" "Command Line Processor" \" -*- nroff -*-
.ad l
.nh
.SH NAME
packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/gtest-spi.h
.SH SYNOPSIS
.br
.PP
\fC#include 'gtest/gtest\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEXPECT_FATAL_FAILURE\fP(statement,  substr)"
.br
.ti -1c
.RI "#define \fBEXPECT_FATAL_FAILURE_ON_ALL_THREADS\fP(statement,  substr)"
.br
.ti -1c
.RI "#define \fBEXPECT_NONFATAL_FAILURE\fP(statement,  substr)"
.br
.ti -1c
.RI "#define \fBEXPECT_NONFATAL_FAILURE_ON_ALL_THREADS\fP(statement,  substr)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBGTEST_DISABLE_MSC_WARNINGS_PUSH_\fP (4251) namespace testing"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define EXPECT_FATAL_FAILURE(statement, substr)"
\fBValue:\fP
.PP
.nf
  do { \
    class GTestExpectFatalFailureHelper {\
     public:\
      static void Execute() { statement; }\
    };\
    ::testing::TestPartResultArray gtest_failures;\
    ::testing::internal::SingleFailureChecker gtest_checker(\
        &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
    {\
      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ONLY_CURRENT_THREAD, &gtest_failures);\
      GTestExpectFatalFailureHelper::Execute();\
    }\
  } while (::testing::internal::AlwaysFalse())
.fi
.SS "#define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substr)"
\fBValue:\fP
.PP
.nf
  do { \
    class GTestExpectFatalFailureHelper {\
     public:\
      static void Execute() { statement; }\
    };\
    ::testing::TestPartResultArray gtest_failures;\
    ::testing::internal::SingleFailureChecker gtest_checker(\
        &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr));\
    {\
      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ALL_THREADS, &gtest_failures);\
      GTestExpectFatalFailureHelper::Execute();\
    }\
  } while (::testing::internal::AlwaysFalse())
.fi
.SS "#define EXPECT_NONFATAL_FAILURE(statement, substr)"
\fBValue:\fP
.PP
.nf
  do {\
    ::testing::TestPartResultArray gtest_failures;\
    ::testing::internal::SingleFailureChecker gtest_checker(\
        &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        (substr));\
    {\
      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter:: \
          INTERCEPT_ONLY_CURRENT_THREAD, &gtest_failures);\
      if (::testing::internal::AlwaysTrue()) { statement; }\
    }\
  } while (::testing::internal::AlwaysFalse())
.fi
.SS "#define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substr)"
\fBValue:\fP
.PP
.nf
  do {\
    ::testing::TestPartResultArray gtest_failures;\
    ::testing::internal::SingleFailureChecker gtest_checker(\
        &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \
        (substr));\
    {\
      ::testing::ScopedFakeTestPartResultReporter gtest_reporter(\
          ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \
          &gtest_failures);\
      if (::testing::internal::AlwaysTrue()) { statement; }\
    }\
  } while (::testing::internal::AlwaysFalse())
.fi
.SH "Function Documentation"
.PP 
.SS "GTEST_DISABLE_MSC_WARNINGS_PUSH_ (4251)"

.PP
Definition at line \fB41\fP of file \fBgtest\-spi\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Command Line Processor from the source code\&.
