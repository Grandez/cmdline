{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-filepath.h\par \pard\plain 
{\tc\tcl2 \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-filepath.h}
{\xe \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-filepath.h}
{\bkmkstart AAAAAAAVMN}
{\bkmkend AAAAAAAVMN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVMO" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAVMP}{\bkmkend AAAAAAAVMP}
00001 {\cf20 // Copyright 2008, Google Inc.}\par
{\bkmkstart AAAAAAAVMQ}{\bkmkend AAAAAAAVMQ}
00002 {\cf20 // All rights reserved.}\par
{\bkmkstart AAAAAAAVMR}{\bkmkend AAAAAAAVMR}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAVMS}{\bkmkend AAAAAAAVMS}
00004 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
{\bkmkstart AAAAAAAVMT}{\bkmkend AAAAAAAVMT}
00005 {\cf20 // modification, are permitted provided that the following conditions are}\par
{\bkmkstart AAAAAAAVMU}{\bkmkend AAAAAAAVMU}
00006 {\cf20 // met:}\par
{\bkmkstart AAAAAAAVMV}{\bkmkend AAAAAAAVMV}
00007 {\cf20 //}\par
{\bkmkstart AAAAAAAVMW}{\bkmkend AAAAAAAVMW}
00008 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
{\bkmkstart AAAAAAAVMX}{\bkmkend AAAAAAAVMX}
00009 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
{\bkmkstart AAAAAAAVMY}{\bkmkend AAAAAAAVMY}
00010 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
{\bkmkstart AAAAAAAVMZ}{\bkmkend AAAAAAAVMZ}
00011 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
{\bkmkstart AAAAAAAVNA}{\bkmkend AAAAAAAVNA}
00012 {\cf20 // in the documentation and/or other materials provided with the}\par
{\bkmkstart AAAAAAAVNB}{\bkmkend AAAAAAAVNB}
00013 {\cf20 // distribution.}\par
{\bkmkstart AAAAAAAVNC}{\bkmkend AAAAAAAVNC}
00014 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
{\bkmkstart AAAAAAAVND}{\bkmkend AAAAAAAVND}
00015 {\cf20 // contributors may be used to endorse or promote products derived from}\par
{\bkmkstart AAAAAAAVNE}{\bkmkend AAAAAAAVNE}
00016 {\cf20 // this software without specific prior written permission.}\par
{\bkmkstart AAAAAAAVNF}{\bkmkend AAAAAAAVNF}
00017 {\cf20 //}\par
{\bkmkstart AAAAAAAVNG}{\bkmkend AAAAAAAVNG}
00018 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
{\bkmkstart AAAAAAAVNH}{\bkmkend AAAAAAAVNH}
00019 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAVNI}{\bkmkend AAAAAAAVNI}
00020 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
{\bkmkstart AAAAAAAVNJ}{\bkmkend AAAAAAAVNJ}
00021 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
{\bkmkstart AAAAAAAVNK}{\bkmkend AAAAAAAVNK}
00022 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
{\bkmkstart AAAAAAAVNL}{\bkmkend AAAAAAAVNL}
00023 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAVNM}{\bkmkend AAAAAAAVNM}
00024 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
{\bkmkstart AAAAAAAVNN}{\bkmkend AAAAAAAVNN}
00025 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
{\bkmkstart AAAAAAAVNO}{\bkmkend AAAAAAAVNO}
00026 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
{\bkmkstart AAAAAAAVNP}{\bkmkend AAAAAAAVNP}
00027 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
{\bkmkstart AAAAAAAVNQ}{\bkmkend AAAAAAAVNQ}
00028 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
{\bkmkstart AAAAAAAVNR}{\bkmkend AAAAAAAVNR}
00029 {\cf20 //}\par
{\bkmkstart AAAAAAAVNS}{\bkmkend AAAAAAAVNS}
00030 {\cf20 // Google Test filepath utilities}\par
{\bkmkstart AAAAAAAVNT}{\bkmkend AAAAAAAVNT}
00031 {\cf20 //}\par
{\bkmkstart AAAAAAAVNU}{\bkmkend AAAAAAAVNU}
00032 {\cf20 // This header file declares classes and functions used internally by}\par
{\bkmkstart AAAAAAAVNV}{\bkmkend AAAAAAAVNV}
00033 {\cf20 // Google Test.  They are subject to change without notice.}\par
{\bkmkstart AAAAAAAVNW}{\bkmkend AAAAAAAVNW}
00034 {\cf20 //}\par
{\bkmkstart AAAAAAAVNX}{\bkmkend AAAAAAAVNX}
00035 {\cf20 // This file is #included in gtest/internal/gtest-internal.h.}\par
{\bkmkstart AAAAAAAVNY}{\bkmkend AAAAAAAVNY}
00036 {\cf20 // Do not include this header file separately!}\par
{\bkmkstart AAAAAAAVNZ}{\bkmkend AAAAAAAVNZ}
00037 \par
{\bkmkstart AAAAAAAVOA}{\bkmkend AAAAAAAVOA}
00038 {\cf20 // GOOGLETEST_CM0001 DO NOT DELETE}\par
{\bkmkstart AAAAAAAVOB}{\bkmkend AAAAAAAVOB}
00039 \par
{\bkmkstart AAAAAAAVOC}{\bkmkend AAAAAAAVOC}
00040 {\cf21 #ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
{\bkmkstart AAAAAAAVOD}{\bkmkend AAAAAAAVOD}
00041 {\cf21 #define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
{\bkmkstart AAAAAAAVOE}{\bkmkend AAAAAAAVOE}
00042 \par
{\bkmkstart AAAAAAAVOF}{\bkmkend AAAAAAAVOF}
00043 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALKQ" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-string.h}}}
"}\par
{\bkmkstart AAAAAAAVOG}{\bkmkend AAAAAAAVOG}
00044 \par
{\bkmkstart AAAAAAAVOH}{\bkmkend AAAAAAAVOH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVOI" }{}}{\fldrslt {\cs37\ul\cf2 00045}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVOI" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_PUSH_}}}
(4251 \\\par
{\bkmkstart AAAAAAAVOJ}{\bkmkend AAAAAAAVOJ}
00046 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
{\bkmkstart AAAAAAAVOK}{\bkmkend AAAAAAAVOK}
00047 \par
{\bkmkstart AAAAAAAVOL}{\bkmkend AAAAAAAVOL}
00048 namespace {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZQ" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
 \{\par
{\bkmkstart AAAAAAAVOM}{\bkmkend AAAAAAAVOM}
00049 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAAAVON}{\bkmkend AAAAAAAVON}
00050 \par
{\bkmkstart AAAAAAAVOO}{\bkmkend AAAAAAAVOO}
00051 {\cf20 // FilePath - a class for file and directory pathname manipulation which}\par
{\bkmkstart AAAAAAAVOP}{\bkmkend AAAAAAAVOP}
00052 {\cf20 // handles platform-specific conventions (like the pathname separator).}\par
{\bkmkstart AAAAAAAVOQ}{\bkmkend AAAAAAAVOQ}
00053 {\cf20 // Used for helper functions for naming files in a directory for xml output.}\par
{\bkmkstart AAAAAAAVOR}{\bkmkend AAAAAAAVOR}
00054 {\cf20 // Except for Set methods, all methods are const or static, which provides an}\par
{\bkmkstart AAAAAAAVOS}{\bkmkend AAAAAAAVOS}
00055 {\cf20 // "immutable value object" -- useful for peace of mind.}\par
{\bkmkstart AAAAAAAVOT}{\bkmkend AAAAAAAVOT}
00056 {\cf20 // A FilePath with a value ending in a path separator ("like/this/") represents}\par
{\bkmkstart AAAAAAAVOU}{\bkmkend AAAAAAAVOU}
00057 {\cf20 // a directory, otherwise it is assumed to represent a file. In either case,}\par
{\bkmkstart AAAAAAAVOV}{\bkmkend AAAAAAAVOV}
00058 {\cf20 // it may or may not represent an actual file or directory in the file system.}\par
{\bkmkstart AAAAAAAVOW}{\bkmkend AAAAAAAVOW}
00059 {\cf20 // Names are NOT checked for syntax correctness -- no checking for illegal}\par
{\bkmkstart AAAAAAAVOX}{\bkmkend AAAAAAAVOX}
00060 {\cf20 // characters, malformed paths, etc.}\par
{\bkmkstart AAAAAAAVOY}{\bkmkend AAAAAAAVOY}
00061 \par
{\bkmkstart AAAAAAAVOZ}{\bkmkend AAAAAAAVOZ}
00062 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 FilePath \{\par
{\bkmkstart AAAAAAAVPA}{\bkmkend AAAAAAAVPA}
00063  {\cf17 public}:\par
{\bkmkstart AAAAAAAVPB}{\bkmkend AAAAAAAVPB}
00064   FilePath() : pathname_({\cf22 ""}) \{ \}\par
{\bkmkstart AAAAAAAVPC}{\bkmkend AAAAAAAVPC}
00065   FilePath({\cf17 const} FilePath& rhs) : pathname_(rhs.pathname_) \{ \}\par
{\bkmkstart AAAAAAAVPD}{\bkmkend AAAAAAAVPD}
00066 \par
{\bkmkstart AAAAAAAVPE}{\bkmkend AAAAAAAVPE}
00067   {\cf17 explicit} FilePath({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& pathname) : pathname_(pathname) \{\par
{\bkmkstart AAAAAAAVPF}{\bkmkend AAAAAAAVPF}
00068     Normalize();\par
{\bkmkstart AAAAAAAVPG}{\bkmkend AAAAAAAVPG}
00069   \}\par
{\bkmkstart AAAAAAAVPH}{\bkmkend AAAAAAAVPH}
00070 \par
{\bkmkstart AAAAAAAVPI}{\bkmkend AAAAAAAVPI}
00071   FilePath& operator=({\cf17 const} FilePath& rhs) \{\par
{\bkmkstart AAAAAAAVPJ}{\bkmkend AAAAAAAVPJ}
00072     Set(rhs);\par
{\bkmkstart AAAAAAAVPK}{\bkmkend AAAAAAAVPK}
00073     {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAVPL}{\bkmkend AAAAAAAVPL}
00074   \}\par
{\bkmkstart AAAAAAAVPM}{\bkmkend AAAAAAAVPM}
00075 \par
{\bkmkstart AAAAAAAVPN}{\bkmkend AAAAAAAVPN}
00076   {\cf18 void} Set({\cf17 const} FilePath& rhs) \{\par
{\bkmkstart AAAAAAAVPO}{\bkmkend AAAAAAAVPO}
00077     pathname_ = rhs.pathname_;\par
{\bkmkstart AAAAAAAVPP}{\bkmkend AAAAAAAVPP}
00078   \}\par
{\bkmkstart AAAAAAAVPQ}{\bkmkend AAAAAAAVPQ}
00079 \par
{\bkmkstart AAAAAAAVPR}{\bkmkend AAAAAAAVPR}
00080   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 string}}}
(){\cf17  const }\{ {\cf19 return} pathname_; \}\par
{\bkmkstart AAAAAAAVPS}{\bkmkend AAAAAAAVPS}
00081   {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} pathname_.c_str(); \}\par
{\bkmkstart AAAAAAAVPT}{\bkmkend AAAAAAAVPT}
00082 \par
{\bkmkstart AAAAAAAVPU}{\bkmkend AAAAAAAVPU}
00083   {\cf20 // Returns the current working directory, or "" if unsuccessful.}\par
{\bkmkstart AAAAAAAVPV}{\bkmkend AAAAAAAVPV}
00084   {\cf17 static} FilePath GetCurrentDir();\par
{\bkmkstart AAAAAAAVPW}{\bkmkend AAAAAAAVPW}
00085 \par
{\bkmkstart AAAAAAAVPX}{\bkmkend AAAAAAAVPX}
00086   {\cf20 // Given directory = "dir", base_name = "test", number = 0,}\par
{\bkmkstart AAAAAAAVPY}{\bkmkend AAAAAAAVPY}
00087   {\cf20 // extension = "xml", returns "dir/test.xml". If number is greater}\par
{\bkmkstart AAAAAAAVPZ}{\bkmkend AAAAAAAVPZ}
00088   {\cf20 // than zero (e.g., 12), returns "dir/test_12.xml".}\par
{\bkmkstart AAAAAAAVQA}{\bkmkend AAAAAAAVQA}
00089   {\cf20 // On Windows platform, uses \\ as the separator rather than /.}\par
{\bkmkstart AAAAAAAVQB}{\bkmkend AAAAAAAVQB}
00090   {\cf17 static} FilePath MakeFileName({\cf17 const} FilePath& directory,\par
{\bkmkstart AAAAAAAVQC}{\bkmkend AAAAAAAVQC}
00091                                {\cf17 const} FilePath& base_name,\par
{\bkmkstart AAAAAAAVQD}{\bkmkend AAAAAAAVQD}
00092                                {\cf18 int} number,\par
{\bkmkstart AAAAAAAVQE}{\bkmkend AAAAAAAVQE}
00093                                {\cf17 const} {\cf18 char}* extension);\par
{\bkmkstart AAAAAAAVQF}{\bkmkend AAAAAAAVQF}
00094 \par
{\bkmkstart AAAAAAAVQG}{\bkmkend AAAAAAAVQG}
00095   {\cf20 // Given directory = "dir", relative_path = "test.xml",}\par
{\bkmkstart AAAAAAAVQH}{\bkmkend AAAAAAAVQH}
00096   {\cf20 // returns "dir/test.xml".}\par
{\bkmkstart AAAAAAAVQI}{\bkmkend AAAAAAAVQI}
00097   {\cf20 // On Windows, uses \\ as the separator rather than /.}\par
{\bkmkstart AAAAAAAVQJ}{\bkmkend AAAAAAAVQJ}
00098   {\cf17 static} FilePath ConcatPaths({\cf17 const} FilePath& directory,\par
{\bkmkstart AAAAAAAVQK}{\bkmkend AAAAAAAVQK}
00099                               {\cf17 const} FilePath& relative_path);\par
{\bkmkstart AAAAAAAVQL}{\bkmkend AAAAAAAVQL}
00100 \par
{\bkmkstart AAAAAAAVQM}{\bkmkend AAAAAAAVQM}
00101   {\cf20 // Returns a pathname for a file that does not currently exist. The pathname}\par
{\bkmkstart AAAAAAAVQN}{\bkmkend AAAAAAAVQN}
00102   {\cf20 // will be directory/base_name.extension or}\par
{\bkmkstart AAAAAAAVQO}{\bkmkend AAAAAAAVQO}
00103   {\cf20 // directory/base_name_<number>.extension if directory/base_name.extension}\par
{\bkmkstart AAAAAAAVQP}{\bkmkend AAAAAAAVQP}
00104   {\cf20 // already exists. The number will be incremented until a pathname is found}\par
{\bkmkstart AAAAAAAVQQ}{\bkmkend AAAAAAAVQQ}
00105   {\cf20 // that does not already exist.}\par
{\bkmkstart AAAAAAAVQR}{\bkmkend AAAAAAAVQR}
00106   {\cf20 // Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.}\par
{\bkmkstart AAAAAAAVQS}{\bkmkend AAAAAAAVQS}
00107   {\cf20 // There could be a race condition if two or more processes are calling this}\par
{\bkmkstart AAAAAAAVQT}{\bkmkend AAAAAAAVQT}
00108   {\cf20 // function at the same time -- they could both pick the same filename.}\par
{\bkmkstart AAAAAAAVQU}{\bkmkend AAAAAAAVQU}
00109   {\cf17 static} FilePath GenerateUniqueFileName({\cf17 const} FilePath& directory,\par
{\bkmkstart AAAAAAAVQV}{\bkmkend AAAAAAAVQV}
00110                                          {\cf17 const} FilePath& base_name,\par
{\bkmkstart AAAAAAAVQW}{\bkmkend AAAAAAAVQW}
00111                                          {\cf17 const} {\cf18 char}* extension);\par
{\bkmkstart AAAAAAAVQX}{\bkmkend AAAAAAAVQX}
00112 \par
{\bkmkstart AAAAAAAVQY}{\bkmkend AAAAAAAVQY}
00113   {\cf20 // Returns true iff the path is "".}\par
{\bkmkstart AAAAAAAVQZ}{\bkmkend AAAAAAAVQZ}
00114   {\cf18 bool} IsEmpty(){\cf17  const }\{ {\cf19 return} pathname_.empty(); \}\par
{\bkmkstart AAAAAAAVRA}{\bkmkend AAAAAAAVRA}
00115 \par
{\bkmkstart AAAAAAAVRB}{\bkmkend AAAAAAAVRB}
00116   {\cf20 // If input name has a trailing separator character, removes it and returns}\par
{\bkmkstart AAAAAAAVRC}{\bkmkend AAAAAAAVRC}
00117   {\cf20 // the name, otherwise return the name string unmodified.}\par
{\bkmkstart AAAAAAAVRD}{\bkmkend AAAAAAAVRD}
00118   {\cf20 // On Windows platform, uses \\ as the separator, other platforms use /.}\par
{\bkmkstart AAAAAAAVRE}{\bkmkend AAAAAAAVRE}
00119   FilePath RemoveTrailingPathSeparator() {\cf17 const};\par
{\bkmkstart AAAAAAAVRF}{\bkmkend AAAAAAAVRF}
00120 \par
{\bkmkstart AAAAAAAVRG}{\bkmkend AAAAAAAVRG}
00121   {\cf20 // Returns a copy of the FilePath with the directory part removed.}\par
{\bkmkstart AAAAAAAVRH}{\bkmkend AAAAAAAVRH}
00122   {\cf20 // Example: FilePath("path/to/file").RemoveDirectoryName() returns}\par
{\bkmkstart AAAAAAAVRI}{\bkmkend AAAAAAAVRI}
00123   {\cf20 // FilePath("file"). If there is no directory part ("just_a_file"), it returns}\par
{\bkmkstart AAAAAAAVRJ}{\bkmkend AAAAAAAVRJ}
00124   {\cf20 // the FilePath unmodified. If there is no file part ("just_a_dir/") it}\par
{\bkmkstart AAAAAAAVRK}{\bkmkend AAAAAAAVRK}
00125   {\cf20 // returns an empty FilePath ("").}\par
{\bkmkstart AAAAAAAVRL}{\bkmkend AAAAAAAVRL}
00126   {\cf20 // On Windows platform, '\\' is the path separator, otherwise it is '/'.}\par
{\bkmkstart AAAAAAAVRM}{\bkmkend AAAAAAAVRM}
00127   FilePath RemoveDirectoryName() {\cf17 const};\par
{\bkmkstart AAAAAAAVRN}{\bkmkend AAAAAAAVRN}
00128 \par
{\bkmkstart AAAAAAAVRO}{\bkmkend AAAAAAAVRO}
00129   {\cf20 // RemoveFileName returns the directory path with the filename removed.}\par
{\bkmkstart AAAAAAAVRP}{\bkmkend AAAAAAAVRP}
00130   {\cf20 // Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".}\par
{\bkmkstart AAAAAAAVRQ}{\bkmkend AAAAAAAVRQ}
00131   {\cf20 // If the FilePath is "a_file" or "/a_file", RemoveFileName returns}\par
{\bkmkstart AAAAAAAVRR}{\bkmkend AAAAAAAVRR}
00132   {\cf20 // FilePath("./") or, on Windows, FilePath(".\\\\"). If the filepath does}\par
{\bkmkstart AAAAAAAVRS}{\bkmkend AAAAAAAVRS}
00133   {\cf20 // not have a file, like "just/a/dir/", it returns the FilePath unmodified.}\par
{\bkmkstart AAAAAAAVRT}{\bkmkend AAAAAAAVRT}
00134   {\cf20 // On Windows platform, '\\' is the path separator, otherwise it is '/'.}\par
{\bkmkstart AAAAAAAVRU}{\bkmkend AAAAAAAVRU}
00135   FilePath RemoveFileName() {\cf17 const};\par
{\bkmkstart AAAAAAAVRV}{\bkmkend AAAAAAAVRV}
00136 \par
{\bkmkstart AAAAAAAVRW}{\bkmkend AAAAAAAVRW}
00137   {\cf20 // Returns a copy of the FilePath with the case-insensitive extension removed.}\par
{\bkmkstart AAAAAAAVRX}{\bkmkend AAAAAAAVRX}
00138   {\cf20 // Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns}\par
{\bkmkstart AAAAAAAVRY}{\bkmkend AAAAAAAVRY}
00139   {\cf20 // FilePath("dir/file"). If a case-insensitive extension is not}\par
{\bkmkstart AAAAAAAVRZ}{\bkmkend AAAAAAAVRZ}
00140   {\cf20 // found, returns a copy of the original FilePath.}\par
{\bkmkstart AAAAAAAVSA}{\bkmkend AAAAAAAVSA}
00141   FilePath RemoveExtension({\cf17 const} {\cf18 char}* extension) {\cf17 const};\par
{\bkmkstart AAAAAAAVSB}{\bkmkend AAAAAAAVSB}
00142 \par
{\bkmkstart AAAAAAAVSC}{\bkmkend AAAAAAAVSC}
00143   {\cf20 // Creates directories so that path exists. Returns true if successful or if}\par
{\bkmkstart AAAAAAAVSD}{\bkmkend AAAAAAAVSD}
00144   {\cf20 // the directories already exist; returns false if unable to create}\par
{\bkmkstart AAAAAAAVSE}{\bkmkend AAAAAAAVSE}
00145   {\cf20 // directories for any reason. Will also return false if the FilePath does}\par
{\bkmkstart AAAAAAAVSF}{\bkmkend AAAAAAAVSF}
00146   {\cf20 // not represent a directory (that is, it doesn't end with a path separator).}\par
{\bkmkstart AAAAAAAVSG}{\bkmkend AAAAAAAVSG}
00147   {\cf18 bool} CreateDirectoriesRecursively() {\cf17 const};\par
{\bkmkstart AAAAAAAVSH}{\bkmkend AAAAAAAVSH}
00148 \par
{\bkmkstart AAAAAAAVSI}{\bkmkend AAAAAAAVSI}
00149   {\cf20 // Create the directory so that path exists. Returns true if successful or}\par
{\bkmkstart AAAAAAAVSJ}{\bkmkend AAAAAAAVSJ}
00150   {\cf20 // if the directory already exists; returns false if unable to create the}\par
{\bkmkstart AAAAAAAVSK}{\bkmkend AAAAAAAVSK}
00151   {\cf20 // directory for any reason, including if the parent directory does not}\par
{\bkmkstart AAAAAAAVSL}{\bkmkend AAAAAAAVSL}
00152   {\cf20 // exist. Not named "CreateDirectory" because that's a macro on Windows.}\par
{\bkmkstart AAAAAAAVSM}{\bkmkend AAAAAAAVSM}
00153   {\cf18 bool} CreateFolder() {\cf17 const};\par
{\bkmkstart AAAAAAAVSN}{\bkmkend AAAAAAAVSN}
00154 \par
{\bkmkstart AAAAAAAVSO}{\bkmkend AAAAAAAVSO}
00155   {\cf20 // Returns true if FilePath describes something in the file-system,}\par
{\bkmkstart AAAAAAAVSP}{\bkmkend AAAAAAAVSP}
00156   {\cf20 // either a file, directory, or whatever, and that something exists.}\par
{\bkmkstart AAAAAAAVSQ}{\bkmkend AAAAAAAVSQ}
00157   {\cf18 bool} FileOrDirectoryExists() {\cf17 const};\par
{\bkmkstart AAAAAAAVSR}{\bkmkend AAAAAAAVSR}
00158 \par
{\bkmkstart AAAAAAAVSS}{\bkmkend AAAAAAAVSS}
00159   {\cf20 // Returns true if pathname describes a directory in the file-system}\par
{\bkmkstart AAAAAAAVST}{\bkmkend AAAAAAAVST}
00160   {\cf20 // that exists.}\par
{\bkmkstart AAAAAAAVSU}{\bkmkend AAAAAAAVSU}
00161   {\cf18 bool} DirectoryExists() {\cf17 const};\par
{\bkmkstart AAAAAAAVSV}{\bkmkend AAAAAAAVSV}
00162 \par
{\bkmkstart AAAAAAAVSW}{\bkmkend AAAAAAAVSW}
00163   {\cf20 // Returns true if FilePath ends with a path separator, which indicates that}\par
{\bkmkstart AAAAAAAVSX}{\bkmkend AAAAAAAVSX}
00164   {\cf20 // it is intended to represent a directory. Returns false otherwise.}\par
{\bkmkstart AAAAAAAVSY}{\bkmkend AAAAAAAVSY}
00165   {\cf20 // This does NOT check that a directory (or file) actually exists.}\par
{\bkmkstart AAAAAAAVSZ}{\bkmkend AAAAAAAVSZ}
00166   {\cf18 bool} IsDirectory() {\cf17 const};\par
{\bkmkstart AAAAAAAVTA}{\bkmkend AAAAAAAVTA}
00167 \par
{\bkmkstart AAAAAAAVTB}{\bkmkend AAAAAAAVTB}
00168   {\cf20 // Returns true if pathname describes a root directory. (Windows has one}\par
{\bkmkstart AAAAAAAVTC}{\bkmkend AAAAAAAVTC}
00169   {\cf20 // root directory per disk drive.)}\par
{\bkmkstart AAAAAAAVTD}{\bkmkend AAAAAAAVTD}
00170   {\cf18 bool} IsRootDirectory() {\cf17 const};\par
{\bkmkstart AAAAAAAVTE}{\bkmkend AAAAAAAVTE}
00171 \par
{\bkmkstart AAAAAAAVTF}{\bkmkend AAAAAAAVTF}
00172   {\cf20 // Returns true if pathname describes an absolute path.}\par
{\bkmkstart AAAAAAAVTG}{\bkmkend AAAAAAAVTG}
00173   {\cf18 bool} IsAbsolutePath() {\cf17 const};\par
{\bkmkstart AAAAAAAVTH}{\bkmkend AAAAAAAVTH}
00174 \par
{\bkmkstart AAAAAAAVTI}{\bkmkend AAAAAAAVTI}
00175  {\cf17 private}:\par
{\bkmkstart AAAAAAAVTJ}{\bkmkend AAAAAAAVTJ}
00176   {\cf20 // Replaces multiple consecutive separators with a single separator.}\par
{\bkmkstart AAAAAAAVTK}{\bkmkend AAAAAAAVTK}
00177   {\cf20 // For example, "bar///foo" becomes "bar/foo". Does not eliminate other}\par
{\bkmkstart AAAAAAAVTL}{\bkmkend AAAAAAAVTL}
00178   {\cf20 // redundancies that might be in a pathname involving "." or "..".}\par
{\bkmkstart AAAAAAAVTM}{\bkmkend AAAAAAAVTM}
00179   {\cf20 //}\par
{\bkmkstart AAAAAAAVTN}{\bkmkend AAAAAAAVTN}
00180   {\cf20 // A pathname with multiple consecutive separators may occur either through}\par
{\bkmkstart AAAAAAAVTO}{\bkmkend AAAAAAAVTO}
00181   {\cf20 // user error or as a result of some scripts or APIs that generate a pathname}\par
{\bkmkstart AAAAAAAVTP}{\bkmkend AAAAAAAVTP}
00182   {\cf20 // with a trailing separator. On other platforms the same API or script}\par
{\bkmkstart AAAAAAAVTQ}{\bkmkend AAAAAAAVTQ}
00183   {\cf20 // may NOT generate a pathname with a trailing "/". Then elsewhere that}\par
{\bkmkstart AAAAAAAVTR}{\bkmkend AAAAAAAVTR}
00184   {\cf20 // pathname may have another "/" and pathname components added to it,}\par
{\bkmkstart AAAAAAAVTS}{\bkmkend AAAAAAAVTS}
00185   {\cf20 // without checking for the separator already being there.}\par
{\bkmkstart AAAAAAAVTT}{\bkmkend AAAAAAAVTT}
00186   {\cf20 // The script language and operating system may allow paths like "foo//bar"}\par
{\bkmkstart AAAAAAAVTU}{\bkmkend AAAAAAAVTU}
00187   {\cf20 // but some of the functions in FilePath will not handle that correctly. In}\par
{\bkmkstart AAAAAAAVTV}{\bkmkend AAAAAAAVTV}
00188   {\cf20 // particular, RemoveTrailingPathSeparator() only removes one separator, and}\par
{\bkmkstart AAAAAAAVTW}{\bkmkend AAAAAAAVTW}
00189   {\cf20 // it is called in CreateDirectoriesRecursively() assuming that it will change}\par
{\bkmkstart AAAAAAAVTX}{\bkmkend AAAAAAAVTX}
00190   {\cf20 // a pathname from directory syntax (trailing separator) to filename syntax.}\par
{\bkmkstart AAAAAAAVTY}{\bkmkend AAAAAAAVTY}
00191   {\cf20 //}\par
{\bkmkstart AAAAAAAVTZ}{\bkmkend AAAAAAAVTZ}
00192   {\cf20 // On Windows this method also replaces the alternate path separator '/' with}\par
{\bkmkstart AAAAAAAVUA}{\bkmkend AAAAAAAVUA}
00193   {\cf20 // the primary path separator '\\\\', so that for example "bar\\\\/\\\\foo" becomes}\par
{\bkmkstart AAAAAAAVUB}{\bkmkend AAAAAAAVUB}
00194   {\cf20 // "bar\\\\foo".}\par
{\bkmkstart AAAAAAAVUC}{\bkmkend AAAAAAAVUC}
00195 \par
{\bkmkstart AAAAAAAVUD}{\bkmkend AAAAAAAVUD}
00196   {\cf18 void} Normalize();\par
{\bkmkstart AAAAAAAVUE}{\bkmkend AAAAAAAVUE}
00197 \par
{\bkmkstart AAAAAAAVUF}{\bkmkend AAAAAAAVUF}
00198   {\cf20 // Returns a pointer to the last occurence of a valid path separator in}\par
{\bkmkstart AAAAAAAVUG}{\bkmkend AAAAAAAVUG}
00199   {\cf20 // the FilePath. On Windows, for example, both '/' and '\\' are valid path}\par
{\bkmkstart AAAAAAAVUH}{\bkmkend AAAAAAAVUH}
00200   {\cf20 // separators. Returns NULL if no path separator was found.}\par
{\bkmkstart AAAAAAAVUI}{\bkmkend AAAAAAAVUI}
00201   {\cf17 const} {\cf18 char}* FindLastPathSeparator() {\cf17 const};\par
{\bkmkstart AAAAAAAVUJ}{\bkmkend AAAAAAAVUJ}
00202 \par
{\bkmkstart AAAAAAAVUK}{\bkmkend AAAAAAAVUK}
00203   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 pathname_;\par
{\bkmkstart AAAAAAAVUL}{\bkmkend AAAAAAAVUL}
00204 \};  {\cf20 // class FilePath}\par
{\bkmkstart AAAAAAAVUM}{\bkmkend AAAAAAAVUM}
00205 \par
{\bkmkstart AAAAAAAVUN}{\bkmkend AAAAAAAVUN}
00206 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAAAVUO}{\bkmkend AAAAAAAVUO}
00207 \}  {\cf20 // namespace testing}\par
{\bkmkstart AAAAAAAVUP}{\bkmkend AAAAAAAVUP}
00208 \par
{\bkmkstart AAAAAAAVUQ}{\bkmkend AAAAAAAVUQ}
00209 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_POP_}}}
()  {\cf20 //  4251}\par
{\bkmkstart AAAAAAAVUR}{\bkmkend AAAAAAAVUR}
00210 \par
{\bkmkstart AAAAAAAVUS}{\bkmkend AAAAAAAVUS}
00211 {\cf21 #endif  }{\cf20 // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_}\par
}
}