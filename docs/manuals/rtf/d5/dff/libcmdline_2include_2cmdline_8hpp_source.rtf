{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cmdline.hpp\par \pard\plain 
{\tc\tcl2 \v libcmdline/include/cmdline.hpp}
{\xe \v libcmdline/include/cmdline.hpp}
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAAME}{\bkmkend AAAAAAAAME}
00001 {\cf21 #pragma once}\par
{\bkmkstart AAAAAAAAMF}{\bkmkend AAAAAAAAMF}
00002 \par
{\bkmkstart AAAAAAAAMG}{\bkmkend AAAAAAAAMG}
00003 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAAMH}{\bkmkend AAAAAAAAMH}
00004 {\cf21 #include "types.hpp"}\par
{\bkmkstart AAAAAAAAMI}{\bkmkend AAAAAAAAMI}
00005 {\cf21 #include "validations.hpp"}\par
{\bkmkstart AAAAAAAAMJ}{\bkmkend AAAAAAAAMJ}
00006 {\cf21 #include "cmdline_exceptions.hpp"}\par
{\bkmkstart AAAAAAAAMK}{\bkmkend AAAAAAAAMK}
00007 \par
{\bkmkstart AAAAAAAAML}{\bkmkend AAAAAAAAML}
00008 {\cf21 #ifndef __CLASS_CMDLINE__}\par
{\bkmkstart AAAAAAAAMM}{\bkmkend AAAAAAAAMM}
00009 {\cf21 #define __CLASS_CMDLINE__}\par
{\bkmkstart AAAAAAAAMN}{\bkmkend AAAAAAAAMN}
00010 \par
{\bkmkstart AAAAAAAAMO}{\bkmkend AAAAAAAAMO}
00011 {\cf21 #ifdef _WIN32}\par
{\bkmkstart AAAAAAAAMP}{\bkmkend AAAAAAAAMP}
00012 {\cf21 #pragma warning( disable : 4244)}\par
{\bkmkstart AAAAAAAAMQ}{\bkmkend AAAAAAAAMQ}
00013 {\cf21 #endif}\par
{\bkmkstart AAAAAAAAMR}{\bkmkend AAAAAAAAMR}
00014 \par
{\bkmkstart AAAAAAAAMS}{\bkmkend AAAAAAAAMS}
00015 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAQ" }{}}{\fldrslt {\cs37\ul\cf2 cmdline}}}
 \{\par
{\bkmkstart AAAAAAAAMT}{\bkmkend AAAAAAAAMT}
00031     {\cf17 class }Parm \{\par
{\bkmkstart AAAAAAAAMU}{\bkmkend AAAAAAAAMU}
00032     {\cf17 public}:\par
{\bkmkstart AAAAAAAAMV}{\bkmkend AAAAAAAAMV}
00033         {\cf17 const} {\cf18 char}* name;              {\cf20 // Name of parameter}\par
{\bkmkstart AAAAAAAAMW}{\bkmkend AAAAAAAAMW}
00034         Type type = Type::STRING;  {\cf20 // Type}\par
{\bkmkstart AAAAAAAAMX}{\bkmkend AAAAAAAAMX}
00035         {\cf18 char}* value;   {\cf20 // default value}\par
{\bkmkstart AAAAAAAAMY}{\bkmkend AAAAAAAAMY}
00036         {\cf18 bool} multiple = {\cf17 false};   {\cf20 // Allow multiple values?}\par
{\bkmkstart AAAAAAAAMZ}{\bkmkend AAAAAAAAMZ}
00037         Parm() = delete ; {\cf20 // \{ name = nullptr; \} // default}\par
{\bkmkstart AAAAAAAANA}{\bkmkend AAAAAAAANA}
00038         Parm({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAANB}{\bkmkend AAAAAAAANB}
00039         Parm({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* value);\par
{\bkmkstart AAAAAAAANC}{\bkmkend AAAAAAAANC}
00040         Parm({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* value, Type type, {\cf18 bool} multiple = {\cf17 false});\par
{\bkmkstart AAAAAAAAND}{\bkmkend AAAAAAAAND}
00041         Parm({\cf17 const} {\cf18 char}* name, {\cf18 bool} value);\par
{\bkmkstart AAAAAAAANE}{\bkmkend AAAAAAAANE}
00042         {\cf18 bool} instanceOfFlag();\par
{\bkmkstart AAAAAAAANF}{\bkmkend AAAAAAAANF}
00043         {\cf18 bool} instanceOfOption();\par
{\bkmkstart AAAAAAAANG}{\bkmkend AAAAAAAANG}
00044     {\cf17 private}:\par
{\bkmkstart AAAAAAAANH}{\bkmkend AAAAAAAANH}
00045         {\cf18 int} instance = 0;\par
{\bkmkstart AAAAAAAANI}{\bkmkend AAAAAAAANI}
00046 \par
{\bkmkstart AAAAAAAANJ}{\bkmkend AAAAAAAANJ}
00047     \};\par
{\bkmkstart AAAAAAAANK}{\bkmkend AAAAAAAANK}
00055     {\cf17 class }ParmFlag : {\cf17 public} Parm \{\par
{\bkmkstart AAAAAAAANL}{\bkmkend AAAAAAAANL}
00056     {\cf17 public}:\par
{\bkmkstart AAAAAAAANM}{\bkmkend AAAAAAAANM}
00057         ParmFlag() = {\cf17 delete};\par
{\bkmkstart AAAAAAAANN}{\bkmkend AAAAAAAANN}
00058         ParmFlag({\cf17 const} {\cf18 char}* name) : Parm(name, true) \{\};\par
{\bkmkstart AAAAAAAANO}{\bkmkend AAAAAAAANO}
00059         ParmFlag({\cf17 const} {\cf18 char}* name, {\cf18 bool} active) : Parm(name, active) \{\};\par
{\bkmkstart AAAAAAAANP}{\bkmkend AAAAAAAANP}
00060     \};\par
{\bkmkstart AAAAAAAANQ}{\bkmkend AAAAAAAANQ}
00067     {\cf17 class }ParmOption : {\cf17 public} Parm \{\par
{\bkmkstart AAAAAAAANR}{\bkmkend AAAAAAAANR}
00068     {\cf17 public}:\par
{\bkmkstart AAAAAAAANS}{\bkmkend AAAAAAAANS}
00069         ParmOption() = {\cf17 delete};\par
{\bkmkstart AAAAAAAANT}{\bkmkend AAAAAAAANT}
00070         ParmOption({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* value) : Parm(name, value) \{\};\par
{\bkmkstart AAAAAAAANU}{\bkmkend AAAAAAAANU}
00071         ParmOption({\cf17 const} {\cf18 char}* name, Type type) : Parm(name, NULL, type) \{\}\par
{\bkmkstart AAAAAAAANV}{\bkmkend AAAAAAAANV}
00072         ParmOption({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* value, {\cf18 bool} multiple) : Parm(name, value, Type::STRING, multiple) \{\};\par
{\bkmkstart AAAAAAAANW}{\bkmkend AAAAAAAANW}
00073         ParmOption({\cf17 const} {\cf18 char}* name, Type type, {\cf18 bool} multiple) : Parm(name, NULL, type, multiple) \{\};\par
{\bkmkstart AAAAAAAANX}{\bkmkend AAAAAAAANX}
00074         ParmOption({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* value, Type type,  {\cf18 bool} multiple = {\cf17 false}) : Parm(name, value, type, multiple) \{\};\par
{\bkmkstart AAAAAAAANY}{\bkmkend AAAAAAAANY}
00075     \};\par
{\bkmkstart AAAAAAAANZ}{\bkmkend AAAAAAAANZ}
00076     {\cf17 typedef} std::vector<Parm>                 Parameters;\par
{\bkmkstart AAAAAAAAOA}{\bkmkend AAAAAAAAOA}
00077     {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 \{\par
{\bkmkstart AAAAAAAAOB}{\bkmkend AAAAAAAAOB}
00078     {\cf17 public}:\par
{\bkmkstart AAAAAAAAOC}{\bkmkend AAAAAAAAOC}
00079         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
() \{\};\par
{\bkmkstart AAAAAAAAOD}{\bkmkend AAAAAAAAOD}
00080         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
({\cf18 int} argc, {\cf17 const} {\cf18 char} **argv, Parameters parms); \par
{\bkmkstart AAAAAAAAOE}{\bkmkend AAAAAAAAOE}
00081         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 ~CmdLine}}}
(); \par
{\bkmkstart AAAAAAAAOF}{\bkmkend AAAAAAAAOF}
00082 {\cf20 //      static CmdLine *getInstance(int argc, char** argv, Parameters parms = Parameters());}\par
{\bkmkstart AAAAAAAAOG}{\bkmkend AAAAAAAAOG}
00083         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 *getInstance({\cf18 int} argc, {\cf18 char}* argv[], Parameters parms = Parameters());\par
{\bkmkstart AAAAAAAAOH}{\bkmkend AAAAAAAAOH}
00084 {\cf20 //      static CmdLine *getInstance(int argc, const char* argv[], Parameters parms = Parameters());}\par
{\bkmkstart AAAAAAAAOI}{\bkmkend AAAAAAAAOI}
00085         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 *getInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms = Parameters());\par
{\bkmkstart AAAAAAAAOJ}{\bkmkend AAAAAAAAOJ}
00086         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 *getInstance(Parameters parms, {\cf18 int} argc, {\cf17 const} {\cf18 char}** argv);\par
{\bkmkstart AAAAAAAAOK}{\bkmkend AAAAAAAAOK}
00087         {\cf17 static} {\cf18 void} freeInstance();  {\cf20 // Just for test}\par
{\bkmkstart AAAAAAAAOL}{\bkmkend AAAAAAAAOL}
00088         {\cf20 // Arguments}\par
{\bkmkstart AAAAAAAAOM}{\bkmkend AAAAAAAAOM}
00089         vector<const char*> args();\par
{\bkmkstart AAAAAAAAON}{\bkmkend AAAAAAAAON}
00090 \par
{\bkmkstart AAAAAAAAOO}{\bkmkend AAAAAAAAOO}
00091         {\cf20 // Flags control}\par
{\bkmkstart AAAAAAAAOP}{\bkmkend AAAAAAAAOP}
00092         {\cf18 bool}  hasFlag({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAOQ}{\bkmkend AAAAAAAAOQ}
00093         {\cf18 bool}  hasFlag({\cf18 string} name);\par
{\bkmkstart AAAAAAAAOR}{\bkmkend AAAAAAAAOR}
00094         Flags getDefaultFlags({\cf18 bool} all = {\cf17 true});\par
{\bkmkstart AAAAAAAAOS}{\bkmkend AAAAAAAAOS}
00095         Flags getCurrentFlags({\cf18 bool} all = {\cf17 true});\par
{\bkmkstart AAAAAAAAOT}{\bkmkend AAAAAAAAOT}
00096 \par
{\bkmkstart AAAAAAAAOU}{\bkmkend AAAAAAAAOU}
00097         {\cf20 // Options control}\par
{\bkmkstart AAAAAAAAOV}{\bkmkend AAAAAAAAOV}
00098         Type                 getType({\cf17 const} {\cf18 char}* name); \par
{\bkmkstart AAAAAAAAOW}{\bkmkend AAAAAAAAOW}
00099         {\cf18 bool}                 hasOption({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAOX}{\bkmkend AAAAAAAAOX}
00100         {\cf18 bool}                 hasOption({\cf18 string} name);\par
{\bkmkstart AAAAAAAAOY}{\bkmkend AAAAAAAAOY}
00101         {\cf18 bool}                 isOptionMultiple({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAOZ}{\bkmkend AAAAAAAAOZ}
00102         {\cf18 bool}                 isOptionMultiple({\cf18 string} name);\par
{\bkmkstart AAAAAAAAPA}{\bkmkend AAAAAAAAPA}
00103         {\cf17 const} {\cf18 char}*          getOption({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAPB}{\bkmkend AAAAAAAAPB}
00104         {\cf17 const} {\cf18 char}*          getOption({\cf18 string} name) \{ {\cf19 return} getOption(name.c_str()); \}\par
{\bkmkstart AAAAAAAAPC}{\bkmkend AAAAAAAAPC}
00105         vector<const char*>  getOptionValues({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAPD}{\bkmkend AAAAAAAAPD}
00106         vector<const char*>  getOptionValues({\cf18 string} name);\par
{\bkmkstart AAAAAAAAPE}{\bkmkend AAAAAAAAPE}
00107 \par
{\bkmkstart AAAAAAAAPF}{\bkmkend AAAAAAAAPF}
00108         {\cf18 int}       getOptionNumValues({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAPG}{\bkmkend AAAAAAAAPG}
00109         {\cf18 int}       getOptionNumValues({\cf18 string} name);\par
{\bkmkstart AAAAAAAAPH}{\bkmkend AAAAAAAAPH}
00110         unordered_map<string,string>   getDefaultOptions();\par
{\bkmkstart AAAAAAAAPI}{\bkmkend AAAAAAAAPI}
00111         Options   getCurrentOptions();\par
{\bkmkstart AAAAAAAAPJ}{\bkmkend AAAAAAAAPJ}
00112         {\cf20 /*}\par
{\bkmkstart AAAAAAAAPK}{\bkmkend AAAAAAAAPK}
00113 {\cf20         template <typename T> const T         getOptionAs(T t, const char* name) \{}\par
{\bkmkstart AAAAAAAAPL}{\bkmkend AAAAAAAAPL}
00114 {\cf20             return getOptionAs<T>(name);}\par
{\bkmkstart AAAAAAAAPM}{\bkmkend AAAAAAAAPM}
00115 {\cf20         \}*/}\par
{\bkmkstart AAAAAAAAPN}{\bkmkend AAAAAAAAPN}
00116         {\cf17 template} <{\cf17 typename} T> T         getOptionAs({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAPO}{\bkmkend AAAAAAAAPO}
00117         {\cf20 /*}\par
{\bkmkstart AAAAAAAAPP}{\bkmkend AAAAAAAAPP}
00118 {\cf20         \{}\par
{\bkmkstart AAAAAAAAPQ}{\bkmkend AAAAAAAAPQ}
00119 {\cf20             const char* value = getOption(name);}\par
{\bkmkstart AAAAAAAAPR}{\bkmkend AAAAAAAAPR}
00120 {\cf20             return castByNative<T>(value);}\par
{\bkmkstart AAAAAAAAPS}{\bkmkend AAAAAAAAPS}
00121 {\cf20         \}}\par
{\bkmkstart AAAAAAAAPT}{\bkmkend AAAAAAAAPT}
00122 {\cf20         */}\par
{\bkmkstart AAAAAAAAPU}{\bkmkend AAAAAAAAPU}
00123         {\cf17 template} <{\cf17 typename} T> {\cf17 const} T         getOptionAs({\cf18 string} name) \{ {\cf19 return} getOptionAs<T>(name.c_str()); \}\par
{\bkmkstart AAAAAAAAPV}{\bkmkend AAAAAAAAPV}
00124         {\cf17 template} <{\cf17 typename} T> {\cf17 const} vector<T> getOptionValuesAs({\cf18 string} name) \{ {\cf19 return} getOptionValuesAs<T>(name.c_str()); \};\par
{\bkmkstart AAAAAAAAPW}{\bkmkend AAAAAAAAPW}
00125         {\cf17 template} <{\cf17 typename} T> {\cf17 const} vector<T> getOptionValuesAs({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAPX}{\bkmkend AAAAAAAAPX}
00126         {\cf20 /*}\par
{\bkmkstart AAAAAAAAPY}{\bkmkend AAAAAAAAPY}
00127 {\cf20         template <typename T> const vector<T> getOptionValuesAs(const char* name) \{}\par
{\bkmkstart AAAAAAAAPZ}{\bkmkend AAAAAAAAPZ}
00128 {\cf20             vector<T> res;}\par
{\bkmkstart AAAAAAAAQA}{\bkmkend AAAAAAAAQA}
00129 {\cf20             vector<const char*> str = _commandLine.getOptionValues(name);}\par
{\bkmkstart AAAAAAAAQB}{\bkmkend AAAAAAAAQB}
00130 {\cf20             res.reserve(str.size);}\par
{\bkmkstart AAAAAAAAQC}{\bkmkend AAAAAAAAQC}
00131 {\cf20             for (const char* val : str) \{}\par
{\bkmkstart AAAAAAAAQD}{\bkmkend AAAAAAAAQD}
00132 {\cf20                 res.push_back(castValue<T>(val));}\par
{\bkmkstart AAAAAAAAQE}{\bkmkend AAAAAAAAQE}
00133 {\cf20             \}}\par
{\bkmkstart AAAAAAAAQF}{\bkmkend AAAAAAAAQF}
00134 {\cf20             return res;}\par
{\bkmkstart AAAAAAAAQG}{\bkmkend AAAAAAAAQG}
00135 {\cf20         \}}\par
{\bkmkstart AAAAAAAAQH}{\bkmkend AAAAAAAAQH}
00136 {\cf20         */}\par
{\bkmkstart AAAAAAAAQI}{\bkmkend AAAAAAAAQI}
00137 {\cf20 // Definitions}\par
{\bkmkstart AAAAAAAAQJ}{\bkmkend AAAAAAAAQJ}
00138         {\cf18 bool}                 hasDefinition({\cf17 const} {\cf18 char}* def);\par
{\bkmkstart AAAAAAAAQK}{\bkmkend AAAAAAAAQK}
00139         {\cf18 bool}                 hasDefinition({\cf18 string} def);\par
{\bkmkstart AAAAAAAAQL}{\bkmkend AAAAAAAAQL}
00140         {\cf18 bool}                 isDefinitionMultiple({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAQM}{\bkmkend AAAAAAAAQM}
00141         {\cf18 bool}                 isDefinitionMultiple({\cf18 string} name);\par
{\bkmkstart AAAAAAAAQN}{\bkmkend AAAAAAAAQN}
00142         {\cf17 const} {\cf18 char}*          getDefinition({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAQO}{\bkmkend AAAAAAAAQO}
00143         {\cf17 const} {\cf18 char}*          getDefinition({\cf18 string} name);\par
{\bkmkstart AAAAAAAAQP}{\bkmkend AAAAAAAAQP}
00144         Options              getDefinitions();\par
{\bkmkstart AAAAAAAAQQ}{\bkmkend AAAAAAAAQQ}
00145         {\cf18 int}                  getDefinitionNumValues({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAQR}{\bkmkend AAAAAAAAQR}
00146         {\cf18 int}                  getDefinitionNumValues({\cf18 string} name);\par
{\bkmkstart AAAAAAAAQS}{\bkmkend AAAAAAAAQS}
00147         vector<const char*>  getDefinitionValues({\cf17 const} {\cf18 char}* name);\par
{\bkmkstart AAAAAAAAQT}{\bkmkend AAAAAAAAQT}
00148         vector<const char*>  getDefinitionValues({\cf18 string} name);\par
{\bkmkstart AAAAAAAAQU}{\bkmkend AAAAAAAAQU}
00149     {\cf17 protected}:\par
{\bkmkstart AAAAAAAAQV}{\bkmkend AAAAAAAAQV}
00150         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 *pGetInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms, {\cf18 bool} sensitive = {\cf17 false}, {\cf18 bool} strict = {\cf17 false});\par
{\bkmkstart AAAAAAAAQW}{\bkmkend AAAAAAAAQW}
00151         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms, {\cf18 bool} sensitive, {\cf18 bool} strict);\par
{\bkmkstart AAAAAAAAQX}{\bkmkend AAAAAAAAQX}
00152         {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
({\cf18 int} argc, {\cf17 const} {\cf18 char} **argv, Parameters parms, {\cf18 bool} sensitive);\par
{\bkmkstart AAAAAAAAQY}{\bkmkend AAAAAAAAQY}
00153     \};\par
{\bkmkstart AAAAAAAAQZ}{\bkmkend AAAAAAAAQZ}
00154     {\cf17 class }CmdLineI : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 \{\par
{\bkmkstart AAAAAAAARA}{\bkmkend AAAAAAAARA}
00155     {\cf17 public}:\par
{\bkmkstart AAAAAAAARB}{\bkmkend AAAAAAAARB}
00156         CmdLineI({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARC}{\bkmkend AAAAAAAARC}
00157         CmdLineI({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, cmdline::Parameters parms, {\cf18 bool} strict);\par
{\bkmkstart AAAAAAAARD}{\bkmkend AAAAAAAARD}
00158         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
* getInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARE}{\bkmkend AAAAAAAARE}
00159         ~CmdLineI();\par
{\bkmkstart AAAAAAAARF}{\bkmkend AAAAAAAARF}
00160     \};\par
{\bkmkstart AAAAAAAARG}{\bkmkend AAAAAAAARG}
00161     {\cf17 class }CmdLineS : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
 \{\par
{\bkmkstart AAAAAAAARH}{\bkmkend AAAAAAAARH}
00162     {\cf17 public}:\par
{\bkmkstart AAAAAAAARI}{\bkmkend AAAAAAAARI}
00163         CmdLineS({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARJ}{\bkmkend AAAAAAAARJ}
00164         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
* getInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARK}{\bkmkend AAAAAAAARK}
00165     \};\par
{\bkmkstart AAAAAAAARL}{\bkmkend AAAAAAAARL}
00166     {\cf17 class }CmdLineIS : {\cf17 public} CmdLineI \{\par
{\bkmkstart AAAAAAAARM}{\bkmkend AAAAAAAARM}
00167     {\cf17 public}:\par
{\bkmkstart AAAAAAAARN}{\bkmkend AAAAAAAARN}
00168         CmdLineIS({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARO}{\bkmkend AAAAAAAARO}
00169         ~CmdLineIS();\par
{\bkmkstart AAAAAAAARP}{\bkmkend AAAAAAAARP}
00170         {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAH" }{}}{\fldrslt {\cs37\ul\cf2 CmdLine}}}
* getInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms);\par
{\bkmkstart AAAAAAAARQ}{\bkmkend AAAAAAAARQ}
00171     \};\par
{\bkmkstart AAAAAAAARR}{\bkmkend AAAAAAAARR}
00172 \par
{\bkmkstart AAAAAAAARS}{\bkmkend AAAAAAAARS}
00173 \}\par
{\bkmkstart AAAAAAAART}{\bkmkend AAAAAAAART}
00174 {\cf21 #endif}\par
}
}