{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-port.h\par \pard\plain 
{\tc\tcl2 \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-port.h}
{\xe \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-port.h}
{\bkmkstart AAAAAAAQUB}
{\bkmkend AAAAAAAQUB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNN" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAQUC}{\bkmkend AAAAAAAQUC}
00001 {\cf20 // Copyright 2005, Google Inc.}\par
{\bkmkstart AAAAAAAQUD}{\bkmkend AAAAAAAQUD}
00002 {\cf20 // All rights reserved.}\par
{\bkmkstart AAAAAAAQUE}{\bkmkend AAAAAAAQUE}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAQUF}{\bkmkend AAAAAAAQUF}
00004 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
{\bkmkstart AAAAAAAQUG}{\bkmkend AAAAAAAQUG}
00005 {\cf20 // modification, are permitted provided that the following conditions are}\par
{\bkmkstart AAAAAAAQUH}{\bkmkend AAAAAAAQUH}
00006 {\cf20 // met:}\par
{\bkmkstart AAAAAAAQUI}{\bkmkend AAAAAAAQUI}
00007 {\cf20 //}\par
{\bkmkstart AAAAAAAQUJ}{\bkmkend AAAAAAAQUJ}
00008 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
{\bkmkstart AAAAAAAQUK}{\bkmkend AAAAAAAQUK}
00009 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
{\bkmkstart AAAAAAAQUL}{\bkmkend AAAAAAAQUL}
00010 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
{\bkmkstart AAAAAAAQUM}{\bkmkend AAAAAAAQUM}
00011 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
{\bkmkstart AAAAAAAQUN}{\bkmkend AAAAAAAQUN}
00012 {\cf20 // in the documentation and/or other materials provided with the}\par
{\bkmkstart AAAAAAAQUO}{\bkmkend AAAAAAAQUO}
00013 {\cf20 // distribution.}\par
{\bkmkstart AAAAAAAQUP}{\bkmkend AAAAAAAQUP}
00014 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
{\bkmkstart AAAAAAAQUQ}{\bkmkend AAAAAAAQUQ}
00015 {\cf20 // contributors may be used to endorse or promote products derived from}\par
{\bkmkstart AAAAAAAQUR}{\bkmkend AAAAAAAQUR}
00016 {\cf20 // this software without specific prior written permission.}\par
{\bkmkstart AAAAAAAQUS}{\bkmkend AAAAAAAQUS}
00017 {\cf20 //}\par
{\bkmkstart AAAAAAAQUT}{\bkmkend AAAAAAAQUT}
00018 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
{\bkmkstart AAAAAAAQUU}{\bkmkend AAAAAAAQUU}
00019 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAQUV}{\bkmkend AAAAAAAQUV}
00020 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
{\bkmkstart AAAAAAAQUW}{\bkmkend AAAAAAAQUW}
00021 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
{\bkmkstart AAAAAAAQUX}{\bkmkend AAAAAAAQUX}
00022 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
{\bkmkstart AAAAAAAQUY}{\bkmkend AAAAAAAQUY}
00023 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAQUZ}{\bkmkend AAAAAAAQUZ}
00024 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
{\bkmkstart AAAAAAAQVA}{\bkmkend AAAAAAAQVA}
00025 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
{\bkmkstart AAAAAAAQVB}{\bkmkend AAAAAAAQVB}
00026 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
{\bkmkstart AAAAAAAQVC}{\bkmkend AAAAAAAQVC}
00027 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
{\bkmkstart AAAAAAAQVD}{\bkmkend AAAAAAAQVD}
00028 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
{\bkmkstart AAAAAAAQVE}{\bkmkend AAAAAAAQVE}
00029 {\cf20 //}\par
{\bkmkstart AAAAAAAQVF}{\bkmkend AAAAAAAQVF}
00030 {\cf20 // Low-level types and utilities for porting Google Test to various}\par
{\bkmkstart AAAAAAAQVG}{\bkmkend AAAAAAAQVG}
00031 {\cf20 // platforms.  All macros ending with _ and symbols defined in an}\par
{\bkmkstart AAAAAAAQVH}{\bkmkend AAAAAAAQVH}
00032 {\cf20 // internal namespace are subject to change without notice.  Code}\par
{\bkmkstart AAAAAAAQVI}{\bkmkend AAAAAAAQVI}
00033 {\cf20 // outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't}\par
{\bkmkstart AAAAAAAQVJ}{\bkmkend AAAAAAAQVJ}
00034 {\cf20 // end with _ are part of Google Test's public API and can be used by}\par
{\bkmkstart AAAAAAAQVK}{\bkmkend AAAAAAAQVK}
00035 {\cf20 // code outside Google Test.}\par
{\bkmkstart AAAAAAAQVL}{\bkmkend AAAAAAAQVL}
00036 {\cf20 //}\par
{\bkmkstart AAAAAAAQVM}{\bkmkend AAAAAAAQVM}
00037 {\cf20 // This file is fundamental to Google Test.  All other Google Test source}\par
{\bkmkstart AAAAAAAQVN}{\bkmkend AAAAAAAQVN}
00038 {\cf20 // files are expected to #include this.  Therefore, it cannot #include}\par
{\bkmkstart AAAAAAAQVO}{\bkmkend AAAAAAAQVO}
00039 {\cf20 // any other Google Test header.}\par
{\bkmkstart AAAAAAAQVP}{\bkmkend AAAAAAAQVP}
00040 \par
{\bkmkstart AAAAAAAQVQ}{\bkmkend AAAAAAAQVQ}
00041 {\cf20 // GOOGLETEST_CM0001 DO NOT DELETE}\par
{\bkmkstart AAAAAAAQVR}{\bkmkend AAAAAAAQVR}
00042 \par
{\bkmkstart AAAAAAAQVS}{\bkmkend AAAAAAAQVS}
00043 {\cf21 #ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
{\bkmkstart AAAAAAAQVT}{\bkmkend AAAAAAAQVT}
00044 {\cf21 #define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
{\bkmkstart AAAAAAAQVU}{\bkmkend AAAAAAAQVU}
00045 \par
{\bkmkstart AAAAAAAQVV}{\bkmkend AAAAAAAQVV}
00046 {\cf20 // Environment-describing macros}\par
{\bkmkstart AAAAAAAQVW}{\bkmkend AAAAAAAQVW}
00047 {\cf20 // -----------------------------}\par
{\bkmkstart AAAAAAAQVX}{\bkmkend AAAAAAAQVX}
00048 {\cf20 //}\par
{\bkmkstart AAAAAAAQVY}{\bkmkend AAAAAAAQVY}
00049 {\cf20 // Google Test can be used in many different environments.  Macros in}\par
{\bkmkstart AAAAAAAQVZ}{\bkmkend AAAAAAAQVZ}
00050 {\cf20 // this section tell Google Test what kind of environment it is being}\par
{\bkmkstart AAAAAAAQWA}{\bkmkend AAAAAAAQWA}
00051 {\cf20 // used in, such that Google Test can provide environment-specific}\par
{\bkmkstart AAAAAAAQWB}{\bkmkend AAAAAAAQWB}
00052 {\cf20 // features and implementations.}\par
{\bkmkstart AAAAAAAQWC}{\bkmkend AAAAAAAQWC}
00053 {\cf20 //}\par
{\bkmkstart AAAAAAAQWD}{\bkmkend AAAAAAAQWD}
00054 {\cf20 // Google Test tries to automatically detect the properties of its}\par
{\bkmkstart AAAAAAAQWE}{\bkmkend AAAAAAAQWE}
00055 {\cf20 // environment, so users usually don't need to worry about these}\par
{\bkmkstart AAAAAAAQWF}{\bkmkend AAAAAAAQWF}
00056 {\cf20 // macros.  However, the automatic detection is not perfect.}\par
{\bkmkstart AAAAAAAQWG}{\bkmkend AAAAAAAQWG}
00057 {\cf20 // Sometimes it's necessary for a user to define some of the following}\par
{\bkmkstart AAAAAAAQWH}{\bkmkend AAAAAAAQWH}
00058 {\cf20 // macros in the build script to override Google Test's decisions.}\par
{\bkmkstart AAAAAAAQWI}{\bkmkend AAAAAAAQWI}
00059 {\cf20 //}\par
{\bkmkstart AAAAAAAQWJ}{\bkmkend AAAAAAAQWJ}
00060 {\cf20 // If the user doesn't define a macro in the list, Google Test will}\par
{\bkmkstart AAAAAAAQWK}{\bkmkend AAAAAAAQWK}
00061 {\cf20 // provide a default definition.  After this header is #included, all}\par
{\bkmkstart AAAAAAAQWL}{\bkmkend AAAAAAAQWL}
00062 {\cf20 // macros in this list will be defined to either 1 or 0.}\par
{\bkmkstart AAAAAAAQWM}{\bkmkend AAAAAAAQWM}
00063 {\cf20 //}\par
{\bkmkstart AAAAAAAQWN}{\bkmkend AAAAAAAQWN}
00064 {\cf20 // Notes to maintainers:}\par
{\bkmkstart AAAAAAAQWO}{\bkmkend AAAAAAAQWO}
00065 {\cf20 //   - Each macro here is a user-tweakable knob; do not grow the list}\par
{\bkmkstart AAAAAAAQWP}{\bkmkend AAAAAAAQWP}
00066 {\cf20 //     lightly.}\par
{\bkmkstart AAAAAAAQWQ}{\bkmkend AAAAAAAQWQ}
00067 {\cf20 //   - Use #if to key off these macros.  Don't use #ifdef or "#if}\par
{\bkmkstart AAAAAAAQWR}{\bkmkend AAAAAAAQWR}
00068 {\cf20 //     defined(...)", which will not work as these macros are ALWAYS}\par
{\bkmkstart AAAAAAAQWS}{\bkmkend AAAAAAAQWS}
00069 {\cf20 //     defined.}\par
{\bkmkstart AAAAAAAQWT}{\bkmkend AAAAAAAQWT}
00070 {\cf20 //}\par
{\bkmkstart AAAAAAAQWU}{\bkmkend AAAAAAAQWU}
00071 {\cf20 //   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)}\par
{\bkmkstart AAAAAAAQWV}{\bkmkend AAAAAAAQWV}
00072 {\cf20 //                              is/isn't available.}\par
{\bkmkstart AAAAAAAQWW}{\bkmkend AAAAAAAQWW}
00073 {\cf20 //   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions}\par
{\bkmkstart AAAAAAAQWX}{\bkmkend AAAAAAAQWX}
00074 {\cf20 //                              are enabled.}\par
{\bkmkstart AAAAAAAQWY}{\bkmkend AAAAAAAQWY}
00075 {\cf20 //   GTEST_HAS_GLOBAL_STRING  - Define it to 1/0 to indicate that ::string}\par
{\bkmkstart AAAAAAAQWZ}{\bkmkend AAAAAAAQWZ}
00076 {\cf20 //                              is/isn't available}\par
{\bkmkstart AAAAAAAQXA}{\bkmkend AAAAAAAQXA}
00077 {\cf20 //   GTEST_HAS_GLOBAL_WSTRING - Define it to 1/0 to indicate that ::wstring}\par
{\bkmkstart AAAAAAAQXB}{\bkmkend AAAAAAAQXB}
00078 {\cf20 //                              is/isn't available}\par
{\bkmkstart AAAAAAAQXC}{\bkmkend AAAAAAAQXC}
00079 {\cf20 //   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular}\par
{\bkmkstart AAAAAAAQXD}{\bkmkend AAAAAAAQXD}
00080 {\cf20 //                              expressions are/aren't available.}\par
{\bkmkstart AAAAAAAQXE}{\bkmkend AAAAAAAQXE}
00081 {\cf20 //   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>}\par
{\bkmkstart AAAAAAAQXF}{\bkmkend AAAAAAAQXF}
00082 {\cf20 //                              is/isn't available.}\par
{\bkmkstart AAAAAAAQXG}{\bkmkend AAAAAAAQXG}
00083 {\cf20 //   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't}\par
{\bkmkstart AAAAAAAQXH}{\bkmkend AAAAAAAQXH}
00084 {\cf20 //                              enabled.}\par
{\bkmkstart AAAAAAAQXI}{\bkmkend AAAAAAAQXI}
00085 {\cf20 //   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that}\par
{\bkmkstart AAAAAAAQXJ}{\bkmkend AAAAAAAQXJ}
00086 {\cf20 //                              std::wstring does/doesn't work (Google Test can}\par
{\bkmkstart AAAAAAAQXK}{\bkmkend AAAAAAAQXK}
00087 {\cf20 //                              be used where std::wstring is unavailable).}\par
{\bkmkstart AAAAAAAQXL}{\bkmkend AAAAAAAQXL}
00088 {\cf20 //   GTEST_HAS_TR1_TUPLE      - Define it to 1/0 to indicate tr1::tuple}\par
{\bkmkstart AAAAAAAQXM}{\bkmkend AAAAAAAQXM}
00089 {\cf20 //                              is/isn't available.}\par
{\bkmkstart AAAAAAAQXN}{\bkmkend AAAAAAAQXN}
00090 {\cf20 //   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the}\par
{\bkmkstart AAAAAAAQXO}{\bkmkend AAAAAAAQXO}
00091 {\cf20 //                              compiler supports Microsoft's "Structured}\par
{\bkmkstart AAAAAAAQXP}{\bkmkend AAAAAAAQXP}
00092 {\cf20 //                              Exception Handling".}\par
{\bkmkstart AAAAAAAQXQ}{\bkmkend AAAAAAAQXQ}
00093 {\cf20 //   GTEST_HAS_STREAM_REDIRECTION}\par
{\bkmkstart AAAAAAAQXR}{\bkmkend AAAAAAAQXR}
00094 {\cf20 //                            - Define it to 1/0 to indicate whether the}\par
{\bkmkstart AAAAAAAQXS}{\bkmkend AAAAAAAQXS}
00095 {\cf20 //                              platform supports I/O stream redirection using}\par
{\bkmkstart AAAAAAAQXT}{\bkmkend AAAAAAAQXT}
00096 {\cf20 //                              dup() and dup2().}\par
{\bkmkstart AAAAAAAQXU}{\bkmkend AAAAAAAQXU}
00097 {\cf20 //   GTEST_USE_OWN_TR1_TUPLE  - Define it to 1/0 to indicate whether Google}\par
{\bkmkstart AAAAAAAQXV}{\bkmkend AAAAAAAQXV}
00098 {\cf20 //                              Test's own tr1 tuple implementation should be}\par
{\bkmkstart AAAAAAAQXW}{\bkmkend AAAAAAAQXW}
00099 {\cf20 //                              used.  Unused when the user sets}\par
{\bkmkstart AAAAAAAQXX}{\bkmkend AAAAAAAQXX}
00100 {\cf20 //                              GTEST_HAS_TR1_TUPLE to 0.}\par
{\bkmkstart AAAAAAAQXY}{\bkmkend AAAAAAAQXY}
00101 {\cf20 //   GTEST_LANG_CXX11         - Define it to 1/0 to indicate that Google Test}\par
{\bkmkstart AAAAAAAQXZ}{\bkmkend AAAAAAAQXZ}
00102 {\cf20 //                              is building in C++11/C++98 mode.}\par
{\bkmkstart AAAAAAAQYA}{\bkmkend AAAAAAAQYA}
00103 {\cf20 //   GTEST_LINKED_AS_SHARED_LIBRARY}\par
{\bkmkstart AAAAAAAQYB}{\bkmkend AAAAAAAQYB}
00104 {\cf20 //                            - Define to 1 when compiling tests that use}\par
{\bkmkstart AAAAAAAQYC}{\bkmkend AAAAAAAQYC}
00105 {\cf20 //                              Google Test as a shared library (known as}\par
{\bkmkstart AAAAAAAQYD}{\bkmkend AAAAAAAQYD}
00106 {\cf20 //                              DLL on Windows).}\par
{\bkmkstart AAAAAAAQYE}{\bkmkend AAAAAAAQYE}
00107 {\cf20 //   GTEST_CREATE_SHARED_LIBRARY}\par
{\bkmkstart AAAAAAAQYF}{\bkmkend AAAAAAAQYF}
00108 {\cf20 //                            - Define to 1 when compiling Google Test itself}\par
{\bkmkstart AAAAAAAQYG}{\bkmkend AAAAAAAQYG}
00109 {\cf20 //                              as a shared library.}\par
{\bkmkstart AAAAAAAQYH}{\bkmkend AAAAAAAQYH}
00110 {\cf20 //   GTEST_DEFAULT_DEATH_TEST_STYLE}\par
{\bkmkstart AAAAAAAQYI}{\bkmkend AAAAAAAQYI}
00111 {\cf20 //                            - The default value of --gtest_death_test_style.}\par
{\bkmkstart AAAAAAAQYJ}{\bkmkend AAAAAAAQYJ}
00112 {\cf20 //                              The legacy default has been "fast" in the open}\par
{\bkmkstart AAAAAAAQYK}{\bkmkend AAAAAAAQYK}
00113 {\cf20 //                              source version since 2008. The recommended value}\par
{\bkmkstart AAAAAAAQYL}{\bkmkend AAAAAAAQYL}
00114 {\cf20 //                              is "threadsafe", and can be set in}\par
{\bkmkstart AAAAAAAQYM}{\bkmkend AAAAAAAQYM}
00115 {\cf20 //                              custom/gtest-port.h.}\par
{\bkmkstart AAAAAAAQYN}{\bkmkend AAAAAAAQYN}
00116 \par
{\bkmkstart AAAAAAAQYO}{\bkmkend AAAAAAAQYO}
00117 {\cf20 // Platform-indicating macros}\par
{\bkmkstart AAAAAAAQYP}{\bkmkend AAAAAAAQYP}
00118 {\cf20 // --------------------------}\par
{\bkmkstart AAAAAAAQYQ}{\bkmkend AAAAAAAQYQ}
00119 {\cf20 //}\par
{\bkmkstart AAAAAAAQYR}{\bkmkend AAAAAAAQYR}
00120 {\cf20 // Macros indicating the platform on which Google Test is being used}\par
{\bkmkstart AAAAAAAQYS}{\bkmkend AAAAAAAQYS}
00121 {\cf20 // (a macro is defined to 1 if compiled on the given platform;}\par
{\bkmkstart AAAAAAAQYT}{\bkmkend AAAAAAAQYT}
00122 {\cf20 // otherwise UNDEFINED -- it's never defined to 0.).  Google Test}\par
{\bkmkstart AAAAAAAQYU}{\bkmkend AAAAAAAQYU}
00123 {\cf20 // defines these macros automatically.  Code outside Google Test MUST}\par
{\bkmkstart AAAAAAAQYV}{\bkmkend AAAAAAAQYV}
00124 {\cf20 // NOT define them.}\par
{\bkmkstart AAAAAAAQYW}{\bkmkend AAAAAAAQYW}
00125 {\cf20 //}\par
{\bkmkstart AAAAAAAQYX}{\bkmkend AAAAAAAQYX}
00126 {\cf20 //   GTEST_OS_AIX      - IBM AIX}\par
{\bkmkstart AAAAAAAQYY}{\bkmkend AAAAAAAQYY}
00127 {\cf20 //   GTEST_OS_CYGWIN   - Cygwin}\par
{\bkmkstart AAAAAAAQYZ}{\bkmkend AAAAAAAQYZ}
00128 {\cf20 //   GTEST_OS_FREEBSD  - FreeBSD}\par
{\bkmkstart AAAAAAAQZA}{\bkmkend AAAAAAAQZA}
00129 {\cf20 //   GTEST_OS_FUCHSIA  - Fuchsia}\par
{\bkmkstart AAAAAAAQZB}{\bkmkend AAAAAAAQZB}
00130 {\cf20 //   GTEST_OS_HPUX     - HP-UX}\par
{\bkmkstart AAAAAAAQZC}{\bkmkend AAAAAAAQZC}
00131 {\cf20 //   GTEST_OS_LINUX    - Linux}\par
{\bkmkstart AAAAAAAQZD}{\bkmkend AAAAAAAQZD}
00132 {\cf20 //     GTEST_OS_LINUX_ANDROID - Google Android}\par
{\bkmkstart AAAAAAAQZE}{\bkmkend AAAAAAAQZE}
00133 {\cf20 //   GTEST_OS_MAC      - Mac OS X}\par
{\bkmkstart AAAAAAAQZF}{\bkmkend AAAAAAAQZF}
00134 {\cf20 //     GTEST_OS_IOS    - iOS}\par
{\bkmkstart AAAAAAAQZG}{\bkmkend AAAAAAAQZG}
00135 {\cf20 //   GTEST_OS_NACL     - Google Native Client (NaCl)}\par
{\bkmkstart AAAAAAAQZH}{\bkmkend AAAAAAAQZH}
00136 {\cf20 //   GTEST_OS_NETBSD   - NetBSD}\par
{\bkmkstart AAAAAAAQZI}{\bkmkend AAAAAAAQZI}
00137 {\cf20 //   GTEST_OS_OPENBSD  - OpenBSD}\par
{\bkmkstart AAAAAAAQZJ}{\bkmkend AAAAAAAQZJ}
00138 {\cf20 //   GTEST_OS_QNX      - QNX}\par
{\bkmkstart AAAAAAAQZK}{\bkmkend AAAAAAAQZK}
00139 {\cf20 //   GTEST_OS_SOLARIS  - Sun Solaris}\par
{\bkmkstart AAAAAAAQZL}{\bkmkend AAAAAAAQZL}
00140 {\cf20 //   GTEST_OS_SYMBIAN  - Symbian}\par
{\bkmkstart AAAAAAAQZM}{\bkmkend AAAAAAAQZM}
00141 {\cf20 //   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)}\par
{\bkmkstart AAAAAAAQZN}{\bkmkend AAAAAAAQZN}
00142 {\cf20 //     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop}\par
{\bkmkstart AAAAAAAQZO}{\bkmkend AAAAAAAQZO}
00143 {\cf20 //     GTEST_OS_WINDOWS_MINGW    - MinGW}\par
{\bkmkstart AAAAAAAQZP}{\bkmkend AAAAAAAQZP}
00144 {\cf20 //     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile}\par
{\bkmkstart AAAAAAAQZQ}{\bkmkend AAAAAAAQZQ}
00145 {\cf20 //     GTEST_OS_WINDOWS_PHONE    - Windows Phone}\par
{\bkmkstart AAAAAAAQZR}{\bkmkend AAAAAAAQZR}
00146 {\cf20 //     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT}\par
{\bkmkstart AAAAAAAQZS}{\bkmkend AAAAAAAQZS}
00147 {\cf20 //   GTEST_OS_ZOS      - z/OS}\par
{\bkmkstart AAAAAAAQZT}{\bkmkend AAAAAAAQZT}
00148 {\cf20 //}\par
{\bkmkstart AAAAAAAQZU}{\bkmkend AAAAAAAQZU}
00149 {\cf20 // Among the platforms, Cygwin, Linux, Max OS X, and Windows have the}\par
{\bkmkstart AAAAAAAQZV}{\bkmkend AAAAAAAQZV}
00150 {\cf20 // most stable support.  Since core members of the Google Test project}\par
{\bkmkstart AAAAAAAQZW}{\bkmkend AAAAAAAQZW}
00151 {\cf20 // don't have access to other platforms, support for them may be less}\par
{\bkmkstart AAAAAAAQZX}{\bkmkend AAAAAAAQZX}
00152 {\cf20 // stable.  If you notice any problems on your platform, please notify}\par
{\bkmkstart AAAAAAAQZY}{\bkmkend AAAAAAAQZY}
00153 {\cf20 // googletestframework@googlegroups.com (patches for fixing them are}\par
{\bkmkstart AAAAAAAQZZ}{\bkmkend AAAAAAAQZZ}
00154 {\cf20 // even more welcome!).}\par
{\bkmkstart AAAAAAARAA}{\bkmkend AAAAAAARAA}
00155 {\cf20 //}\par
{\bkmkstart AAAAAAARAB}{\bkmkend AAAAAAARAB}
00156 {\cf20 // It is possible that none of the GTEST_OS_* macros are defined.}\par
{\bkmkstart AAAAAAARAC}{\bkmkend AAAAAAARAC}
00157 \par
{\bkmkstart AAAAAAARAD}{\bkmkend AAAAAAARAD}
00158 {\cf20 // Feature-indicating macros}\par
{\bkmkstart AAAAAAARAE}{\bkmkend AAAAAAARAE}
00159 {\cf20 // -------------------------}\par
{\bkmkstart AAAAAAARAF}{\bkmkend AAAAAAARAF}
00160 {\cf20 //}\par
{\bkmkstart AAAAAAARAG}{\bkmkend AAAAAAARAG}
00161 {\cf20 // Macros indicating which Google Test features are available (a macro}\par
{\bkmkstart AAAAAAARAH}{\bkmkend AAAAAAARAH}
00162 {\cf20 // is defined to 1 if the corresponding feature is supported;}\par
{\bkmkstart AAAAAAARAI}{\bkmkend AAAAAAARAI}
00163 {\cf20 // otherwise UNDEFINED -- it's never defined to 0.).  Google Test}\par
{\bkmkstart AAAAAAARAJ}{\bkmkend AAAAAAARAJ}
00164 {\cf20 // defines these macros automatically.  Code outside Google Test MUST}\par
{\bkmkstart AAAAAAARAK}{\bkmkend AAAAAAARAK}
00165 {\cf20 // NOT define them.}\par
{\bkmkstart AAAAAAARAL}{\bkmkend AAAAAAARAL}
00166 {\cf20 //}\par
{\bkmkstart AAAAAAARAM}{\bkmkend AAAAAAARAM}
00167 {\cf20 // These macros are public so that portable tests can be written.}\par
{\bkmkstart AAAAAAARAN}{\bkmkend AAAAAAARAN}
00168 {\cf20 // Such tests typically surround code using a feature with an #if}\par
{\bkmkstart AAAAAAARAO}{\bkmkend AAAAAAARAO}
00169 {\cf20 // which controls that code.  For example:}\par
{\bkmkstart AAAAAAARAP}{\bkmkend AAAAAAARAP}
00170 {\cf20 //}\par
{\bkmkstart AAAAAAARAQ}{\bkmkend AAAAAAARAQ}
00171 {\cf20 // #if GTEST_HAS_DEATH_TEST}\par
{\bkmkstart AAAAAAARAR}{\bkmkend AAAAAAARAR}
00172 {\cf20 //   EXPECT_DEATH(DoSomethingDeadly());}\par
{\bkmkstart AAAAAAARAS}{\bkmkend AAAAAAARAS}
00173 {\cf20 // #endif}\par
{\bkmkstart AAAAAAARAT}{\bkmkend AAAAAAARAT}
00174 {\cf20 //}\par
{\bkmkstart AAAAAAARAU}{\bkmkend AAAAAAARAU}
00175 {\cf20 //   GTEST_HAS_COMBINE      - the Combine() function (for value-parameterized}\par
{\bkmkstart AAAAAAARAV}{\bkmkend AAAAAAARAV}
00176 {\cf20 //                            tests)}\par
{\bkmkstart AAAAAAARAW}{\bkmkend AAAAAAARAW}
00177 {\cf20 //   GTEST_HAS_DEATH_TEST   - death tests}\par
{\bkmkstart AAAAAAARAX}{\bkmkend AAAAAAARAX}
00178 {\cf20 //   GTEST_HAS_TYPED_TEST   - typed tests}\par
{\bkmkstart AAAAAAARAY}{\bkmkend AAAAAAARAY}
00179 {\cf20 //   GTEST_HAS_TYPED_TEST_P - type-parameterized tests}\par
{\bkmkstart AAAAAAARAZ}{\bkmkend AAAAAAARAZ}
00180 {\cf20 //   GTEST_IS_THREADSAFE    - Google Test is thread-safe.}\par
{\bkmkstart AAAAAAARBA}{\bkmkend AAAAAAARBA}
00181 {\cf20 //   GOOGLETEST_CM0007 DO NOT DELETE}\par
{\bkmkstart AAAAAAARBB}{\bkmkend AAAAAAARBB}
00182 {\cf20 //   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with}\par
{\bkmkstart AAAAAAARBC}{\bkmkend AAAAAAARBC}
00183 {\cf20 //                            GTEST_HAS_POSIX_RE (see above) which users can}\par
{\bkmkstart AAAAAAARBD}{\bkmkend AAAAAAARBD}
00184 {\cf20 //                            define themselves.}\par
{\bkmkstart AAAAAAARBE}{\bkmkend AAAAAAARBE}
00185 {\cf20 //   GTEST_USES_SIMPLE_RE   - our own simple regex is used;}\par
{\bkmkstart AAAAAAARBF}{\bkmkend AAAAAAARBF}
00186 {\cf20 //                            the above RE\\b(s) are mutually exclusive.}\par
{\bkmkstart AAAAAAARBG}{\bkmkend AAAAAAARBG}
00187 {\cf20 //   GTEST_CAN_COMPARE_NULL - accepts untyped NULL in EXPECT_EQ().}\par
{\bkmkstart AAAAAAARBH}{\bkmkend AAAAAAARBH}
00188 \par
{\bkmkstart AAAAAAARBI}{\bkmkend AAAAAAARBI}
00189 {\cf20 // Misc public macros}\par
{\bkmkstart AAAAAAARBJ}{\bkmkend AAAAAAARBJ}
00190 {\cf20 // ------------------}\par
{\bkmkstart AAAAAAARBK}{\bkmkend AAAAAAARBK}
00191 {\cf20 //}\par
{\bkmkstart AAAAAAARBL}{\bkmkend AAAAAAARBL}
00192 {\cf20 //   GTEST_FLAG(flag_name)  - references the variable corresponding to}\par
{\bkmkstart AAAAAAARBM}{\bkmkend AAAAAAARBM}
00193 {\cf20 //                            the given Google Test flag.}\par
{\bkmkstart AAAAAAARBN}{\bkmkend AAAAAAARBN}
00194 \par
{\bkmkstart AAAAAAARBO}{\bkmkend AAAAAAARBO}
00195 {\cf20 // Internal utilities}\par
{\bkmkstart AAAAAAARBP}{\bkmkend AAAAAAARBP}
00196 {\cf20 // ------------------}\par
{\bkmkstart AAAAAAARBQ}{\bkmkend AAAAAAARBQ}
00197 {\cf20 //}\par
{\bkmkstart AAAAAAARBR}{\bkmkend AAAAAAARBR}
00198 {\cf20 // The following macros and utilities are for Google Test's INTERNAL}\par
{\bkmkstart AAAAAAARBS}{\bkmkend AAAAAAARBS}
00199 {\cf20 // use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.}\par
{\bkmkstart AAAAAAARBT}{\bkmkend AAAAAAARBT}
00200 {\cf20 //}\par
{\bkmkstart AAAAAAARBU}{\bkmkend AAAAAAARBU}
00201 {\cf20 // Macros for basic C++ coding:}\par
{\bkmkstart AAAAAAARBV}{\bkmkend AAAAAAARBV}
00202 {\cf20 //   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.}\par
{\bkmkstart AAAAAAARBW}{\bkmkend AAAAAAARBW}
00203 {\cf20 //   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a}\par
{\bkmkstart AAAAAAARBX}{\bkmkend AAAAAAARBX}
00204 {\cf20 //                              variable don't have to be used.}\par
{\bkmkstart AAAAAAARBY}{\bkmkend AAAAAAARBY}
00205 {\cf20 //   GTEST_DISALLOW_ASSIGN_   - disables operator=.}\par
{\bkmkstart AAAAAAARBZ}{\bkmkend AAAAAAARBZ}
00206 {\cf20 //   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.}\par
{\bkmkstart AAAAAAARCA}{\bkmkend AAAAAAARCA}
00207 {\cf20 //   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.}\par
{\bkmkstart AAAAAAARCB}{\bkmkend AAAAAAARCB}
00208 {\cf20 //   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is}\par
{\bkmkstart AAAAAAARCC}{\bkmkend AAAAAAARCC}
00209 {\cf20 //                                        suppressed (constant conditional).}\par
{\bkmkstart AAAAAAARCD}{\bkmkend AAAAAAARCD}
00210 {\cf20 //   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127}\par
{\bkmkstart AAAAAAARCE}{\bkmkend AAAAAAARCE}
00211 {\cf20 //                                        is suppressed.}\par
{\bkmkstart AAAAAAARCF}{\bkmkend AAAAAAARCF}
00212 {\cf20 //}\par
{\bkmkstart AAAAAAARCG}{\bkmkend AAAAAAARCG}
00213 {\cf20 // C++11 feature wrappers:}\par
{\bkmkstart AAAAAAARCH}{\bkmkend AAAAAAARCH}
00214 {\cf20 //}\par
{\bkmkstart AAAAAAARCI}{\bkmkend AAAAAAARCI}
00215 {\cf20 //   testing::internal::forward - portability wrapper for std::forward.}\par
{\bkmkstart AAAAAAARCJ}{\bkmkend AAAAAAARCJ}
00216 {\cf20 //   testing::internal::move  - portability wrapper for std::move.}\par
{\bkmkstart AAAAAAARCK}{\bkmkend AAAAAAARCK}
00217 {\cf20 //}\par
{\bkmkstart AAAAAAARCL}{\bkmkend AAAAAAARCL}
00218 {\cf20 // Synchronization:}\par
{\bkmkstart AAAAAAARCM}{\bkmkend AAAAAAARCM}
00219 {\cf20 //   Mutex, MutexLock, ThreadLocal, GetThreadCount()}\par
{\bkmkstart AAAAAAARCN}{\bkmkend AAAAAAARCN}
00220 {\cf20 //                            - synchronization primitives.}\par
{\bkmkstart AAAAAAARCO}{\bkmkend AAAAAAARCO}
00221 {\cf20 //}\par
{\bkmkstart AAAAAAARCP}{\bkmkend AAAAAAARCP}
00222 {\cf20 // Template meta programming:}\par
{\bkmkstart AAAAAAARCQ}{\bkmkend AAAAAAARCQ}
00223 {\cf20 //   is_pointer     - as in TR1; needed on Symbian and IBM XL C/C++ only.}\par
{\bkmkstart AAAAAAARCR}{\bkmkend AAAAAAARCR}
00224 {\cf20 //   IteratorTraits - partial implementation of std::iterator_traits, which}\par
{\bkmkstart AAAAAAARCS}{\bkmkend AAAAAAARCS}
00225 {\cf20 //                    is not available in libCstd when compiled with Sun C++.}\par
{\bkmkstart AAAAAAARCT}{\bkmkend AAAAAAARCT}
00226 {\cf20 //}\par
{\bkmkstart AAAAAAARCU}{\bkmkend AAAAAAARCU}
00227 {\cf20 // Smart pointers:}\par
{\bkmkstart AAAAAAARCV}{\bkmkend AAAAAAARCV}
00228 {\cf20 //   scoped_ptr     - as in TR2.}\par
{\bkmkstart AAAAAAARCW}{\bkmkend AAAAAAARCW}
00229 {\cf20 //}\par
{\bkmkstart AAAAAAARCX}{\bkmkend AAAAAAARCX}
00230 {\cf20 // Regular expressions:}\par
{\bkmkstart AAAAAAARCY}{\bkmkend AAAAAAARCY}
00231 {\cf20 //   RE             - a simple regular expression class using the POSIX}\par
{\bkmkstart AAAAAAARCZ}{\bkmkend AAAAAAARCZ}
00232 {\cf20 //                    Extended Regular Expression syntax on UNIX-like platforms}\par
{\bkmkstart AAAAAAARDA}{\bkmkend AAAAAAARDA}
00233 {\cf20 //                    GOOGLETEST_CM0008 DO NOT DELETE}\par
{\bkmkstart AAAAAAARDB}{\bkmkend AAAAAAARDB}
00234 {\cf20 //                    or a reduced regular exception syntax on other}\par
{\bkmkstart AAAAAAARDC}{\bkmkend AAAAAAARDC}
00235 {\cf20 //                    platforms, including Windows.}\par
{\bkmkstart AAAAAAARDD}{\bkmkend AAAAAAARDD}
00236 {\cf20 // Logging:}\par
{\bkmkstart AAAAAAARDE}{\bkmkend AAAAAAARDE}
00237 {\cf20 //   GTEST_LOG_()   - logs messages at the specified severity level.}\par
{\bkmkstart AAAAAAARDF}{\bkmkend AAAAAAARDF}
00238 {\cf20 //   LogToStderr()  - directs all log messages to stderr.}\par
{\bkmkstart AAAAAAARDG}{\bkmkend AAAAAAARDG}
00239 {\cf20 //   FlushInfoLog() - flushes informational log messages.}\par
{\bkmkstart AAAAAAARDH}{\bkmkend AAAAAAARDH}
00240 {\cf20 //}\par
{\bkmkstart AAAAAAARDI}{\bkmkend AAAAAAARDI}
00241 {\cf20 // Stdout and stderr capturing:}\par
{\bkmkstart AAAAAAARDJ}{\bkmkend AAAAAAARDJ}
00242 {\cf20 //   CaptureStdout()     - starts capturing stdout.}\par
{\bkmkstart AAAAAAARDK}{\bkmkend AAAAAAARDK}
00243 {\cf20 //   GetCapturedStdout() - stops capturing stdout and returns the captured}\par
{\bkmkstart AAAAAAARDL}{\bkmkend AAAAAAARDL}
00244 {\cf20 //                         string.}\par
{\bkmkstart AAAAAAARDM}{\bkmkend AAAAAAARDM}
00245 {\cf20 //   CaptureStderr()     - starts capturing stderr.}\par
{\bkmkstart AAAAAAARDN}{\bkmkend AAAAAAARDN}
00246 {\cf20 //   GetCapturedStderr() - stops capturing stderr and returns the captured}\par
{\bkmkstart AAAAAAARDO}{\bkmkend AAAAAAARDO}
00247 {\cf20 //                         string.}\par
{\bkmkstart AAAAAAARDP}{\bkmkend AAAAAAARDP}
00248 {\cf20 //}\par
{\bkmkstart AAAAAAARDQ}{\bkmkend AAAAAAARDQ}
00249 {\cf20 // Integer types:}\par
{\bkmkstart AAAAAAARDR}{\bkmkend AAAAAAARDR}
00250 {\cf20 //   TypeWithSize   - maps an integer to a int type.}\par
{\bkmkstart AAAAAAARDS}{\bkmkend AAAAAAARDS}
00251 {\cf20 //   Int32, UInt32, Int64, UInt64, TimeInMillis}\par
{\bkmkstart AAAAAAARDT}{\bkmkend AAAAAAARDT}
00252 {\cf20 //                  - integers of known sizes.}\par
{\bkmkstart AAAAAAARDU}{\bkmkend AAAAAAARDU}
00253 {\cf20 //   BiggestInt     - the biggest signed integer type.}\par
{\bkmkstart AAAAAAARDV}{\bkmkend AAAAAAARDV}
00254 {\cf20 //}\par
{\bkmkstart AAAAAAARDW}{\bkmkend AAAAAAARDW}
00255 {\cf20 // Command-line utilities:}\par
{\bkmkstart AAAAAAARDX}{\bkmkend AAAAAAARDX}
00256 {\cf20 //   GTEST_DECLARE_*()  - declares a flag.}\par
{\bkmkstart AAAAAAARDY}{\bkmkend AAAAAAARDY}
00257 {\cf20 //   GTEST_DEFINE_*()   - defines a flag.}\par
{\bkmkstart AAAAAAARDZ}{\bkmkend AAAAAAARDZ}
00258 {\cf20 //   GetInjectableArgvs() - returns the command line as a vector of strings.}\par
{\bkmkstart AAAAAAAREA}{\bkmkend AAAAAAAREA}
00259 {\cf20 //}\par
{\bkmkstart AAAAAAAREB}{\bkmkend AAAAAAAREB}
00260 {\cf20 // Environment variable utilities:}\par
{\bkmkstart AAAAAAAREC}{\bkmkend AAAAAAAREC}
00261 {\cf20 //   GetEnv()             - gets the value of an environment variable.}\par
{\bkmkstart AAAAAAARED}{\bkmkend AAAAAAARED}
00262 {\cf20 //   BoolFromGTestEnv()   - parses a bool environment variable.}\par
{\bkmkstart AAAAAAAREE}{\bkmkend AAAAAAAREE}
00263 {\cf20 //   Int32FromGTestEnv()  - parses an Int32 environment variable.}\par
{\bkmkstart AAAAAAAREF}{\bkmkend AAAAAAAREF}
00264 {\cf20 //   StringFromGTestEnv() - parses a string environment variable.}\par
{\bkmkstart AAAAAAAREG}{\bkmkend AAAAAAAREG}
00265 \par
{\bkmkstart AAAAAAAREH}{\bkmkend AAAAAAAREH}
00266 {\cf21 #include <ctype.h>}   {\cf20 // for isspace, etc}\par
{\bkmkstart AAAAAAAREI}{\bkmkend AAAAAAAREI}
00267 {\cf21 #include <stddef.h>}  {\cf20 // for ptrdiff_t}\par
{\bkmkstart AAAAAAAREJ}{\bkmkend AAAAAAAREJ}
00268 {\cf21 #include <stdlib.h>}\par
{\bkmkstart AAAAAAAREK}{\bkmkend AAAAAAAREK}
00269 {\cf21 #include <stdio.h>}\par
{\bkmkstart AAAAAAAREL}{\bkmkend AAAAAAAREL}
00270 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAAAREM}{\bkmkend AAAAAAAREM}
00271 {\cf21 #ifndef _WIN32_WCE}\par
{\bkmkstart AAAAAAAREN}{\bkmkend AAAAAAAREN}
00272 {\cf21 # include <sys/types.h>}\par
{\bkmkstart AAAAAAAREO}{\bkmkend AAAAAAAREO}
00273 {\cf21 # include <sys/stat.h>}\par
{\bkmkstart AAAAAAAREP}{\bkmkend AAAAAAAREP}
00274 {\cf21 #endif  }{\cf20 // !_WIN32_WCE}\par
{\bkmkstart AAAAAAAREQ}{\bkmkend AAAAAAAREQ}
00275 \par
{\bkmkstart AAAAAAARER}{\bkmkend AAAAAAARER}
00276 {\cf21 #if defined __APPLE__}\par
{\bkmkstart AAAAAAARES}{\bkmkend AAAAAAARES}
00277 {\cf21 # include <AvailabilityMacros.h>}\par
{\bkmkstart AAAAAAARET}{\bkmkend AAAAAAARET}
00278 {\cf21 # include <TargetConditionals.h>}\par
{\bkmkstart AAAAAAAREU}{\bkmkend AAAAAAAREU}
00279 {\cf21 #endif}\par
{\bkmkstart AAAAAAAREV}{\bkmkend AAAAAAAREV}
00280 \par
{\bkmkstart AAAAAAAREW}{\bkmkend AAAAAAAREW}
00281 {\cf20 // Brings in the definition of HAS_GLOBAL_STRING.  This must be done}\par
{\bkmkstart AAAAAAAREX}{\bkmkend AAAAAAAREX}
00282 {\cf20 // BEFORE we test HAS_GLOBAL_STRING.}\par
{\bkmkstart AAAAAAAREY}{\bkmkend AAAAAAAREY}
00283 {\cf21 #include <string>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAREZ}{\bkmkend AAAAAAAREZ}
00284 {\cf21 #include <algorithm>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARFA}{\bkmkend AAAAAAARFA}
00285 {\cf21 #include <iostream>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARFB}{\bkmkend AAAAAAARFB}
00286 {\cf21 #include <sstream>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARFC}{\bkmkend AAAAAAARFC}
00287 {\cf21 #include <utility>}\par
{\bkmkstart AAAAAAARFD}{\bkmkend AAAAAAARFD}
00288 {\cf21 #include <vector>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARFE}{\bkmkend AAAAAAARFE}
00289 \par
{\bkmkstart AAAAAAARFF}{\bkmkend AAAAAAARFF}
00290 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFG" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-port-arch.h}}}
"}\par
{\bkmkstart AAAAAAARFH}{\bkmkend AAAAAAARFH}
00291 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAQSP" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/custom/gtest-port.h}}}
"}\par
{\bkmkstart AAAAAAARFI}{\bkmkend AAAAAAARFI}
00292 \par
{\bkmkstart AAAAAAARFJ}{\bkmkend AAAAAAARFJ}
00293 {\cf21 #if !defined(GTEST_DEV_EMAIL_)}\par
{\bkmkstart AAAAAAARFK}{\bkmkend AAAAAAARFK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFL" }{}}{\fldrslt {\cs37\ul\cf2 00294}}}
 {\cf21 # define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"}\par
{\bkmkstart AAAAAAARFM}{\bkmkend AAAAAAARFM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFN" }{}}{\fldrslt {\cs37\ul\cf2 00295}}}
 {\cf21 # define GTEST_FLAG_PREFIX_ "gtest_"}\par
{\bkmkstart AAAAAAARFO}{\bkmkend AAAAAAARFO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFP" }{}}{\fldrslt {\cs37\ul\cf2 00296}}}
 {\cf21 # define GTEST_FLAG_PREFIX_DASH_ "gtest-"}\par
{\bkmkstart AAAAAAARFQ}{\bkmkend AAAAAAARFQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFR" }{}}{\fldrslt {\cs37\ul\cf2 00297}}}
 {\cf21 # define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"}\par
{\bkmkstart AAAAAAARFS}{\bkmkend AAAAAAARFS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFT" }{}}{\fldrslt {\cs37\ul\cf2 00298}}}
 {\cf21 # define GTEST_NAME_ "Google Test"}\par
{\bkmkstart AAAAAAARFU}{\bkmkend AAAAAAARFU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARFV" }{}}{\fldrslt {\cs37\ul\cf2 00299}}}
 {\cf21 # define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"}\par
{\bkmkstart AAAAAAARFW}{\bkmkend AAAAAAARFW}
00300 {\cf21 #endif  }{\cf20 // !defined(GTEST_DEV_EMAIL_)}\par
{\bkmkstart AAAAAAARFX}{\bkmkend AAAAAAARFX}
00301 \par
{\bkmkstart AAAAAAARFY}{\bkmkend AAAAAAARFY}
00302 {\cf21 #if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)}\par
{\bkmkstart AAAAAAARFZ}{\bkmkend AAAAAAARFZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARGA" }{}}{\fldrslt {\cs37\ul\cf2 00303}}}
 {\cf21 # define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"}\par
{\bkmkstart AAAAAAARGB}{\bkmkend AAAAAAARGB}
00304 {\cf21 #endif  }{\cf20 // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)}\par
{\bkmkstart AAAAAAARGC}{\bkmkend AAAAAAARGC}
00305 \par
{\bkmkstart AAAAAAARGD}{\bkmkend AAAAAAARGD}
00306 {\cf20 // Determines the version of gcc that is used to compile this.}\par
{\bkmkstart AAAAAAARGE}{\bkmkend AAAAAAARGE}
00307 {\cf21 #ifdef __GNUC__}\par
{\bkmkstart AAAAAAARGF}{\bkmkend AAAAAAARGF}
00308 {\cf20 // 40302 means version 4.3.2.}\par
{\bkmkstart AAAAAAARGG}{\bkmkend AAAAAAARGG}
00309 {\cf21 # define GTEST_GCC_VER_ \\}\par
{\bkmkstart AAAAAAARGH}{\bkmkend AAAAAAARGH}
00310 {\cf21     (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)}\par
{\bkmkstart AAAAAAARGI}{\bkmkend AAAAAAARGI}
00311 {\cf21 #endif  }{\cf20 // __GNUC__}\par
{\bkmkstart AAAAAAARGJ}{\bkmkend AAAAAAARGJ}
00312 \par
{\bkmkstart AAAAAAARGK}{\bkmkend AAAAAAARGK}
00313 {\cf20 // Macros for disabling Microsoft Visual C++ warnings.}\par
{\bkmkstart AAAAAAARGL}{\bkmkend AAAAAAARGL}
00314 {\cf20 //}\par
{\bkmkstart AAAAAAARGM}{\bkmkend AAAAAAARGM}
00315 {\cf20 //   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)}\par
{\bkmkstart AAAAAAARGN}{\bkmkend AAAAAAARGN}
00316 {\cf20 //   /* code that triggers warnings C4800 and C4385 */}\par
{\bkmkstart AAAAAAARGO}{\bkmkend AAAAAAARGO}
00317 {\cf20 //   GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
{\bkmkstart AAAAAAARGP}{\bkmkend AAAAAAARGP}
00318 {\cf21 #if _MSC_VER >= 1400}\par
{\bkmkstart AAAAAAARGQ}{\bkmkend AAAAAAARGQ}
00319 {\cf21 # define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \\}\par
{\bkmkstart AAAAAAARGR}{\bkmkend AAAAAAARGR}
00320 {\cf21     __pragma(warning(push))                        \\}\par
{\bkmkstart AAAAAAARGS}{\bkmkend AAAAAAARGS}
00321 {\cf21     __pragma(warning(disable: warnings))}\par
{\bkmkstart AAAAAAARGT}{\bkmkend AAAAAAARGT}
00322 {\cf21 # define GTEST_DISABLE_MSC_WARNINGS_POP_()          \\}\par
{\bkmkstart AAAAAAARGU}{\bkmkend AAAAAAARGU}
00323 {\cf21     __pragma(warning(pop))}\par
{\bkmkstart AAAAAAARGV}{\bkmkend AAAAAAARGV}
00324 {\cf21 #else}\par
{\bkmkstart AAAAAAARGW}{\bkmkend AAAAAAARGW}
00325 {\cf20 // Older versions of MSVC don't have __pragma.}\par
{\bkmkstart AAAAAAARGX}{\bkmkend AAAAAAARGX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNQ" }{}}{\fldrslt {\cs37\ul\cf2 00326}}}
 {\cf21 # define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)}\par
{\bkmkstart AAAAAAARGY}{\bkmkend AAAAAAARGY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 00327}}}
 {\cf21 # define GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
{\bkmkstart AAAAAAARGZ}{\bkmkend AAAAAAARGZ}
00328 {\cf21 #endif}\par
{\bkmkstart AAAAAAARHA}{\bkmkend AAAAAAARHA}
00329 \par
{\bkmkstart AAAAAAARHB}{\bkmkend AAAAAAARHB}
00330 {\cf20 // Clang on Windows does not understand MSVC's pragma warning.}\par
{\bkmkstart AAAAAAARHC}{\bkmkend AAAAAAARHC}
00331 {\cf20 // We need clang-specific way to disable function deprecation warning.}\par
{\bkmkstart AAAAAAARHD}{\bkmkend AAAAAAARHD}
00332 {\cf21 #ifdef __clang__}\par
{\bkmkstart AAAAAAARHE}{\bkmkend AAAAAAARHE}
00333 {\cf21 # define GTEST_DISABLE_MSC_DEPRECATED_PUSH_()                         \\}\par
{\bkmkstart AAAAAAARHF}{\bkmkend AAAAAAARHF}
00334 {\cf21     _Pragma("clang diagnostic push"})                                  \\\par
{\bkmkstart AAAAAAARHG}{\bkmkend AAAAAAARHG}
00335     _Pragma("clang diagnostic ignored \\"-Wdeprecated-declarations\\"") \\\par
{\bkmkstart AAAAAAARHH}{\bkmkend AAAAAAARHH}
00336     _Pragma("clang diagnostic ignored \\"-Wdeprecated-implementations\\"")\par
{\bkmkstart AAAAAAARHI}{\bkmkend AAAAAAARHI}
00337 {\cf21 #define GTEST_DISABLE_MSC_DEPRECATED_POP_() \\}\par
{\bkmkstart AAAAAAARHJ}{\bkmkend AAAAAAARHJ}
00338 {\cf21     _Pragma("clang diagnostic pop"})\par
{\bkmkstart AAAAAAARHK}{\bkmkend AAAAAAARHK}
00339 {\cf21 #else}\par
{\bkmkstart AAAAAAARHL}{\bkmkend AAAAAAARHL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARHM" }{}}{\fldrslt {\cs37\ul\cf2 00340}}}
 {\cf21 # define GTEST_DISABLE_MSC_DEPRECATED_PUSH_() \\}\par
{\bkmkstart AAAAAAARHN}{\bkmkend AAAAAAARHN}
00341 {\cf21     GTEST_DISABLE_MSC_WARNINGS_PUSH_(4996)}\par
{\bkmkstart AAAAAAARHO}{\bkmkend AAAAAAARHO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARHP" }{}}{\fldrslt {\cs37\ul\cf2 00342}}}
 {\cf21 # define GTEST_DISABLE_MSC_DEPRECATED_POP_() \\}\par
{\bkmkstart AAAAAAARHQ}{\bkmkend AAAAAAARHQ}
00343 {\cf21     GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
{\bkmkstart AAAAAAARHR}{\bkmkend AAAAAAARHR}
00344 {\cf21 #endif}\par
{\bkmkstart AAAAAAARHS}{\bkmkend AAAAAAARHS}
00345 \par
{\bkmkstart AAAAAAARHT}{\bkmkend AAAAAAARHT}
00346 {\cf21 #ifndef GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAARHU}{\bkmkend AAAAAAARHU}
00347 {\cf20 // gcc and clang define __GXX_EXPERIMENTAL_CXX0X__ when}\par
{\bkmkstart AAAAAAARHV}{\bkmkend AAAAAAARHV}
00348 {\cf20 // -std=\{c,gnu\}++\{0x,11\} is passed.  The C++11 standard specifies a}\par
{\bkmkstart AAAAAAARHW}{\bkmkend AAAAAAARHW}
00349 {\cf20 // value for __cplusplus, and recent versions of clang, gcc, and}\par
{\bkmkstart AAAAAAARHX}{\bkmkend AAAAAAARHX}
00350 {\cf20 // probably other compilers set that too in C++11 mode.}\par
{\bkmkstart AAAAAAARHY}{\bkmkend AAAAAAARHY}
00351 {\cf21 # if __GXX_EXPERIMENTAL_CXX0X__ || __cplusplus >= 201103L || _MSC_VER >= 1900}\par
{\bkmkstart AAAAAAARHZ}{\bkmkend AAAAAAARHZ}
00352 {\cf20 // Compiling in at least C++11 mode.}\par
{\bkmkstart AAAAAAARIA}{\bkmkend AAAAAAARIA}
00353 {\cf21 #  define GTEST_LANG_CXX11 1}\par
{\bkmkstart AAAAAAARIB}{\bkmkend AAAAAAARIB}
00354 {\cf21 # else}\par
{\bkmkstart AAAAAAARIC}{\bkmkend AAAAAAARIC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJZR" }{}}{\fldrslt {\cs37\ul\cf2 00355}}}
 {\cf21 #  define GTEST_LANG_CXX11 0}\par
{\bkmkstart AAAAAAARID}{\bkmkend AAAAAAARID}
00356 {\cf21 # endif}\par
{\bkmkstart AAAAAAARIE}{\bkmkend AAAAAAARIE}
00357 {\cf21 #endif}\par
{\bkmkstart AAAAAAARIF}{\bkmkend AAAAAAARIF}
00358 \par
{\bkmkstart AAAAAAARIG}{\bkmkend AAAAAAARIG}
00359 {\cf20 // Distinct from C++11 language support, some environments don't provide}\par
{\bkmkstart AAAAAAARIH}{\bkmkend AAAAAAARIH}
00360 {\cf20 // proper C++11 library support. Notably, it's possible to build in}\par
{\bkmkstart AAAAAAARII}{\bkmkend AAAAAAARII}
00361 {\cf20 // C++11 mode when targeting Mac OS X 10.6, which has an old libstdc++}\par
{\bkmkstart AAAAAAARIJ}{\bkmkend AAAAAAARIJ}
00362 {\cf20 // with no C++11 support.}\par
{\bkmkstart AAAAAAARIK}{\bkmkend AAAAAAARIK}
00363 {\cf20 //}\par
{\bkmkstart AAAAAAARIL}{\bkmkend AAAAAAARIL}
00364 {\cf20 // libstdc++ has sufficient C++11 support as of GCC 4.6.0, __GLIBCXX__}\par
{\bkmkstart AAAAAAARIM}{\bkmkend AAAAAAARIM}
00365 {\cf20 // 20110325, but maintenance releases in the 4.4 and 4.5 series followed}\par
{\bkmkstart AAAAAAARIN}{\bkmkend AAAAAAARIN}
00366 {\cf20 // this date, so check for those versions by their date stamps.}\par
{\bkmkstart AAAAAAARIO}{\bkmkend AAAAAAARIO}
00367 {\cf20 // https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html#abi.versioning}\par
{\bkmkstart AAAAAAARIP}{\bkmkend AAAAAAARIP}
00368 {\cf21 #if GTEST_LANG_CXX11 && \\}\par
{\bkmkstart AAAAAAARIQ}{\bkmkend AAAAAAARIQ}
00369 {\cf21     (!defined(__GLIBCXX__) || ( \\}\par
{\bkmkstart AAAAAAARIR}{\bkmkend AAAAAAARIR}
00370 {\cf21         __GLIBCXX__ >= 20110325ul &&  }{\cf20 /* GCC >= 4.6.0 */}{\cf21  \\}\par
{\bkmkstart AAAAAAARIS}{\bkmkend AAAAAAARIS}
00371 {\cf21         }{\cf20 /* Blacklist of patch releases of older branches: */}{\cf21  \\}\par
{\bkmkstart AAAAAAARIT}{\bkmkend AAAAAAARIT}
00372 {\cf21         __GLIBCXX__ != 20110416ul &&  }{\cf20 /* GCC 4.4.6 */}{\cf21  \\}\par
{\bkmkstart AAAAAAARIU}{\bkmkend AAAAAAARIU}
00373 {\cf21         __GLIBCXX__ != 20120313ul &&  }{\cf20 /* GCC 4.4.7 */}{\cf21  \\}\par
{\bkmkstart AAAAAAARIV}{\bkmkend AAAAAAARIV}
00374 {\cf21         __GLIBCXX__ != 20110428ul &&  }{\cf20 /* GCC 4.5.3 */}{\cf21  \\}\par
{\bkmkstart AAAAAAARIW}{\bkmkend AAAAAAARIW}
00375 {\cf21         __GLIBCXX__ != 20120702ul))   }{\cf20 /* GCC 4.5.4 */}{\cf21 }\par
{\bkmkstart AAAAAAARIX}{\bkmkend AAAAAAARIX}
00376 {\cf21 # define GTEST_STDLIB_CXX11 1}\par
{\bkmkstart AAAAAAARIY}{\bkmkend AAAAAAARIY}
00377 {\cf21 #endif}\par
{\bkmkstart AAAAAAARIZ}{\bkmkend AAAAAAARIZ}
00378 \par
{\bkmkstart AAAAAAARJA}{\bkmkend AAAAAAARJA}
00379 {\cf20 // Only use C++11 library features if the library provides them.}\par
{\bkmkstart AAAAAAARJB}{\bkmkend AAAAAAARJB}
00380 {\cf21 #if GTEST_STDLIB_CXX11}\par
{\bkmkstart AAAAAAARJC}{\bkmkend AAAAAAARJC}
00381 {\cf21 # define GTEST_HAS_STD_BEGIN_AND_END_ 1}\par
{\bkmkstart AAAAAAARJD}{\bkmkend AAAAAAARJD}
00382 {\cf21 # define GTEST_HAS_STD_FORWARD_LIST_ 1}\par
{\bkmkstart AAAAAAARJE}{\bkmkend AAAAAAARJE}
00383 {\cf21 # if !defined(_MSC_VER) || (_MSC_FULL_VER >= 190023824)}\par
{\bkmkstart AAAAAAARJF}{\bkmkend AAAAAAARJF}
00384 {\cf20 // works only with VS2015U2 and better}\par
{\bkmkstart AAAAAAARJG}{\bkmkend AAAAAAARJG}
00385 {\cf21 #   define GTEST_HAS_STD_FUNCTION_ 1}\par
{\bkmkstart AAAAAAARJH}{\bkmkend AAAAAAARJH}
00386 {\cf21 # endif}\par
{\bkmkstart AAAAAAARJI}{\bkmkend AAAAAAARJI}
00387 {\cf21 # define GTEST_HAS_STD_INITIALIZER_LIST_ 1}\par
{\bkmkstart AAAAAAARJJ}{\bkmkend AAAAAAARJJ}
00388 {\cf21 # define GTEST_HAS_STD_MOVE_ 1}\par
{\bkmkstart AAAAAAARJK}{\bkmkend AAAAAAARJK}
00389 {\cf21 # define GTEST_HAS_STD_UNIQUE_PTR_ 1}\par
{\bkmkstart AAAAAAARJL}{\bkmkend AAAAAAARJL}
00390 {\cf21 # define GTEST_HAS_STD_SHARED_PTR_ 1}\par
{\bkmkstart AAAAAAARJM}{\bkmkend AAAAAAARJM}
00391 {\cf21 # define GTEST_HAS_UNORDERED_MAP_ 1}\par
{\bkmkstart AAAAAAARJN}{\bkmkend AAAAAAARJN}
00392 {\cf21 # define GTEST_HAS_UNORDERED_SET_ 1}\par
{\bkmkstart AAAAAAARJO}{\bkmkend AAAAAAARJO}
00393 {\cf21 #endif}\par
{\bkmkstart AAAAAAARJP}{\bkmkend AAAAAAARJP}
00394 \par
{\bkmkstart AAAAAAARJQ}{\bkmkend AAAAAAARJQ}
00395 {\cf20 // C++11 specifies that <tuple> provides std::tuple.}\par
{\bkmkstart AAAAAAARJR}{\bkmkend AAAAAAARJR}
00396 {\cf20 // Some platforms still might not have it, however.}\par
{\bkmkstart AAAAAAARJS}{\bkmkend AAAAAAARJS}
00397 {\cf21 #if GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAARJT}{\bkmkend AAAAAAARJT}
00398 {\cf21 # define GTEST_HAS_STD_TUPLE_ 1}\par
{\bkmkstart AAAAAAARJU}{\bkmkend AAAAAAARJU}
00399 {\cf21 # if defined(__clang__)}\par
{\bkmkstart AAAAAAARJV}{\bkmkend AAAAAAARJV}
00400 {\cf20 // Inspired by}\par
{\bkmkstart AAAAAAARJW}{\bkmkend AAAAAAARJW}
00401 {\cf20 // https://clang.llvm.org/docs/LanguageExtensions.html#include-file-checking-macros}\par
{\bkmkstart AAAAAAARJX}{\bkmkend AAAAAAARJX}
00402 {\cf21 #  if defined(__has_include) && !__has_include(<tuple>)}\par
{\bkmkstart AAAAAAARJY}{\bkmkend AAAAAAARJY}
00403 {\cf21 #   undef GTEST_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARJZ}{\bkmkend AAAAAAARJZ}
00404 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARKA}{\bkmkend AAAAAAARKA}
00405 {\cf21 # elif defined(_MSC_VER)}\par
{\bkmkstart AAAAAAARKB}{\bkmkend AAAAAAARKB}
00406 {\cf20 // Inspired by boost/config/stdlib/dinkumware.hpp}\par
{\bkmkstart AAAAAAARKC}{\bkmkend AAAAAAARKC}
00407 {\cf21 #  if defined(_CPPLIB_VER) && _CPPLIB_VER < 520}\par
{\bkmkstart AAAAAAARKD}{\bkmkend AAAAAAARKD}
00408 {\cf21 #   undef GTEST_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARKE}{\bkmkend AAAAAAARKE}
00409 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARKF}{\bkmkend AAAAAAARKF}
00410 {\cf21 # elif defined(__GLIBCXX__)}\par
{\bkmkstart AAAAAAARKG}{\bkmkend AAAAAAARKG}
00411 {\cf20 // Inspired by boost/config/stdlib/libstdcpp3.hpp,}\par
{\bkmkstart AAAAAAARKH}{\bkmkend AAAAAAARKH}
00412 {\cf20 // http://gcc.gnu.org/gcc-4.2/changes.html and}\par
{\bkmkstart AAAAAAARKI}{\bkmkend AAAAAAARKI}
00413 {\cf20 // https://web.archive.org/web/20140227044429/gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt01ch01.html#manual.intro.status.standard.200x}\par
{\bkmkstart AAAAAAARKJ}{\bkmkend AAAAAAARKJ}
00414 {\cf21 #  if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2)}\par
{\bkmkstart AAAAAAARKK}{\bkmkend AAAAAAARKK}
00415 {\cf21 #   undef GTEST_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARKL}{\bkmkend AAAAAAARKL}
00416 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARKM}{\bkmkend AAAAAAARKM}
00417 {\cf21 # endif}\par
{\bkmkstart AAAAAAARKN}{\bkmkend AAAAAAARKN}
00418 {\cf21 #endif}\par
{\bkmkstart AAAAAAARKO}{\bkmkend AAAAAAARKO}
00419 \par
{\bkmkstart AAAAAAARKP}{\bkmkend AAAAAAARKP}
00420 {\cf20 // Brings in definitions for functions used in the testing::internal::posix}\par
{\bkmkstart AAAAAAARKQ}{\bkmkend AAAAAAARKQ}
00421 {\cf20 // namespace (read, write, close, chdir, isatty, stat). We do not currently}\par
{\bkmkstart AAAAAAARKR}{\bkmkend AAAAAAARKR}
00422 {\cf20 // use them on Windows Mobile.}\par
{\bkmkstart AAAAAAARKS}{\bkmkend AAAAAAARKS}
00423 {\cf21 #if GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAARKT}{\bkmkend AAAAAAARKT}
00424 {\cf21 # if !GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAARKU}{\bkmkend AAAAAAARKU}
00425 {\cf21 #  include <direct.h>}\par
{\bkmkstart AAAAAAARKV}{\bkmkend AAAAAAARKV}
00426 {\cf21 #  include <io.h>}\par
{\bkmkstart AAAAAAARKW}{\bkmkend AAAAAAARKW}
00427 {\cf21 # endif}\par
{\bkmkstart AAAAAAARKX}{\bkmkend AAAAAAARKX}
00428 {\cf20 // In order to avoid having to include <windows.h>, use forward declaration}\par
{\bkmkstart AAAAAAARKY}{\bkmkend AAAAAAARKY}
00429 {\cf21 #if GTEST_OS_WINDOWS_MINGW && !defined(__MINGW64_VERSION_MAJOR)}\par
{\bkmkstart AAAAAAARKZ}{\bkmkend AAAAAAARKZ}
00430 {\cf20 // MinGW defined _CRITICAL_SECTION and _RTL_CRITICAL_SECTION as two}\par
{\bkmkstart AAAAAAARLA}{\bkmkend AAAAAAARLA}
00431 {\cf20 // separate (equivalent) structs, instead of using typedef}\par
{\bkmkstart AAAAAAARLB}{\bkmkend AAAAAAARLB}
00432 {\cf17 typedef} {\cf17 struct }_CRITICAL_SECTION GTEST_CRITICAL_SECTION;\par
{\bkmkstart AAAAAAARLC}{\bkmkend AAAAAAARLC}
00433 {\cf21 #else}\par
{\bkmkstart AAAAAAARLD}{\bkmkend AAAAAAARLD}
00434 {\cf20 // Assume CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.}\par
{\bkmkstart AAAAAAARLE}{\bkmkend AAAAAAARLE}
00435 {\cf20 // This assumption is verified by}\par
{\bkmkstart AAAAAAARLF}{\bkmkend AAAAAAARLF}
00436 {\cf20 // WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.}\par
{\bkmkstart AAAAAAARLG}{\bkmkend AAAAAAARLG}
00437 {\cf17 typedef} {\cf17 struct }_RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;\par
{\bkmkstart AAAAAAARLH}{\bkmkend AAAAAAARLH}
00438 {\cf21 #endif}\par
{\bkmkstart AAAAAAARLI}{\bkmkend AAAAAAARLI}
00439 {\cf21 #else}\par
{\bkmkstart AAAAAAARLJ}{\bkmkend AAAAAAARLJ}
00440 {\cf20 // This assumes that non-Windows OSes provide unistd.h. For OSes where this}\par
{\bkmkstart AAAAAAARLK}{\bkmkend AAAAAAARLK}
00441 {\cf20 // is not the case, we need to include headers that provide the functions}\par
{\bkmkstart AAAAAAARLL}{\bkmkend AAAAAAARLL}
00442 {\cf20 // mentioned above.}\par
{\bkmkstart AAAAAAARLM}{\bkmkend AAAAAAARLM}
00443 {\cf21 # include <unistd.h>}\par
{\bkmkstart AAAAAAARLN}{\bkmkend AAAAAAARLN}
00444 {\cf21 # include <strings.h>}\par
{\bkmkstart AAAAAAARLO}{\bkmkend AAAAAAARLO}
00445 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAARLP}{\bkmkend AAAAAAARLP}
00446 \par
{\bkmkstart AAAAAAARLQ}{\bkmkend AAAAAAARLQ}
00447 {\cf21 #if GTEST_OS_LINUX_ANDROID}\par
{\bkmkstart AAAAAAARLR}{\bkmkend AAAAAAARLR}
00448 {\cf20 // Used to define __ANDROID_API__ matching the target NDK API level.}\par
{\bkmkstart AAAAAAARLS}{\bkmkend AAAAAAARLS}
00449 {\cf21 #  include <android/api-level.h>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARLT}{\bkmkend AAAAAAARLT}
00450 {\cf21 #endif}\par
{\bkmkstart AAAAAAARLU}{\bkmkend AAAAAAARLU}
00451 \par
{\bkmkstart AAAAAAARLV}{\bkmkend AAAAAAARLV}
00452 {\cf20 // Defines this to true iff Google Test can use POSIX regular expressions.}\par
{\bkmkstart AAAAAAARLW}{\bkmkend AAAAAAARLW}
00453 {\cf21 #ifndef GTEST_HAS_POSIX_RE}\par
{\bkmkstart AAAAAAARLX}{\bkmkend AAAAAAARLX}
00454 {\cf21 # if GTEST_OS_LINUX_ANDROID}\par
{\bkmkstart AAAAAAARLY}{\bkmkend AAAAAAARLY}
00455 {\cf20 // On Android, <regex.h> is only available starting with Gingerbread.}\par
{\bkmkstart AAAAAAARLZ}{\bkmkend AAAAAAARLZ}
00456 {\cf21 #  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)}\par
{\bkmkstart AAAAAAARMA}{\bkmkend AAAAAAARMA}
00457 {\cf21 # else}\par
{\bkmkstart AAAAAAARMB}{\bkmkend AAAAAAARMB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARMC" }{}}{\fldrslt {\cs37\ul\cf2 00458}}}
 {\cf21 #  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)}\par
{\bkmkstart AAAAAAARMD}{\bkmkend AAAAAAARMD}
00459 {\cf21 # endif}\par
{\bkmkstart AAAAAAARME}{\bkmkend AAAAAAARME}
00460 {\cf21 #endif}\par
{\bkmkstart AAAAAAARMF}{\bkmkend AAAAAAARMF}
00461 \par
{\bkmkstart AAAAAAARMG}{\bkmkend AAAAAAARMG}
00462 {\cf21 #if GTEST_USES_PCRE}\par
{\bkmkstart AAAAAAARMH}{\bkmkend AAAAAAARMH}
00463 {\cf20 // The appropriate headers have already been included.}\par
{\bkmkstart AAAAAAARMI}{\bkmkend AAAAAAARMI}
00464 \par
{\bkmkstart AAAAAAARMJ}{\bkmkend AAAAAAARMJ}
00465 {\cf21 #elif GTEST_HAS_POSIX_RE}\par
{\bkmkstart AAAAAAARMK}{\bkmkend AAAAAAARMK}
00466 \par
{\bkmkstart AAAAAAARML}{\bkmkend AAAAAAARML}
00467 {\cf20 // On some platforms, <regex.h> needs someone to define size_t, and}\par
{\bkmkstart AAAAAAARMM}{\bkmkend AAAAAAARMM}
00468 {\cf20 // won't compile otherwise.  We can #include it here as we already}\par
{\bkmkstart AAAAAAARMN}{\bkmkend AAAAAAARMN}
00469 {\cf20 // included <stdlib.h>, which is guaranteed to define size_t through}\par
{\bkmkstart AAAAAAARMO}{\bkmkend AAAAAAARMO}
00470 {\cf20 // <stddef.h>.}\par
{\bkmkstart AAAAAAARMP}{\bkmkend AAAAAAARMP}
00471 {\cf21 # include <regex.h>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARMQ}{\bkmkend AAAAAAARMQ}
00472 \par
{\bkmkstart AAAAAAARMR}{\bkmkend AAAAAAARMR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARMS" }{}}{\fldrslt {\cs37\ul\cf2 00473}}}
 {\cf21 # define GTEST_USES_POSIX_RE 1}\par
{\bkmkstart AAAAAAARMT}{\bkmkend AAAAAAARMT}
00474 \par
{\bkmkstart AAAAAAARMU}{\bkmkend AAAAAAARMU}
00475 {\cf21 #elif GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAARMV}{\bkmkend AAAAAAARMV}
00476 \par
{\bkmkstart AAAAAAARMW}{\bkmkend AAAAAAARMW}
00477 {\cf20 // <regex.h> is not available on Windows.  Use our own simple regex}\par
{\bkmkstart AAAAAAARMX}{\bkmkend AAAAAAARMX}
00478 {\cf20 // implementation instead.}\par
{\bkmkstart AAAAAAARMY}{\bkmkend AAAAAAARMY}
00479 {\cf21 # define GTEST_USES_SIMPLE_RE 1}\par
{\bkmkstart AAAAAAARMZ}{\bkmkend AAAAAAARMZ}
00480 \par
{\bkmkstart AAAAAAARNA}{\bkmkend AAAAAAARNA}
00481 {\cf21 #else}\par
{\bkmkstart AAAAAAARNB}{\bkmkend AAAAAAARNB}
00482 \par
{\bkmkstart AAAAAAARNC}{\bkmkend AAAAAAARNC}
00483 {\cf20 // <regex.h> may not be available on this platform.  Use our own}\par
{\bkmkstart AAAAAAARND}{\bkmkend AAAAAAARND}
00484 {\cf20 // simple regex implementation instead.}\par
{\bkmkstart AAAAAAARNE}{\bkmkend AAAAAAARNE}
00485 {\cf21 # define GTEST_USES_SIMPLE_RE 1}\par
{\bkmkstart AAAAAAARNF}{\bkmkend AAAAAAARNF}
00486 \par
{\bkmkstart AAAAAAARNG}{\bkmkend AAAAAAARNG}
00487 {\cf21 #endif  }{\cf20 // GTEST_USES_PCRE}\par
{\bkmkstart AAAAAAARNH}{\bkmkend AAAAAAARNH}
00488 \par
{\bkmkstart AAAAAAARNI}{\bkmkend AAAAAAARNI}
00489 {\cf21 #ifndef GTEST_HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARNJ}{\bkmkend AAAAAAARNJ}
00490 {\cf20 // The user didn't tell us whether exceptions are enabled, so we need}\par
{\bkmkstart AAAAAAARNK}{\bkmkend AAAAAAARNK}
00491 {\cf20 // to figure it out.}\par
{\bkmkstart AAAAAAARNL}{\bkmkend AAAAAAARNL}
00492 {\cf21 # if defined(_MSC_VER) && defined(_CPPUNWIND)}\par
{\bkmkstart AAAAAAARNM}{\bkmkend AAAAAAARNM}
00493 {\cf20 // MSVC defines _CPPUNWIND to 1 iff exceptions are enabled.}\par
{\bkmkstart AAAAAAARNN}{\bkmkend AAAAAAARNN}
00494 {\cf21 #  define GTEST_HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAARNO}{\bkmkend AAAAAAARNO}
00495 {\cf21 # elif defined(__BORLANDC__)}\par
{\bkmkstart AAAAAAARNP}{\bkmkend AAAAAAARNP}
00496 {\cf20 // C++Builder's implementation of the STL uses the _HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARNQ}{\bkmkend AAAAAAARNQ}
00497 {\cf20 // macro to enable exceptions, so we'll do the same.}\par
{\bkmkstart AAAAAAARNR}{\bkmkend AAAAAAARNR}
00498 {\cf20 // Assumes that exceptions are enabled by default.}\par
{\bkmkstart AAAAAAARNS}{\bkmkend AAAAAAARNS}
00499 {\cf21 #  ifndef _HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARNT}{\bkmkend AAAAAAARNT}
00500 {\cf21 #   define _HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAARNU}{\bkmkend AAAAAAARNU}
00501 {\cf21 #  endif  }{\cf20 // _HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARNV}{\bkmkend AAAAAAARNV}
00502 {\cf21 #  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARNW}{\bkmkend AAAAAAARNW}
00503 {\cf21 # elif defined(__clang__)}\par
{\bkmkstart AAAAAAARNX}{\bkmkend AAAAAAARNX}
00504 {\cf20 // clang defines __EXCEPTIONS iff exceptions are enabled before clang 220714,}\par
{\bkmkstart AAAAAAARNY}{\bkmkend AAAAAAARNY}
00505 {\cf20 // but iff cleanups are enabled after that. In Obj-C++ files, there can be}\par
{\bkmkstart AAAAAAARNZ}{\bkmkend AAAAAAARNZ}
00506 {\cf20 // cleanups for ObjC exceptions which also need cleanups, even if C++ exceptions}\par
{\bkmkstart AAAAAAAROA}{\bkmkend AAAAAAAROA}
00507 {\cf20 // are disabled. clang has __has_feature(cxx_exceptions) which checks for C++}\par
{\bkmkstart AAAAAAAROB}{\bkmkend AAAAAAAROB}
00508 {\cf20 // exceptions starting at clang r206352, but which checked for cleanups prior to}\par
{\bkmkstart AAAAAAAROC}{\bkmkend AAAAAAAROC}
00509 {\cf20 // that. To reliably check for C++ exception availability with clang, check for}\par
{\bkmkstart AAAAAAAROD}{\bkmkend AAAAAAAROD}
00510 {\cf20 // __EXCEPTIONS && __has_feature(cxx_exceptions).}\par
{\bkmkstart AAAAAAAROE}{\bkmkend AAAAAAAROE}
00511 {\cf21 #  define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))}\par
{\bkmkstart AAAAAAAROF}{\bkmkend AAAAAAAROF}
00512 {\cf21 # elif defined(__GNUC__) && __EXCEPTIONS}\par
{\bkmkstart AAAAAAAROG}{\bkmkend AAAAAAAROG}
00513 {\cf20 // gcc defines __EXCEPTIONS to 1 iff exceptions are enabled.}\par
{\bkmkstart AAAAAAAROH}{\bkmkend AAAAAAAROH}
00514 {\cf21 #  define GTEST_HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAAROI}{\bkmkend AAAAAAAROI}
00515 {\cf21 # elif defined(__SUNPRO_CC)}\par
{\bkmkstart AAAAAAAROJ}{\bkmkend AAAAAAAROJ}
00516 {\cf20 // Sun Pro CC supports exceptions.  However, there is no compile-time way of}\par
{\bkmkstart AAAAAAAROK}{\bkmkend AAAAAAAROK}
00517 {\cf20 // detecting whether they are enabled or not.  Therefore, we assume that}\par
{\bkmkstart AAAAAAAROL}{\bkmkend AAAAAAAROL}
00518 {\cf20 // they are enabled unless the user tells us otherwise.}\par
{\bkmkstart AAAAAAAROM}{\bkmkend AAAAAAAROM}
00519 {\cf21 #  define GTEST_HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAARON}{\bkmkend AAAAAAARON}
00520 {\cf21 # elif defined(__IBMCPP__) && __EXCEPTIONS}\par
{\bkmkstart AAAAAAAROO}{\bkmkend AAAAAAAROO}
00521 {\cf20 // xlC defines __EXCEPTIONS to 1 iff exceptions are enabled.}\par
{\bkmkstart AAAAAAAROP}{\bkmkend AAAAAAAROP}
00522 {\cf21 #  define GTEST_HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAAROQ}{\bkmkend AAAAAAAROQ}
00523 {\cf21 # elif defined(__HP_aCC)}\par
{\bkmkstart AAAAAAAROR}{\bkmkend AAAAAAAROR}
00524 {\cf20 // Exception handling is in effect by default in HP aCC compiler. It has to}\par
{\bkmkstart AAAAAAAROS}{\bkmkend AAAAAAAROS}
00525 {\cf20 // be turned of by +noeh compiler option if desired.}\par
{\bkmkstart AAAAAAAROT}{\bkmkend AAAAAAAROT}
00526 {\cf21 #  define GTEST_HAS_EXCEPTIONS 1}\par
{\bkmkstart AAAAAAAROU}{\bkmkend AAAAAAAROU}
00527 {\cf21 # else}\par
{\bkmkstart AAAAAAAROV}{\bkmkend AAAAAAAROV}
00528 {\cf20 // For other compilers, we assume exceptions are disabled to be}\par
{\bkmkstart AAAAAAAROW}{\bkmkend AAAAAAAROW}
00529 {\cf20 // conservative.}\par
{\bkmkstart AAAAAAAROX}{\bkmkend AAAAAAAROX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAROY" }{}}{\fldrslt {\cs37\ul\cf2 00530}}}
 {\cf21 #  define GTEST_HAS_EXCEPTIONS 0}\par
{\bkmkstart AAAAAAAROZ}{\bkmkend AAAAAAAROZ}
00531 {\cf21 # endif  }{\cf20 // defined(_MSC_VER) || defined(__BORLANDC__)}\par
{\bkmkstart AAAAAAARPA}{\bkmkend AAAAAAARPA}
00532 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAARPB}{\bkmkend AAAAAAARPB}
00533 \par
{\bkmkstart AAAAAAARPC}{\bkmkend AAAAAAARPC}
00534 {\cf21 #if !defined(GTEST_HAS_STD_STRING)}\par
{\bkmkstart AAAAAAARPD}{\bkmkend AAAAAAARPD}
00535 {\cf20 // Even though we don't use this macro any longer, we keep it in case}\par
{\bkmkstart AAAAAAARPE}{\bkmkend AAAAAAARPE}
00536 {\cf20 // some clients still depend on it.}\par
{\bkmkstart AAAAAAARPF}{\bkmkend AAAAAAARPF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARPG" }{}}{\fldrslt {\cs37\ul\cf2 00537}}}
 {\cf21 # define GTEST_HAS_STD_STRING 1}\par
{\bkmkstart AAAAAAARPH}{\bkmkend AAAAAAARPH}
00538 {\cf21 #elif !GTEST_HAS_STD_STRING}\par
{\bkmkstart AAAAAAARPI}{\bkmkend AAAAAAARPI}
00539 {\cf20 // The user told us that ::std::string isn't available.}\par
{\bkmkstart AAAAAAARPJ}{\bkmkend AAAAAAARPJ}
00540 {\cf21 # error "::std::string isn't available."}\par
{\bkmkstart AAAAAAARPK}{\bkmkend AAAAAAARPK}
00541 {\cf21 #endif  }{\cf20 // !defined(GTEST_HAS_STD_STRING)}\par
{\bkmkstart AAAAAAARPL}{\bkmkend AAAAAAARPL}
00542 \par
{\bkmkstart AAAAAAARPM}{\bkmkend AAAAAAARPM}
00543 {\cf21 #ifndef GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAARPN}{\bkmkend AAAAAAARPN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARPO" }{}}{\fldrslt {\cs37\ul\cf2 00544}}}
 {\cf21 # define GTEST_HAS_GLOBAL_STRING 0}\par
{\bkmkstart AAAAAAARPP}{\bkmkend AAAAAAARPP}
00545 {\cf21 #endif  }{\cf20 // GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAARPQ}{\bkmkend AAAAAAARPQ}
00546 \par
{\bkmkstart AAAAAAARPR}{\bkmkend AAAAAAARPR}
00547 {\cf21 #ifndef GTEST_HAS_STD_WSTRING}\par
{\bkmkstart AAAAAAARPS}{\bkmkend AAAAAAARPS}
00548 {\cf20 // The user didn't tell us whether ::std::wstring is available, so we need}\par
{\bkmkstart AAAAAAARPT}{\bkmkend AAAAAAARPT}
00549 {\cf20 // to figure it out.}\par
{\bkmkstart AAAAAAARPU}{\bkmkend AAAAAAARPU}
00550 {\cf20 // FIXME: uses autoconf to detect whether ::std::wstring}\par
{\bkmkstart AAAAAAARPV}{\bkmkend AAAAAAARPV}
00551 {\cf20 //   is available.}\par
{\bkmkstart AAAAAAARPW}{\bkmkend AAAAAAARPW}
00552 \par
{\bkmkstart AAAAAAARPX}{\bkmkend AAAAAAARPX}
00553 {\cf20 // Cygwin 1.7 and below doesn't support ::std::wstring.}\par
{\bkmkstart AAAAAAARPY}{\bkmkend AAAAAAARPY}
00554 {\cf20 // Solaris' libc++ doesn't support it either.  Android has}\par
{\bkmkstart AAAAAAARPZ}{\bkmkend AAAAAAARPZ}
00555 {\cf20 // no support for it at least as recent as Froyo (2.2).}\par
{\bkmkstart AAAAAAARQA}{\bkmkend AAAAAAARQA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARQB" }{}}{\fldrslt {\cs37\ul\cf2 00556}}}
 {\cf21 # define GTEST_HAS_STD_WSTRING \\}\par
{\bkmkstart AAAAAAARQC}{\bkmkend AAAAAAARQC}
00557 {\cf21     (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS))}\par
{\bkmkstart AAAAAAARQD}{\bkmkend AAAAAAARQD}
00558 \par
{\bkmkstart AAAAAAARQE}{\bkmkend AAAAAAARQE}
00559 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
{\bkmkstart AAAAAAARQF}{\bkmkend AAAAAAARQF}
00560 \par
{\bkmkstart AAAAAAARQG}{\bkmkend AAAAAAARQG}
00561 {\cf21 #ifndef GTEST_HAS_GLOBAL_WSTRING}\par
{\bkmkstart AAAAAAARQH}{\bkmkend AAAAAAARQH}
00562 {\cf20 // The user didn't tell us whether ::wstring is available, so we need}\par
{\bkmkstart AAAAAAARQI}{\bkmkend AAAAAAARQI}
00563 {\cf20 // to figure it out.}\par
{\bkmkstart AAAAAAARQJ}{\bkmkend AAAAAAARQJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARQK" }{}}{\fldrslt {\cs37\ul\cf2 00564}}}
 {\cf21 # define GTEST_HAS_GLOBAL_WSTRING \\}\par
{\bkmkstart AAAAAAARQL}{\bkmkend AAAAAAARQL}
00565 {\cf21     (GTEST_HAS_STD_WSTRING && GTEST_HAS_GLOBAL_STRING)}\par
{\bkmkstart AAAAAAARQM}{\bkmkend AAAAAAARQM}
00566 {\cf21 #endif  }{\cf20 // GTEST_HAS_GLOBAL_WSTRING}\par
{\bkmkstart AAAAAAARQN}{\bkmkend AAAAAAARQN}
00567 \par
{\bkmkstart AAAAAAARQO}{\bkmkend AAAAAAARQO}
00568 {\cf20 // Determines whether RTTI is available.}\par
{\bkmkstart AAAAAAARQP}{\bkmkend AAAAAAARQP}
00569 {\cf21 #ifndef GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAARQQ}{\bkmkend AAAAAAARQQ}
00570 {\cf20 // The user didn't tell us whether RTTI is enabled, so we need to}\par
{\bkmkstart AAAAAAARQR}{\bkmkend AAAAAAARQR}
00571 {\cf20 // figure it out.}\par
{\bkmkstart AAAAAAARQS}{\bkmkend AAAAAAARQS}
00572 \par
{\bkmkstart AAAAAAARQT}{\bkmkend AAAAAAARQT}
00573 {\cf21 # ifdef _MSC_VER}\par
{\bkmkstart AAAAAAARQU}{\bkmkend AAAAAAARQU}
00574 \par
{\bkmkstart AAAAAAARQV}{\bkmkend AAAAAAARQV}
00575 {\cf21 #  ifdef _CPPRTTI  }{\cf20 // MSVC defines this macro iff RTTI is enabled.}\par
{\bkmkstart AAAAAAARQW}{\bkmkend AAAAAAARQW}
00576 {\cf21 #   define GTEST_HAS_RTTI 1}\par
{\bkmkstart AAAAAAARQX}{\bkmkend AAAAAAARQX}
00577 {\cf21 #  else}\par
{\bkmkstart AAAAAAARQY}{\bkmkend AAAAAAARQY}
00578 {\cf21 #   define GTEST_HAS_RTTI 0}\par
{\bkmkstart AAAAAAARQZ}{\bkmkend AAAAAAARQZ}
00579 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARRA}{\bkmkend AAAAAAARRA}
00580 \par
{\bkmkstart AAAAAAARRB}{\bkmkend AAAAAAARRB}
00581 {\cf20 // Starting with version 4.3.2, gcc defines __GXX_RTTI iff RTTI is enabled.}\par
{\bkmkstart AAAAAAARRC}{\bkmkend AAAAAAARRC}
00582 {\cf21 # elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40302)}\par
{\bkmkstart AAAAAAARRD}{\bkmkend AAAAAAARRD}
00583 \par
{\bkmkstart AAAAAAARRE}{\bkmkend AAAAAAARRE}
00584 {\cf21 #  ifdef __GXX_RTTI}\par
{\bkmkstart AAAAAAARRF}{\bkmkend AAAAAAARRF}
00585 {\cf20 // When building against STLport with the Android NDK and with}\par
{\bkmkstart AAAAAAARRG}{\bkmkend AAAAAAARRG}
00586 {\cf20 // -frtti -fno-exceptions, the build fails at link time with undefined}\par
{\bkmkstart AAAAAAARRH}{\bkmkend AAAAAAARRH}
00587 {\cf20 // references to __cxa_bad_typeid. Note sure if STL or toolchain bug,}\par
{\bkmkstart AAAAAAARRI}{\bkmkend AAAAAAARRI}
00588 {\cf20 // so disable RTTI when detected.}\par
{\bkmkstart AAAAAAARRJ}{\bkmkend AAAAAAARRJ}
00589 {\cf21 #   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \\}\par
{\bkmkstart AAAAAAARRK}{\bkmkend AAAAAAARRK}
00590 {\cf21        !defined(__EXCEPTIONS)}\par
{\bkmkstart AAAAAAARRL}{\bkmkend AAAAAAARRL}
00591 {\cf21 #    define GTEST_HAS_RTTI 0}\par
{\bkmkstart AAAAAAARRM}{\bkmkend AAAAAAARRM}
00592 {\cf21 #   else}\par
{\bkmkstart AAAAAAARRN}{\bkmkend AAAAAAARRN}
00593 {\cf21 #    define GTEST_HAS_RTTI 1}\par
{\bkmkstart AAAAAAARRO}{\bkmkend AAAAAAARRO}
00594 {\cf21 #   endif  }{\cf20 // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS}\par
{\bkmkstart AAAAAAARRP}{\bkmkend AAAAAAARRP}
00595 {\cf21 #  else}\par
{\bkmkstart AAAAAAARRQ}{\bkmkend AAAAAAARRQ}
00596 {\cf21 #   define GTEST_HAS_RTTI 0}\par
{\bkmkstart AAAAAAARRR}{\bkmkend AAAAAAARRR}
00597 {\cf21 #  endif  }{\cf20 // __GXX_RTTI}\par
{\bkmkstart AAAAAAARRS}{\bkmkend AAAAAAARRS}
00598 \par
{\bkmkstart AAAAAAARRT}{\bkmkend AAAAAAARRT}
00599 {\cf20 // Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends}\par
{\bkmkstart AAAAAAARRU}{\bkmkend AAAAAAARRU}
00600 {\cf20 // using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the}\par
{\bkmkstart AAAAAAARRV}{\bkmkend AAAAAAARRV}
00601 {\cf20 // first version with C++ support.}\par
{\bkmkstart AAAAAAARRW}{\bkmkend AAAAAAARRW}
00602 {\cf21 # elif defined(__clang__)}\par
{\bkmkstart AAAAAAARRX}{\bkmkend AAAAAAARRX}
00603 \par
{\bkmkstart AAAAAAARRY}{\bkmkend AAAAAAARRY}
00604 {\cf21 #  define GTEST_HAS_RTTI __has_feature(cxx_rtti)}\par
{\bkmkstart AAAAAAARRZ}{\bkmkend AAAAAAARRZ}
00605 \par
{\bkmkstart AAAAAAARSA}{\bkmkend AAAAAAARSA}
00606 {\cf20 // Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if}\par
{\bkmkstart AAAAAAARSB}{\bkmkend AAAAAAARSB}
00607 {\cf20 // both the typeid and dynamic_cast features are present.}\par
{\bkmkstart AAAAAAARSC}{\bkmkend AAAAAAARSC}
00608 {\cf21 # elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)}\par
{\bkmkstart AAAAAAARSD}{\bkmkend AAAAAAARSD}
00609 \par
{\bkmkstart AAAAAAARSE}{\bkmkend AAAAAAARSE}
00610 {\cf21 #  ifdef __RTTI_ALL__}\par
{\bkmkstart AAAAAAARSF}{\bkmkend AAAAAAARSF}
00611 {\cf21 #   define GTEST_HAS_RTTI 1}\par
{\bkmkstart AAAAAAARSG}{\bkmkend AAAAAAARSG}
00612 {\cf21 #  else}\par
{\bkmkstart AAAAAAARSH}{\bkmkend AAAAAAARSH}
00613 {\cf21 #   define GTEST_HAS_RTTI 0}\par
{\bkmkstart AAAAAAARSI}{\bkmkend AAAAAAARSI}
00614 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARSJ}{\bkmkend AAAAAAARSJ}
00615 \par
{\bkmkstart AAAAAAARSK}{\bkmkend AAAAAAARSK}
00616 {\cf21 # else}\par
{\bkmkstart AAAAAAARSL}{\bkmkend AAAAAAARSL}
00617 \par
{\bkmkstart AAAAAAARSM}{\bkmkend AAAAAAARSM}
00618 {\cf20 // For all other compilers, we assume RTTI is enabled.}\par
{\bkmkstart AAAAAAARSN}{\bkmkend AAAAAAARSN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARSO" }{}}{\fldrslt {\cs37\ul\cf2 00619}}}
 {\cf21 #  define GTEST_HAS_RTTI 1}\par
{\bkmkstart AAAAAAARSP}{\bkmkend AAAAAAARSP}
00620 \par
{\bkmkstart AAAAAAARSQ}{\bkmkend AAAAAAARSQ}
00621 {\cf21 # endif  }{\cf20 // _MSC_VER}\par
{\bkmkstart AAAAAAARSR}{\bkmkend AAAAAAARSR}
00622 \par
{\bkmkstart AAAAAAARSS}{\bkmkend AAAAAAARSS}
00623 {\cf21 #endif  }{\cf20 // GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAARST}{\bkmkend AAAAAAARST}
00624 \par
{\bkmkstart AAAAAAARSU}{\bkmkend AAAAAAARSU}
00625 {\cf20 // It's this header's responsibility to #include <typeinfo> when RTTI}\par
{\bkmkstart AAAAAAARSV}{\bkmkend AAAAAAARSV}
00626 {\cf20 // is enabled.}\par
{\bkmkstart AAAAAAARSW}{\bkmkend AAAAAAARSW}
00627 {\cf21 #if GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAARSX}{\bkmkend AAAAAAARSX}
00628 {\cf21 # include <typeinfo>}\par
{\bkmkstart AAAAAAARSY}{\bkmkend AAAAAAARSY}
00629 {\cf21 #endif}\par
{\bkmkstart AAAAAAARSZ}{\bkmkend AAAAAAARSZ}
00630 \par
{\bkmkstart AAAAAAARTA}{\bkmkend AAAAAAARTA}
00631 {\cf20 // Determines whether Google Test can use the pthreads library.}\par
{\bkmkstart AAAAAAARTB}{\bkmkend AAAAAAARTB}
00632 {\cf21 #ifndef GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAARTC}{\bkmkend AAAAAAARTC}
00633 {\cf20 // The user didn't tell us explicitly, so we make reasonable assumptions about}\par
{\bkmkstart AAAAAAARTD}{\bkmkend AAAAAAARTD}
00634 {\cf20 // which platforms have pthreads support.}\par
{\bkmkstart AAAAAAARTE}{\bkmkend AAAAAAARTE}
00635 {\cf20 //}\par
{\bkmkstart AAAAAAARTF}{\bkmkend AAAAAAARTF}
00636 {\cf20 // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0}\par
{\bkmkstart AAAAAAARTG}{\bkmkend AAAAAAARTG}
00637 {\cf20 // to your compiler flags.}\par
{\bkmkstart AAAAAAARTH}{\bkmkend AAAAAAARTH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARTI" }{}}{\fldrslt {\cs37\ul\cf2 00638}}}
 {\cf21 #define GTEST_HAS_PTHREAD                                             \\}\par
{\bkmkstart AAAAAAARTJ}{\bkmkend AAAAAAARTJ}
00639 {\cf21   (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX || GTEST_OS_QNX || \\}\par
{\bkmkstart AAAAAAARTK}{\bkmkend AAAAAAARTK}
00640 {\cf21    GTEST_OS_FREEBSD || GTEST_OS_NACL || GTEST_OS_NETBSD || GTEST_OS_FUCHSIA)}\par
{\bkmkstart AAAAAAARTL}{\bkmkend AAAAAAARTL}
00641 {\cf21 #endif  }{\cf20 // GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAARTM}{\bkmkend AAAAAAARTM}
00642 \par
{\bkmkstart AAAAAAARTN}{\bkmkend AAAAAAARTN}
00643 {\cf21 #if GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAARTO}{\bkmkend AAAAAAARTO}
00644 {\cf20 // gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is}\par
{\bkmkstart AAAAAAARTP}{\bkmkend AAAAAAARTP}
00645 {\cf20 // true.}\par
{\bkmkstart AAAAAAARTQ}{\bkmkend AAAAAAARTQ}
00646 {\cf21 # include <pthread.h>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARTR}{\bkmkend AAAAAAARTR}
00647 \par
{\bkmkstart AAAAAAARTS}{\bkmkend AAAAAAARTS}
00648 {\cf20 // For timespec and nanosleep, used below.}\par
{\bkmkstart AAAAAAARTT}{\bkmkend AAAAAAARTT}
00649 {\cf21 # include <time.h>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARTU}{\bkmkend AAAAAAARTU}
00650 {\cf21 #endif}\par
{\bkmkstart AAAAAAARTV}{\bkmkend AAAAAAARTV}
00651 \par
{\bkmkstart AAAAAAARTW}{\bkmkend AAAAAAARTW}
00652 {\cf20 // Determines if hash_map/hash_set are available.}\par
{\bkmkstart AAAAAAARTX}{\bkmkend AAAAAAARTX}
00653 {\cf20 // Only used for testing against those containers.}\par
{\bkmkstart AAAAAAARTY}{\bkmkend AAAAAAARTY}
00654 {\cf21 #if !defined(GTEST_HAS_HASH_MAP_)}\par
{\bkmkstart AAAAAAARTZ}{\bkmkend AAAAAAARTZ}
00655 {\cf21 # if defined(_MSC_VER) && (_MSC_VER < 1900)}\par
{\bkmkstart AAAAAAARUA}{\bkmkend AAAAAAARUA}
00656 {\cf21 #  define GTEST_HAS_HASH_MAP_ 1  }{\cf20 // Indicates that hash_map is available.}\par
{\bkmkstart AAAAAAARUB}{\bkmkend AAAAAAARUB}
00657 {\cf21 #  define GTEST_HAS_HASH_SET_ 1  }{\cf20 // Indicates that hash_set is available.}\par
{\bkmkstart AAAAAAARUC}{\bkmkend AAAAAAARUC}
00658 {\cf21 # endif  }{\cf20 // _MSC_VER}\par
{\bkmkstart AAAAAAARUD}{\bkmkend AAAAAAARUD}
00659 {\cf21 #endif  }{\cf20 // !defined(GTEST_HAS_HASH_MAP_)}\par
{\bkmkstart AAAAAAARUE}{\bkmkend AAAAAAARUE}
00660 \par
{\bkmkstart AAAAAAARUF}{\bkmkend AAAAAAARUF}
00661 {\cf20 // Determines whether Google Test can use tr1/tuple.  You can define}\par
{\bkmkstart AAAAAAARUG}{\bkmkend AAAAAAARUG}
00662 {\cf20 // this macro to 0 to prevent Google Test from using tuple (any}\par
{\bkmkstart AAAAAAARUH}{\bkmkend AAAAAAARUH}
00663 {\cf20 // feature depending on tuple with be disabled in this mode).}\par
{\bkmkstart AAAAAAARUI}{\bkmkend AAAAAAARUI}
00664 {\cf21 #ifndef GTEST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARUJ}{\bkmkend AAAAAAARUJ}
00665 {\cf21 # if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR)}\par
{\bkmkstart AAAAAAARUK}{\bkmkend AAAAAAARUK}
00666 {\cf20 // STLport, provided with the Android NDK, has neither <tr1/tuple> or <tuple>.}\par
{\bkmkstart AAAAAAARUL}{\bkmkend AAAAAAARUL}
00667 {\cf21 #  define GTEST_HAS_TR1_TUPLE 0}\par
{\bkmkstart AAAAAAARUM}{\bkmkend AAAAAAARUM}
00668 {\cf21 # elif defined(_MSC_VER) && (_MSC_VER >= 1910)}\par
{\bkmkstart AAAAAAARUN}{\bkmkend AAAAAAARUN}
00669 {\cf20 // Prevent `warning C4996: 'std::tr1': warning STL4002:}\par
{\bkmkstart AAAAAAARUO}{\bkmkend AAAAAAARUO}
00670 {\cf20 // The non-Standard std::tr1 namespace and TR1-only machinery}\par
{\bkmkstart AAAAAAARUP}{\bkmkend AAAAAAARUP}
00671 {\cf20 // are deprecated and will be REMOVED.`}\par
{\bkmkstart AAAAAAARUQ}{\bkmkend AAAAAAARUQ}
00672 {\cf21 #  define GTEST_HAS_TR1_TUPLE 0}\par
{\bkmkstart AAAAAAARUR}{\bkmkend AAAAAAARUR}
00673 {\cf21 # elif GTEST_LANG_CXX11 && defined(_LIBCPP_VERSION)}\par
{\bkmkstart AAAAAAARUS}{\bkmkend AAAAAAARUS}
00674 {\cf20 // libc++ doesn't support TR1.}\par
{\bkmkstart AAAAAAARUT}{\bkmkend AAAAAAARUT}
00675 {\cf21 #  define GTEST_HAS_TR1_TUPLE 0}\par
{\bkmkstart AAAAAAARUU}{\bkmkend AAAAAAARUU}
00676 {\cf21 # else}\par
{\bkmkstart AAAAAAARUV}{\bkmkend AAAAAAARUV}
00677 {\cf20 // The user didn't tell us not to do it, so we assume it's OK.}\par
{\bkmkstart AAAAAAARUW}{\bkmkend AAAAAAARUW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARUX" }{}}{\fldrslt {\cs37\ul\cf2 00678}}}
 {\cf21 #  define GTEST_HAS_TR1_TUPLE 1}\par
{\bkmkstart AAAAAAARUY}{\bkmkend AAAAAAARUY}
00679 {\cf21 # endif}\par
{\bkmkstart AAAAAAARUZ}{\bkmkend AAAAAAARUZ}
00680 {\cf21 #endif  }{\cf20 // GTEST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARVA}{\bkmkend AAAAAAARVA}
00681 \par
{\bkmkstart AAAAAAARVB}{\bkmkend AAAAAAARVB}
00682 {\cf20 // Determines whether Google Test's own tr1 tuple implementation}\par
{\bkmkstart AAAAAAARVC}{\bkmkend AAAAAAARVC}
00683 {\cf20 // should be used.}\par
{\bkmkstart AAAAAAARVD}{\bkmkend AAAAAAARVD}
00684 {\cf21 #ifndef GTEST_USE_OWN_TR1_TUPLE}\par
{\bkmkstart AAAAAAARVE}{\bkmkend AAAAAAARVE}
00685 {\cf20 // We use our own tuple implementation on Symbian.}\par
{\bkmkstart AAAAAAARVF}{\bkmkend AAAAAAARVF}
00686 {\cf21 # if GTEST_OS_SYMBIAN}\par
{\bkmkstart AAAAAAARVG}{\bkmkend AAAAAAARVG}
00687 {\cf21 #  define GTEST_USE_OWN_TR1_TUPLE 1}\par
{\bkmkstart AAAAAAARVH}{\bkmkend AAAAAAARVH}
00688 {\cf21 # else}\par
{\bkmkstart AAAAAAARVI}{\bkmkend AAAAAAARVI}
00689 {\cf20 // The user didn't tell us, so we need to figure it out.}\par
{\bkmkstart AAAAAAARVJ}{\bkmkend AAAAAAARVJ}
00690 \par
{\bkmkstart AAAAAAARVK}{\bkmkend AAAAAAARVK}
00691 {\cf20 // We use our own TR1 tuple if we aren't sure the user has an}\par
{\bkmkstart AAAAAAARVL}{\bkmkend AAAAAAARVL}
00692 {\cf20 // implementation of it already.  At this time, libstdc++ 4.0.0+ and}\par
{\bkmkstart AAAAAAARVM}{\bkmkend AAAAAAARVM}
00693 {\cf20 // MSVC 2010 are the only mainstream standard libraries that come}\par
{\bkmkstart AAAAAAARVN}{\bkmkend AAAAAAARVN}
00694 {\cf20 // with a TR1 tuple implementation.  NVIDIA's CUDA NVCC compiler}\par
{\bkmkstart AAAAAAARVO}{\bkmkend AAAAAAARVO}
00695 {\cf20 // pretends to be GCC by defining __GNUC__ and friends, but cannot}\par
{\bkmkstart AAAAAAARVP}{\bkmkend AAAAAAARVP}
00696 {\cf20 // compile GCC's tuple implementation.  MSVC 2008 (9.0) provides TR1}\par
{\bkmkstart AAAAAAARVQ}{\bkmkend AAAAAAARVQ}
00697 {\cf20 // tuple in a 323 MB Feature Pack download, which we cannot assume the}\par
{\bkmkstart AAAAAAARVR}{\bkmkend AAAAAAARVR}
00698 {\cf20 // user has.  QNX's QCC compiler is a modified GCC but it doesn't}\par
{\bkmkstart AAAAAAARVS}{\bkmkend AAAAAAARVS}
00699 {\cf20 // support TR1 tuple.  libc++ only provides std::tuple, in C++11 mode,}\par
{\bkmkstart AAAAAAARVT}{\bkmkend AAAAAAARVT}
00700 {\cf20 // and it can be used with some compilers that define __GNUC__.}\par
{\bkmkstart AAAAAAARVU}{\bkmkend AAAAAAARVU}
00701 {\cf21 # if (defined(__GNUC__) && !defined(__CUDACC__) && (GTEST_GCC_VER_ >= 40000) \\}\par
{\bkmkstart AAAAAAARVV}{\bkmkend AAAAAAARVV}
00702 {\cf21       && !GTEST_OS_QNX && !defined(_LIBCPP_VERSION)) \\}\par
{\bkmkstart AAAAAAARVW}{\bkmkend AAAAAAARVW}
00703 {\cf21       || (_MSC_VER >= 1600 && _MSC_VER < 1900)}\par
{\bkmkstart AAAAAAARVX}{\bkmkend AAAAAAARVX}
00704 {\cf21 #  define GTEST_ENV_HAS_TR1_TUPLE_ 1}\par
{\bkmkstart AAAAAAARVY}{\bkmkend AAAAAAARVY}
00705 {\cf21 # endif}\par
{\bkmkstart AAAAAAARVZ}{\bkmkend AAAAAAARVZ}
00706 \par
{\bkmkstart AAAAAAARWA}{\bkmkend AAAAAAARWA}
00707 {\cf20 // C++11 specifies that <tuple> provides std::tuple. Use that if gtest is used}\par
{\bkmkstart AAAAAAARWB}{\bkmkend AAAAAAARWB}
00708 {\cf20 // in C++11 mode and libstdc++ isn't very old (binaries targeting OS X 10.6}\par
{\bkmkstart AAAAAAARWC}{\bkmkend AAAAAAARWC}
00709 {\cf20 // can build with clang but need to use gcc4.2's libstdc++).}\par
{\bkmkstart AAAAAAARWD}{\bkmkend AAAAAAARWD}
00710 {\cf21 # if GTEST_LANG_CXX11 && (!defined(__GLIBCXX__) || __GLIBCXX__ > 20110325)}\par
{\bkmkstart AAAAAAARWE}{\bkmkend AAAAAAARWE}
00711 {\cf21 #  define GTEST_ENV_HAS_STD_TUPLE_ 1}\par
{\bkmkstart AAAAAAARWF}{\bkmkend AAAAAAARWF}
00712 {\cf21 # endif}\par
{\bkmkstart AAAAAAARWG}{\bkmkend AAAAAAARWG}
00713 \par
{\bkmkstart AAAAAAARWH}{\bkmkend AAAAAAARWH}
00714 {\cf21 # if GTEST_ENV_HAS_TR1_TUPLE_ || GTEST_ENV_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARWI}{\bkmkend AAAAAAARWI}
00715 {\cf21 #  define GTEST_USE_OWN_TR1_TUPLE 0}\par
{\bkmkstart AAAAAAARWJ}{\bkmkend AAAAAAARWJ}
00716 {\cf21 # else}\par
{\bkmkstart AAAAAAARWK}{\bkmkend AAAAAAARWK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARWL" }{}}{\fldrslt {\cs37\ul\cf2 00717}}}
 {\cf21 #  define GTEST_USE_OWN_TR1_TUPLE 1}\par
{\bkmkstart AAAAAAARWM}{\bkmkend AAAAAAARWM}
00718 {\cf21 # endif}\par
{\bkmkstart AAAAAAARWN}{\bkmkend AAAAAAARWN}
00719 {\cf21 # endif  }{\cf20 // GTEST_OS_SYMBIAN}\par
{\bkmkstart AAAAAAARWO}{\bkmkend AAAAAAARWO}
00720 {\cf21 #endif  }{\cf20 // GTEST_USE_OWN_TR1_TUPLE}\par
{\bkmkstart AAAAAAARWP}{\bkmkend AAAAAAARWP}
00721 \par
{\bkmkstart AAAAAAARWQ}{\bkmkend AAAAAAARWQ}
00722 {\cf20 // To avoid conditional compilation we make it gtest-port.h's responsibility}\par
{\bkmkstart AAAAAAARWR}{\bkmkend AAAAAAARWR}
00723 {\cf20 // to #include the header implementing tuple.}\par
{\bkmkstart AAAAAAARWS}{\bkmkend AAAAAAARWS}
00724 {\cf21 #if GTEST_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARWT}{\bkmkend AAAAAAARWT}
00725 {\cf21 # include <tuple>}  {\cf20 // IWYU pragma: export}\par
{\bkmkstart AAAAAAARWU}{\bkmkend AAAAAAARWU}
00726 {\cf21 # define GTEST_TUPLE_NAMESPACE_ ::std}\par
{\bkmkstart AAAAAAARWV}{\bkmkend AAAAAAARWV}
00727 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_TUPLE_}\par
{\bkmkstart AAAAAAARWW}{\bkmkend AAAAAAARWW}
00728 \par
{\bkmkstart AAAAAAARWX}{\bkmkend AAAAAAARWX}
00729 {\cf20 // We include tr1::tuple even if std::tuple is available to define printers for}\par
{\bkmkstart AAAAAAARWY}{\bkmkend AAAAAAARWY}
00730 {\cf20 // them.}\par
{\bkmkstart AAAAAAARWZ}{\bkmkend AAAAAAARWZ}
00731 {\cf21 #if GTEST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARXA}{\bkmkend AAAAAAARXA}
00732 {\cf21 # ifndef GTEST_TUPLE_NAMESPACE_}\par
{\bkmkstart AAAAAAARXB}{\bkmkend AAAAAAARXB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARXC" }{}}{\fldrslt {\cs37\ul\cf2 00733}}}
 {\cf21 #  define GTEST_TUPLE_NAMESPACE_ ::std::tr1}\par
{\bkmkstart AAAAAAARXD}{\bkmkend AAAAAAARXD}
00734 {\cf21 # endif  }{\cf20 // GTEST_TUPLE_NAMESPACE_}\par
{\bkmkstart AAAAAAARXE}{\bkmkend AAAAAAARXE}
00735 \par
{\bkmkstart AAAAAAARXF}{\bkmkend AAAAAAARXF}
00736 {\cf21 # if GTEST_USE_OWN_TR1_TUPLE}\par
{\bkmkstart AAAAAAARXG}{\bkmkend AAAAAAARXG}
00737 {\cf21 #  include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARXH" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-tuple.h}}}
"}  {\cf20 // IWYU pragma: export  // NOLINT}\par
{\bkmkstart AAAAAAARXI}{\bkmkend AAAAAAARXI}
00738 {\cf21 # elif GTEST_OS_SYMBIAN}\par
{\bkmkstart AAAAAAARXJ}{\bkmkend AAAAAAARXJ}
00739 \par
{\bkmkstart AAAAAAARXK}{\bkmkend AAAAAAARXK}
00740 {\cf20 // On Symbian, BOOST_HAS_TR1_TUPLE causes Boost's TR1 tuple library to}\par
{\bkmkstart AAAAAAARXL}{\bkmkend AAAAAAARXL}
00741 {\cf20 // use STLport's tuple implementation, which unfortunately doesn't}\par
{\bkmkstart AAAAAAARXM}{\bkmkend AAAAAAARXM}
00742 {\cf20 // work as the copy of STLport distributed with Symbian is incomplete.}\par
{\bkmkstart AAAAAAARXN}{\bkmkend AAAAAAARXN}
00743 {\cf20 // By making sure BOOST_HAS_TR1_TUPLE is undefined, we force Boost to}\par
{\bkmkstart AAAAAAARXO}{\bkmkend AAAAAAARXO}
00744 {\cf20 // use its own tuple implementation.}\par
{\bkmkstart AAAAAAARXP}{\bkmkend AAAAAAARXP}
00745 {\cf21 #  ifdef BOOST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARXQ}{\bkmkend AAAAAAARXQ}
00746 {\cf21 #   undef BOOST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARXR}{\bkmkend AAAAAAARXR}
00747 {\cf21 #  endif  }{\cf20 // BOOST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARXS}{\bkmkend AAAAAAARXS}
00748 \par
{\bkmkstart AAAAAAARXT}{\bkmkend AAAAAAARXT}
00749 {\cf20 // This prevents <boost/tr1/detail/config.hpp>, which defines}\par
{\bkmkstart AAAAAAARXU}{\bkmkend AAAAAAARXU}
00750 {\cf20 // BOOST_HAS_TR1_TUPLE, from being #included by Boost's <tuple>.}\par
{\bkmkstart AAAAAAARXV}{\bkmkend AAAAAAARXV}
00751 {\cf21 #  define BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED}\par
{\bkmkstart AAAAAAARXW}{\bkmkend AAAAAAARXW}
00752 {\cf21 #  include <tuple>}  {\cf20 // IWYU pragma: export  // NOLINT}\par
{\bkmkstart AAAAAAARXX}{\bkmkend AAAAAAARXX}
00753 \par
{\bkmkstart AAAAAAARXY}{\bkmkend AAAAAAARXY}
00754 {\cf21 # elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40000)}\par
{\bkmkstart AAAAAAARXZ}{\bkmkend AAAAAAARXZ}
00755 {\cf20 // GCC 4.0+ implements tr1/tuple in the <tr1/tuple> header.  This does}\par
{\bkmkstart AAAAAAARYA}{\bkmkend AAAAAAARYA}
00756 {\cf20 // not conform to the TR1 spec, which requires the header to be <tuple>.}\par
{\bkmkstart AAAAAAARYB}{\bkmkend AAAAAAARYB}
00757 \par
{\bkmkstart AAAAAAARYC}{\bkmkend AAAAAAARYC}
00758 {\cf21 #  if !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302}\par
{\bkmkstart AAAAAAARYD}{\bkmkend AAAAAAARYD}
00759 {\cf20 // Until version 4.3.2, gcc has a bug that causes <tr1/functional>,}\par
{\bkmkstart AAAAAAARYE}{\bkmkend AAAAAAARYE}
00760 {\cf20 // which is #included by <tr1/tuple>, to not compile when RTTI is}\par
{\bkmkstart AAAAAAARYF}{\bkmkend AAAAAAARYF}
00761 {\cf20 // disabled.  _TR1_FUNCTIONAL is the header guard for}\par
{\bkmkstart AAAAAAARYG}{\bkmkend AAAAAAARYG}
00762 {\cf20 // <tr1/functional>.  Hence the following #define is used to prevent}\par
{\bkmkstart AAAAAAARYH}{\bkmkend AAAAAAARYH}
00763 {\cf20 // <tr1/functional> from being included.}\par
{\bkmkstart AAAAAAARYI}{\bkmkend AAAAAAARYI}
00764 {\cf21 #   define _TR1_FUNCTIONAL 1}\par
{\bkmkstart AAAAAAARYJ}{\bkmkend AAAAAAARYJ}
00765 {\cf21 #   include <tr1/tuple>}\par
{\bkmkstart AAAAAAARYK}{\bkmkend AAAAAAARYK}
00766 {\cf21 #   undef _TR1_FUNCTIONAL  }{\cf20 // Allows the user to #include}\par
{\bkmkstart AAAAAAARYL}{\bkmkend AAAAAAARYL}
00767                         {\cf20 // <tr1/functional> if they choose to.}\par
{\bkmkstart AAAAAAARYM}{\bkmkend AAAAAAARYM}
00768 {\cf21 #  else}\par
{\bkmkstart AAAAAAARYN}{\bkmkend AAAAAAARYN}
00769 {\cf21 #   include <tr1/tuple>}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAARYO}{\bkmkend AAAAAAARYO}
00770 {\cf21 #  endif  }{\cf20 // !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302}\par
{\bkmkstart AAAAAAARYP}{\bkmkend AAAAAAARYP}
00771 \par
{\bkmkstart AAAAAAARYQ}{\bkmkend AAAAAAARYQ}
00772 {\cf20 // VS 2010 now has tr1 support.}\par
{\bkmkstart AAAAAAARYR}{\bkmkend AAAAAAARYR}
00773 {\cf21 # elif _MSC_VER >= 1600}\par
{\bkmkstart AAAAAAARYS}{\bkmkend AAAAAAARYS}
00774 {\cf21 #  include <tuple>}  {\cf20 // IWYU pragma: export  // NOLINT}\par
{\bkmkstart AAAAAAARYT}{\bkmkend AAAAAAARYT}
00775 \par
{\bkmkstart AAAAAAARYU}{\bkmkend AAAAAAARYU}
00776 {\cf21 # else  }{\cf20 // GTEST_USE_OWN_TR1_TUPLE}\par
{\bkmkstart AAAAAAARYV}{\bkmkend AAAAAAARYV}
00777 {\cf21 #  include <tr1/tuple>}  {\cf20 // IWYU pragma: export  // NOLINT}\par
{\bkmkstart AAAAAAARYW}{\bkmkend AAAAAAARYW}
00778 {\cf21 # endif  }{\cf20 // GTEST_USE_OWN_TR1_TUPLE}\par
{\bkmkstart AAAAAAARYX}{\bkmkend AAAAAAARYX}
00779 \par
{\bkmkstart AAAAAAARYY}{\bkmkend AAAAAAARYY}
00780 {\cf21 #endif  }{\cf20 // GTEST_HAS_TR1_TUPLE}\par
{\bkmkstart AAAAAAARYZ}{\bkmkend AAAAAAARYZ}
00781 \par
{\bkmkstart AAAAAAARZA}{\bkmkend AAAAAAARZA}
00782 {\cf20 // Determines whether clone(2) is supported.}\par
{\bkmkstart AAAAAAARZB}{\bkmkend AAAAAAARZB}
00783 {\cf20 // Usually it will only be available on Linux, excluding}\par
{\bkmkstart AAAAAAARZC}{\bkmkend AAAAAAARZC}
00784 {\cf20 // Linux on the Itanium architecture.}\par
{\bkmkstart AAAAAAARZD}{\bkmkend AAAAAAARZD}
00785 {\cf20 // Also see http://linux.die.net/man/2/clone.}\par
{\bkmkstart AAAAAAARZE}{\bkmkend AAAAAAARZE}
00786 {\cf21 #ifndef GTEST_HAS_CLONE}\par
{\bkmkstart AAAAAAARZF}{\bkmkend AAAAAAARZF}
00787 {\cf20 // The user didn't tell us, so we need to figure it out.}\par
{\bkmkstart AAAAAAARZG}{\bkmkend AAAAAAARZG}
00788 \par
{\bkmkstart AAAAAAARZH}{\bkmkend AAAAAAARZH}
00789 {\cf21 # if GTEST_OS_LINUX && !defined(__ia64__)}\par
{\bkmkstart AAAAAAARZI}{\bkmkend AAAAAAARZI}
00790 {\cf21 #  if GTEST_OS_LINUX_ANDROID}\par
{\bkmkstart AAAAAAARZJ}{\bkmkend AAAAAAARZJ}
00791 {\cf20 // On Android, clone() became available at different API levels for each 32-bit}\par
{\bkmkstart AAAAAAARZK}{\bkmkend AAAAAAARZK}
00792 {\cf20 // architecture.}\par
{\bkmkstart AAAAAAARZL}{\bkmkend AAAAAAARZL}
00793 {\cf21 #    if defined(__LP64__) || \\}\par
{\bkmkstart AAAAAAARZM}{\bkmkend AAAAAAARZM}
00794 {\cf21         (defined(__arm__) && __ANDROID_API__ >= 9) || \\}\par
{\bkmkstart AAAAAAARZN}{\bkmkend AAAAAAARZN}
00795 {\cf21         (defined(__mips__) && __ANDROID_API__ >= 12) || \\}\par
{\bkmkstart AAAAAAARZO}{\bkmkend AAAAAAARZO}
00796 {\cf21         (defined(__i386__) && __ANDROID_API__ >= 17)}\par
{\bkmkstart AAAAAAARZP}{\bkmkend AAAAAAARZP}
00797 {\cf21 #     define GTEST_HAS_CLONE 1}\par
{\bkmkstart AAAAAAARZQ}{\bkmkend AAAAAAARZQ}
00798 {\cf21 #    else}\par
{\bkmkstart AAAAAAARZR}{\bkmkend AAAAAAARZR}
00799 {\cf21 #     define GTEST_HAS_CLONE 0}\par
{\bkmkstart AAAAAAARZS}{\bkmkend AAAAAAARZS}
00800 {\cf21 #    endif}\par
{\bkmkstart AAAAAAARZT}{\bkmkend AAAAAAARZT}
00801 {\cf21 #  else}\par
{\bkmkstart AAAAAAARZU}{\bkmkend AAAAAAARZU}
00802 {\cf21 #   define GTEST_HAS_CLONE 1}\par
{\bkmkstart AAAAAAARZV}{\bkmkend AAAAAAARZV}
00803 {\cf21 #  endif}\par
{\bkmkstart AAAAAAARZW}{\bkmkend AAAAAAARZW}
00804 {\cf21 # else}\par
{\bkmkstart AAAAAAARZX}{\bkmkend AAAAAAARZX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARZY" }{}}{\fldrslt {\cs37\ul\cf2 00805}}}
 {\cf21 #  define GTEST_HAS_CLONE 0}\par
{\bkmkstart AAAAAAARZZ}{\bkmkend AAAAAAARZZ}
00806 {\cf21 # endif  }{\cf20 // GTEST_OS_LINUX && !defined(__ia64__)}\par
{\bkmkstart AAAAAAASAA}{\bkmkend AAAAAAASAA}
00807 \par
{\bkmkstart AAAAAAASAB}{\bkmkend AAAAAAASAB}
00808 {\cf21 #endif  }{\cf20 // GTEST_HAS_CLONE}\par
{\bkmkstart AAAAAAASAC}{\bkmkend AAAAAAASAC}
00809 \par
{\bkmkstart AAAAAAASAD}{\bkmkend AAAAAAASAD}
00810 {\cf20 // Determines whether to support stream redirection. This is used to test}\par
{\bkmkstart AAAAAAASAE}{\bkmkend AAAAAAASAE}
00811 {\cf20 // output correctness and to implement death tests.}\par
{\bkmkstart AAAAAAASAF}{\bkmkend AAAAAAASAF}
00812 {\cf21 #ifndef GTEST_HAS_STREAM_REDIRECTION}\par
{\bkmkstart AAAAAAASAG}{\bkmkend AAAAAAASAG}
00813 {\cf20 // By default, we assume that stream redirection is supported on all}\par
{\bkmkstart AAAAAAASAH}{\bkmkend AAAAAAASAH}
00814 {\cf20 // platforms except known mobile ones.}\par
{\bkmkstart AAAAAAASAI}{\bkmkend AAAAAAASAI}
00815 {\cf21 # if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || \\}\par
{\bkmkstart AAAAAAASAJ}{\bkmkend AAAAAAASAJ}
00816 {\cf21     GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT}\par
{\bkmkstart AAAAAAASAK}{\bkmkend AAAAAAASAK}
00817 {\cf21 #  define GTEST_HAS_STREAM_REDIRECTION 0}\par
{\bkmkstart AAAAAAASAL}{\bkmkend AAAAAAASAL}
00818 {\cf21 # else}\par
{\bkmkstart AAAAAAASAM}{\bkmkend AAAAAAASAM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASAN" }{}}{\fldrslt {\cs37\ul\cf2 00819}}}
 {\cf21 #  define GTEST_HAS_STREAM_REDIRECTION 1}\par
{\bkmkstart AAAAAAASAO}{\bkmkend AAAAAAASAO}
00820 {\cf21 # endif  }{\cf20 // !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_SYMBIAN}\par
{\bkmkstart AAAAAAASAP}{\bkmkend AAAAAAASAP}
00821 {\cf21 #endif  }{\cf20 // GTEST_HAS_STREAM_REDIRECTION}\par
{\bkmkstart AAAAAAASAQ}{\bkmkend AAAAAAASAQ}
00822 \par
{\bkmkstart AAAAAAASAR}{\bkmkend AAAAAAASAR}
00823 {\cf20 // Determines whether to support death tests.}\par
{\bkmkstart AAAAAAASAS}{\bkmkend AAAAAAASAS}
00824 {\cf20 // Google Test does not support death tests for VC 7.1 and earlier as}\par
{\bkmkstart AAAAAAASAT}{\bkmkend AAAAAAASAT}
00825 {\cf20 // abort() in a VC 7.1 application compiled as GUI in debug config}\par
{\bkmkstart AAAAAAASAU}{\bkmkend AAAAAAASAU}
00826 {\cf20 // pops up a dialog window that cannot be suppressed programmatically.}\par
{\bkmkstart AAAAAAASAV}{\bkmkend AAAAAAASAV}
00827 {\cf21 #if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS ||   \\}\par
{\bkmkstart AAAAAAASAW}{\bkmkend AAAAAAASAW}
00828 {\cf21      (GTEST_OS_MAC && !GTEST_OS_IOS) ||                         \\}\par
{\bkmkstart AAAAAAASAX}{\bkmkend AAAAAAASAX}
00829 {\cf21      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) ||          \\}\par
{\bkmkstart AAAAAAASAY}{\bkmkend AAAAAAASAY}
00830 {\cf21      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \\}\par
{\bkmkstart AAAAAAASAZ}{\bkmkend AAAAAAASAZ}
00831 {\cf21      GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD || \\}\par
{\bkmkstart AAAAAAASBA}{\bkmkend AAAAAAASBA}
00832 {\cf21      GTEST_OS_NETBSD || GTEST_OS_FUCHSIA)}\par
{\bkmkstart AAAAAAASBB}{\bkmkend AAAAAAASBB}
00833 {\cf21 # define GTEST_HAS_DEATH_TEST 1}\par
{\bkmkstart AAAAAAASBC}{\bkmkend AAAAAAASBC}
00834 {\cf21 #endif}\par
{\bkmkstart AAAAAAASBD}{\bkmkend AAAAAAASBD}
00835 \par
{\bkmkstart AAAAAAASBE}{\bkmkend AAAAAAASBE}
00836 {\cf20 // Determines whether to support type-driven tests.}\par
{\bkmkstart AAAAAAASBF}{\bkmkend AAAAAAASBF}
00837 \par
{\bkmkstart AAAAAAASBG}{\bkmkend AAAAAAASBG}
00838 {\cf20 // Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,}\par
{\bkmkstart AAAAAAASBH}{\bkmkend AAAAAAASBH}
00839 {\cf20 // Sun Pro CC, IBM Visual Age, and HP aCC support.}\par
{\bkmkstart AAAAAAASBI}{\bkmkend AAAAAAASBI}
00840 {\cf21 #if defined(__GNUC__) || (_MSC_VER >= 1400) || defined(__SUNPRO_CC) || \\}\par
{\bkmkstart AAAAAAASBJ}{\bkmkend AAAAAAASBJ}
00841 {\cf21     defined(__IBMCPP__) || defined(__HP_aCC)}\par
{\bkmkstart AAAAAAASBK}{\bkmkend AAAAAAASBK}
00842 {\cf21 # define GTEST_HAS_TYPED_TEST 1}\par
{\bkmkstart AAAAAAASBL}{\bkmkend AAAAAAASBL}
00843 {\cf21 # define GTEST_HAS_TYPED_TEST_P 1}\par
{\bkmkstart AAAAAAASBM}{\bkmkend AAAAAAASBM}
00844 {\cf21 #endif}\par
{\bkmkstart AAAAAAASBN}{\bkmkend AAAAAAASBN}
00845 \par
{\bkmkstart AAAAAAASBO}{\bkmkend AAAAAAASBO}
00846 {\cf20 // Determines whether to support Combine(). This only makes sense when}\par
{\bkmkstart AAAAAAASBP}{\bkmkend AAAAAAASBP}
00847 {\cf20 // value-parameterized tests are enabled.  The implementation doesn't}\par
{\bkmkstart AAAAAAASBQ}{\bkmkend AAAAAAASBQ}
00848 {\cf20 // work on Sun Studio since it doesn't understand templated conversion}\par
{\bkmkstart AAAAAAASBR}{\bkmkend AAAAAAASBR}
00849 {\cf20 // operators.}\par
{\bkmkstart AAAAAAASBS}{\bkmkend AAAAAAASBS}
00850 {\cf21 #if (GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_) && !defined(__SUNPRO_CC)}\par
{\bkmkstart AAAAAAASBT}{\bkmkend AAAAAAASBT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASBU" }{}}{\fldrslt {\cs37\ul\cf2 00851}}}
 {\cf21 # define GTEST_HAS_COMBINE 1}\par
{\bkmkstart AAAAAAASBV}{\bkmkend AAAAAAASBV}
00852 {\cf21 #endif}\par
{\bkmkstart AAAAAAASBW}{\bkmkend AAAAAAASBW}
00853 \par
{\bkmkstart AAAAAAASBX}{\bkmkend AAAAAAASBX}
00854 {\cf20 // Determines whether the system compiler uses UTF-16 for encoding wide strings.}\par
{\bkmkstart AAAAAAASBY}{\bkmkend AAAAAAASBY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASBZ" }{}}{\fldrslt {\cs37\ul\cf2 00855}}}
 {\cf21 #define GTEST_WIDE_STRING_USES_UTF16_ \\}\par
{\bkmkstart AAAAAAASCA}{\bkmkend AAAAAAASCA}
00856 {\cf21     (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_SYMBIAN || GTEST_OS_AIX)}\par
{\bkmkstart AAAAAAASCB}{\bkmkend AAAAAAASCB}
00857 \par
{\bkmkstart AAAAAAASCC}{\bkmkend AAAAAAASCC}
00858 {\cf20 // Determines whether test results can be streamed to a socket.}\par
{\bkmkstart AAAAAAASCD}{\bkmkend AAAAAAASCD}
00859 {\cf21 #if GTEST_OS_LINUX}\par
{\bkmkstart AAAAAAASCE}{\bkmkend AAAAAAASCE}
00860 {\cf21 # define GTEST_CAN_STREAM_RESULTS_ 1}\par
{\bkmkstart AAAAAAASCF}{\bkmkend AAAAAAASCF}
00861 {\cf21 #endif}\par
{\bkmkstart AAAAAAASCG}{\bkmkend AAAAAAASCG}
00862 \par
{\bkmkstart AAAAAAASCH}{\bkmkend AAAAAAASCH}
00863 {\cf20 // Defines some utility macros.}\par
{\bkmkstart AAAAAAASCI}{\bkmkend AAAAAAASCI}
00864 \par
{\bkmkstart AAAAAAASCJ}{\bkmkend AAAAAAASCJ}
00865 {\cf20 // The GNU compiler emits a warning if nested "if" statements are followed by}\par
{\bkmkstart AAAAAAASCK}{\bkmkend AAAAAAASCK}
00866 {\cf20 // an "else" statement and braces are not used to explicitly disambiguate the}\par
{\bkmkstart AAAAAAASCL}{\bkmkend AAAAAAASCL}
00867 {\cf20 // "else" binding.  This leads to problems with code like:}\par
{\bkmkstart AAAAAAASCM}{\bkmkend AAAAAAASCM}
00868 {\cf20 //}\par
{\bkmkstart AAAAAAASCN}{\bkmkend AAAAAAASCN}
00869 {\cf20 //   if (gate)}\par
{\bkmkstart AAAAAAASCO}{\bkmkend AAAAAAASCO}
00870 {\cf20 //     ASSERT_*(condition) << "Some message";}\par
{\bkmkstart AAAAAAASCP}{\bkmkend AAAAAAASCP}
00871 {\cf20 //}\par
{\bkmkstart AAAAAAASCQ}{\bkmkend AAAAAAASCQ}
00872 {\cf20 // The "switch (0) case 0:" idiom is used to suppress this.}\par
{\bkmkstart AAAAAAASCR}{\bkmkend AAAAAAASCR}
00873 {\cf21 #ifdef __INTEL_COMPILER}\par
{\bkmkstart AAAAAAASCS}{\bkmkend AAAAAAASCS}
00874 {\cf21 # define GTEST_AMBIGUOUS_ELSE_BLOCKER_}\par
{\bkmkstart AAAAAAASCT}{\bkmkend AAAAAAASCT}
00875 {\cf21 #else}\par
{\bkmkstart AAAAAAASCU}{\bkmkend AAAAAAASCU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASCV" }{}}{\fldrslt {\cs37\ul\cf2 00876}}}
 {\cf21 # define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  }{\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASCW}{\bkmkend AAAAAAASCW}
00877 {\cf21 #endif}\par
{\bkmkstart AAAAAAASCX}{\bkmkend AAAAAAASCX}
00878 \par
{\bkmkstart AAAAAAASCY}{\bkmkend AAAAAAASCY}
00879 {\cf20 // Use this annotation at the end of a struct/class definition to}\par
{\bkmkstart AAAAAAASCZ}{\bkmkend AAAAAAASCZ}
00880 {\cf20 // prevent the compiler from optimizing away instances that are never}\par
{\bkmkstart AAAAAAASDA}{\bkmkend AAAAAAASDA}
00881 {\cf20 // used.  This is useful when all interesting logic happens inside the}\par
{\bkmkstart AAAAAAASDB}{\bkmkend AAAAAAASDB}
00882 {\cf20 // c'tor and / or d'tor.  Example:}\par
{\bkmkstart AAAAAAASDC}{\bkmkend AAAAAAASDC}
00883 {\cf20 //}\par
{\bkmkstart AAAAAAASDD}{\bkmkend AAAAAAASDD}
00884 {\cf20 //   struct Foo \{}\par
{\bkmkstart AAAAAAASDE}{\bkmkend AAAAAAASDE}
00885 {\cf20 //     Foo() \{ ... \}}\par
{\bkmkstart AAAAAAASDF}{\bkmkend AAAAAAASDF}
00886 {\cf20 //   \} GTEST_ATTRIBUTE_UNUSED_;}\par
{\bkmkstart AAAAAAASDG}{\bkmkend AAAAAAASDG}
00887 {\cf20 //}\par
{\bkmkstart AAAAAAASDH}{\bkmkend AAAAAAASDH}
00888 {\cf20 // Also use it after a variable or parameter declaration to tell the}\par
{\bkmkstart AAAAAAASDI}{\bkmkend AAAAAAASDI}
00889 {\cf20 // compiler the variable/parameter does not have to be used.}\par
{\bkmkstart AAAAAAASDJ}{\bkmkend AAAAAAASDJ}
00890 {\cf21 #if defined(__GNUC__) && !defined(COMPILER_ICC)}\par
{\bkmkstart AAAAAAASDK}{\bkmkend AAAAAAASDK}
00891 {\cf21 # define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))}\par
{\bkmkstart AAAAAAASDL}{\bkmkend AAAAAAASDL}
00892 {\cf21 #elif defined(__clang__)}\par
{\bkmkstart AAAAAAASDM}{\bkmkend AAAAAAASDM}
00893 {\cf21 # if __has_attribute(unused)}\par
{\bkmkstart AAAAAAASDN}{\bkmkend AAAAAAASDN}
00894 {\cf21 #  define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))}\par
{\bkmkstart AAAAAAASDO}{\bkmkend AAAAAAASDO}
00895 {\cf21 # endif}\par
{\bkmkstart AAAAAAASDP}{\bkmkend AAAAAAASDP}
00896 {\cf21 #endif}\par
{\bkmkstart AAAAAAASDQ}{\bkmkend AAAAAAASDQ}
00897 {\cf21 #ifndef GTEST_ATTRIBUTE_UNUSED_}\par
{\bkmkstart AAAAAAASDR}{\bkmkend AAAAAAASDR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASDS" }{}}{\fldrslt {\cs37\ul\cf2 00898}}}
 {\cf21 # define GTEST_ATTRIBUTE_UNUSED_}\par
{\bkmkstart AAAAAAASDT}{\bkmkend AAAAAAASDT}
00899 {\cf21 #endif}\par
{\bkmkstart AAAAAAASDU}{\bkmkend AAAAAAASDU}
00900 \par
{\bkmkstart AAAAAAASDV}{\bkmkend AAAAAAASDV}
00901 {\cf21 #if GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASDW}{\bkmkend AAAAAAASDW}
00902 {\cf21 # define GTEST_CXX11_EQUALS_DELETE_ = delete}\par
{\bkmkstart AAAAAAASDX}{\bkmkend AAAAAAASDX}
00903 {\cf21 #else  }{\cf20 // GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASDY}{\bkmkend AAAAAAASDY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASDZ" }{}}{\fldrslt {\cs37\ul\cf2 00904}}}
 {\cf21 # define GTEST_CXX11_EQUALS_DELETE_}\par
{\bkmkstart AAAAAAASEA}{\bkmkend AAAAAAASEA}
00905 {\cf21 #endif  }{\cf20 // GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASEB}{\bkmkend AAAAAAASEB}
00906 \par
{\bkmkstart AAAAAAASEC}{\bkmkend AAAAAAASEC}
00907 {\cf20 // Use this annotation before a function that takes a printf format string.}\par
{\bkmkstart AAAAAAASED}{\bkmkend AAAAAAASED}
00908 {\cf21 #if (defined(__GNUC__) || defined(__clang__)) && !defined(COMPILER_ICC)}\par
{\bkmkstart AAAAAAASEE}{\bkmkend AAAAAAASEE}
00909 {\cf21 # if defined(__MINGW_PRINTF_FORMAT)}\par
{\bkmkstart AAAAAAASEF}{\bkmkend AAAAAAASEF}
00910 {\cf20 // MinGW has two different printf implementations. Ensure the format macro}\par
{\bkmkstart AAAAAAASEG}{\bkmkend AAAAAAASEG}
00911 {\cf20 // matches the selected implementation. See}\par
{\bkmkstart AAAAAAASEH}{\bkmkend AAAAAAASEH}
00912 {\cf20 // https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.}\par
{\bkmkstart AAAAAAASEI}{\bkmkend AAAAAAASEI}
00913 {\cf21 #  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\}\par
{\bkmkstart AAAAAAASEJ}{\bkmkend AAAAAAASEJ}
00914 {\cf21        __attribute__((__format__(__MINGW_PRINTF_FORMAT, string_index, \\}\par
{\bkmkstart AAAAAAASEK}{\bkmkend AAAAAAASEK}
00915 {\cf21                                  first_to_check)))}\par
{\bkmkstart AAAAAAASEL}{\bkmkend AAAAAAASEL}
00916 {\cf21 # else}\par
{\bkmkstart AAAAAAASEM}{\bkmkend AAAAAAASEM}
00917 {\cf21 #  define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check) \\}\par
{\bkmkstart AAAAAAASEN}{\bkmkend AAAAAAASEN}
00918 {\cf21        __attribute__((__format__(__printf__, string_index, first_to_check)))}\par
{\bkmkstart AAAAAAASEO}{\bkmkend AAAAAAASEO}
00919 {\cf21 # endif}\par
{\bkmkstart AAAAAAASEP}{\bkmkend AAAAAAASEP}
00920 {\cf21 #else}\par
{\bkmkstart AAAAAAASEQ}{\bkmkend AAAAAAASEQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASER" }{}}{\fldrslt {\cs37\ul\cf2 00921}}}
 {\cf21 # define GTEST_ATTRIBUTE_PRINTF_(string_index, first_to_check)}\par
{\bkmkstart AAAAAAASES}{\bkmkend AAAAAAASES}
00922 {\cf21 #endif}\par
{\bkmkstart AAAAAAASET}{\bkmkend AAAAAAASET}
00923 \par
{\bkmkstart AAAAAAASEU}{\bkmkend AAAAAAASEU}
00924 \par
{\bkmkstart AAAAAAASEV}{\bkmkend AAAAAAASEV}
00925 {\cf20 // A macro to disallow operator=}\par
{\bkmkstart AAAAAAASEW}{\bkmkend AAAAAAASEW}
00926 {\cf20 // This should be used in the private: declarations for a class.}\par
{\bkmkstart AAAAAAASEX}{\bkmkend AAAAAAASEX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASEY" }{}}{\fldrslt {\cs37\ul\cf2 00927}}}
 {\cf21 #define GTEST_DISALLOW_ASSIGN_(type) \\}\par
{\bkmkstart AAAAAAASEZ}{\bkmkend AAAAAAASEZ}
00928 {\cf21   void operator=(type const &) GTEST_CXX11_EQUALS_DELETE_}\par
{\bkmkstart AAAAAAASFA}{\bkmkend AAAAAAASFA}
00929 \par
{\bkmkstart AAAAAAASFB}{\bkmkend AAAAAAASFB}
00930 {\cf20 // A macro to disallow copy constructor and operator=}\par
{\bkmkstart AAAAAAASFC}{\bkmkend AAAAAAASFC}
00931 {\cf20 // This should be used in the private: declarations for a class.}\par
{\bkmkstart AAAAAAASFD}{\bkmkend AAAAAAASFD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 00932}}}
 {\cf21 #define GTEST_DISALLOW_COPY_AND_ASSIGN_(type) \\}\par
{\bkmkstart AAAAAAASFE}{\bkmkend AAAAAAASFE}
00933 {\cf21   type(type const &) GTEST_CXX11_EQUALS_DELETE_; \\}\par
{\bkmkstart AAAAAAASFF}{\bkmkend AAAAAAASFF}
00934 {\cf21   GTEST_DISALLOW_ASSIGN_(type)}\par
{\bkmkstart AAAAAAASFG}{\bkmkend AAAAAAASFG}
00935 \par
{\bkmkstart AAAAAAASFH}{\bkmkend AAAAAAASFH}
00936 {\cf20 // Tell the compiler to warn about unused return values for functions declared}\par
{\bkmkstart AAAAAAASFI}{\bkmkend AAAAAAASFI}
00937 {\cf20 // with this macro.  The macro should be used on function declarations}\par
{\bkmkstart AAAAAAASFJ}{\bkmkend AAAAAAASFJ}
00938 {\cf20 // following the argument list:}\par
{\bkmkstart AAAAAAASFK}{\bkmkend AAAAAAASFK}
00939 {\cf20 //}\par
{\bkmkstart AAAAAAASFL}{\bkmkend AAAAAAASFL}
00940 {\cf20 //   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;}\par
{\bkmkstart AAAAAAASFM}{\bkmkend AAAAAAASFM}
00941 {\cf21 #if defined(__GNUC__) && (GTEST_GCC_VER_ >= 30400) && !defined(COMPILER_ICC)}\par
{\bkmkstart AAAAAAASFN}{\bkmkend AAAAAAASFN}
00942 {\cf21 # define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))}\par
{\bkmkstart AAAAAAASFO}{\bkmkend AAAAAAASFO}
00943 {\cf21 #else}\par
{\bkmkstart AAAAAAASFP}{\bkmkend AAAAAAASFP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCN" }{}}{\fldrslt {\cs37\ul\cf2 00944}}}
 {\cf21 # define GTEST_MUST_USE_RESULT_}\par
{\bkmkstart AAAAAAASFQ}{\bkmkend AAAAAAASFQ}
00945 {\cf21 #endif  }{\cf20 // __GNUC__ && (GTEST_GCC_VER_ >= 30400) && !COMPILER_ICC}\par
{\bkmkstart AAAAAAASFR}{\bkmkend AAAAAAASFR}
00946 \par
{\bkmkstart AAAAAAASFS}{\bkmkend AAAAAAASFS}
00947 {\cf20 // MS C++ compiler emits warning when a conditional expression is compile time}\par
{\bkmkstart AAAAAAASFT}{\bkmkend AAAAAAASFT}
00948 {\cf20 // constant. In some contexts this warning is false positive and needs to be}\par
{\bkmkstart AAAAAAASFU}{\bkmkend AAAAAAASFU}
00949 {\cf20 // suppressed. Use the following two macros in such cases:}\par
{\bkmkstart AAAAAAASFV}{\bkmkend AAAAAAASFV}
00950 {\cf20 //}\par
{\bkmkstart AAAAAAASFW}{\bkmkend AAAAAAASFW}
00951 {\cf20 // GTEST_INTENTIONAL_CONST_COND_PUSH_()}\par
{\bkmkstart AAAAAAASFX}{\bkmkend AAAAAAASFX}
00952 {\cf20 // while (true) \{}\par
{\bkmkstart AAAAAAASFY}{\bkmkend AAAAAAASFY}
00953 {\cf20 // GTEST_INTENTIONAL_CONST_COND_POP_()}\par
{\bkmkstart AAAAAAASFZ}{\bkmkend AAAAAAASFZ}
00954 {\cf20 // \}}\par
{\bkmkstart AAAAAAASGA}{\bkmkend AAAAAAASGA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKVA" }{}}{\fldrslt {\cs37\ul\cf2 00955}}}
 {\cf21 # define GTEST_INTENTIONAL_CONST_COND_PUSH_() \\}\par
{\bkmkstart AAAAAAASGB}{\bkmkend AAAAAAASGB}
00956 {\cf21     GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)}\par
{\bkmkstart AAAAAAASGC}{\bkmkend AAAAAAASGC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKVD" }{}}{\fldrslt {\cs37\ul\cf2 00957}}}
 {\cf21 # define GTEST_INTENTIONAL_CONST_COND_POP_() \\}\par
{\bkmkstart AAAAAAASGD}{\bkmkend AAAAAAASGD}
00958 {\cf21     GTEST_DISABLE_MSC_WARNINGS_POP_()}\par
{\bkmkstart AAAAAAASGE}{\bkmkend AAAAAAASGE}
00959 \par
{\bkmkstart AAAAAAASGF}{\bkmkend AAAAAAASGF}
00960 {\cf20 // Determine whether the compiler supports Microsoft's Structured Exception}\par
{\bkmkstart AAAAAAASGG}{\bkmkend AAAAAAASGG}
00961 {\cf20 // Handling.  This is supported by several Windows compilers but generally}\par
{\bkmkstart AAAAAAASGH}{\bkmkend AAAAAAASGH}
00962 {\cf20 // does not exist on any other system.}\par
{\bkmkstart AAAAAAASGI}{\bkmkend AAAAAAASGI}
00963 {\cf21 #ifndef GTEST_HAS_SEH}\par
{\bkmkstart AAAAAAASGJ}{\bkmkend AAAAAAASGJ}
00964 {\cf20 // The user didn't tell us, so we need to figure it out.}\par
{\bkmkstart AAAAAAASGK}{\bkmkend AAAAAAASGK}
00965 \par
{\bkmkstart AAAAAAASGL}{\bkmkend AAAAAAASGL}
00966 {\cf21 # if defined(_MSC_VER) || defined(__BORLANDC__)}\par
{\bkmkstart AAAAAAASGM}{\bkmkend AAAAAAASGM}
00967 {\cf20 // These two compilers are known to support SEH.}\par
{\bkmkstart AAAAAAASGN}{\bkmkend AAAAAAASGN}
00968 {\cf21 #  define GTEST_HAS_SEH 1}\par
{\bkmkstart AAAAAAASGO}{\bkmkend AAAAAAASGO}
00969 {\cf21 # else}\par
{\bkmkstart AAAAAAASGP}{\bkmkend AAAAAAASGP}
00970 {\cf20 // Assume no SEH.}\par
{\bkmkstart AAAAAAASGQ}{\bkmkend AAAAAAASGQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASGR" }{}}{\fldrslt {\cs37\ul\cf2 00971}}}
 {\cf21 #  define GTEST_HAS_SEH 0}\par
{\bkmkstart AAAAAAASGS}{\bkmkend AAAAAAASGS}
00972 {\cf21 # endif}\par
{\bkmkstart AAAAAAASGT}{\bkmkend AAAAAAASGT}
00973 \par
{\bkmkstart AAAAAAASGU}{\bkmkend AAAAAAASGU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASGV" }{}}{\fldrslt {\cs37\ul\cf2 00974}}}
 {\cf21 #define GTEST_IS_THREADSAFE \\}\par
{\bkmkstart AAAAAAASGW}{\bkmkend AAAAAAASGW}
00975 {\cf21     (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ \\}\par
{\bkmkstart AAAAAAASGX}{\bkmkend AAAAAAASGX}
00976 {\cf21      || (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) \\}\par
{\bkmkstart AAAAAAASGY}{\bkmkend AAAAAAASGY}
00977 {\cf21      || GTEST_HAS_PTHREAD)}\par
{\bkmkstart AAAAAAASGZ}{\bkmkend AAAAAAASGZ}
00978 \par
{\bkmkstart AAAAAAASHA}{\bkmkend AAAAAAASHA}
00979 {\cf21 #endif  }{\cf20 // GTEST_HAS_SEH}\par
{\bkmkstart AAAAAAASHB}{\bkmkend AAAAAAASHB}
00980 \par
{\bkmkstart AAAAAAASHC}{\bkmkend AAAAAAASHC}
00981 {\cf20 // GTEST_API_ qualifies all symbols that must be exported. The definitions below}\par
{\bkmkstart AAAAAAASHD}{\bkmkend AAAAAAASHD}
00982 {\cf20 // are guarded by #ifndef to give embedders a chance to define GTEST_API_ in}\par
{\bkmkstart AAAAAAASHE}{\bkmkend AAAAAAASHE}
00983 {\cf20 // gtest/internal/custom/gtest-port.h}\par
{\bkmkstart AAAAAAASHF}{\bkmkend AAAAAAASHF}
00984 {\cf21 #ifndef GTEST_API_}\par
{\bkmkstart AAAAAAASHG}{\bkmkend AAAAAAASHG}
00985 \par
{\bkmkstart AAAAAAASHH}{\bkmkend AAAAAAASHH}
00986 {\cf21 #ifdef _MSC_VER}\par
{\bkmkstart AAAAAAASHI}{\bkmkend AAAAAAASHI}
00987 {\cf21 # if GTEST_LINKED_AS_SHARED_LIBRARY}\par
{\bkmkstart AAAAAAASHJ}{\bkmkend AAAAAAASHJ}
00988 {\cf21 #  define GTEST_API_ __declspec(dllimport)}\par
{\bkmkstart AAAAAAASHK}{\bkmkend AAAAAAASHK}
00989 {\cf21 # elif GTEST_CREATE_SHARED_LIBRARY}\par
{\bkmkstart AAAAAAASHL}{\bkmkend AAAAAAASHL}
00990 {\cf21 #  define GTEST_API_ __declspec(dllexport)}\par
{\bkmkstart AAAAAAASHM}{\bkmkend AAAAAAASHM}
00991 {\cf21 # endif}\par
{\bkmkstart AAAAAAASHN}{\bkmkend AAAAAAASHN}
00992 {\cf21 #elif __GNUC__ >= 4 || defined(__clang__)}\par
{\bkmkstart AAAAAAASHO}{\bkmkend AAAAAAASHO}
00993 {\cf21 # define GTEST_API_ __attribute__((visibility ("default"})))\par
{\bkmkstart AAAAAAASHP}{\bkmkend AAAAAAASHP}
00994 {\cf21 #endif  }{\cf20 // _MSC_VER}\par
{\bkmkstart AAAAAAASHQ}{\bkmkend AAAAAAASHQ}
00995 \par
{\bkmkstart AAAAAAASHR}{\bkmkend AAAAAAASHR}
00996 {\cf21 #endif  }{\cf20 // GTEST_API_}\par
{\bkmkstart AAAAAAASHS}{\bkmkend AAAAAAASHS}
00997 \par
{\bkmkstart AAAAAAASHT}{\bkmkend AAAAAAASHT}
00998 {\cf21 #ifndef GTEST_API_}\par
{\bkmkstart AAAAAAASHU}{\bkmkend AAAAAAASHU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 00999}}}
 {\cf21 # define GTEST_API_}\par
{\bkmkstart AAAAAAASHV}{\bkmkend AAAAAAASHV}
01000 {\cf21 #endif  }{\cf20 // GTEST_API_}\par
{\bkmkstart AAAAAAASHW}{\bkmkend AAAAAAASHW}
01001 \par
{\bkmkstart AAAAAAASHX}{\bkmkend AAAAAAASHX}
01002 {\cf21 #ifndef GTEST_DEFAULT_DEATH_TEST_STYLE}\par
{\bkmkstart AAAAAAASHY}{\bkmkend AAAAAAASHY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASHZ" }{}}{\fldrslt {\cs37\ul\cf2 01003}}}
 {\cf21 # define GTEST_DEFAULT_DEATH_TEST_STYLE  "fast"}\par
{\bkmkstart AAAAAAASIA}{\bkmkend AAAAAAASIA}
01004 {\cf21 #endif  }{\cf20 // GTEST_DEFAULT_DEATH_TEST_STYLE}\par
{\bkmkstart AAAAAAASIB}{\bkmkend AAAAAAASIB}
01005 \par
{\bkmkstart AAAAAAASIC}{\bkmkend AAAAAAASIC}
01006 {\cf21 #ifdef __GNUC__}\par
{\bkmkstart AAAAAAASID}{\bkmkend AAAAAAASID}
01007 {\cf20 // Ask the compiler to never inline a given function.}\par
{\bkmkstart AAAAAAASIE}{\bkmkend AAAAAAASIE}
01008 {\cf21 # define GTEST_NO_INLINE_ __attribute__((noinline))}\par
{\bkmkstart AAAAAAASIF}{\bkmkend AAAAAAASIF}
01009 {\cf21 #else}\par
{\bkmkstart AAAAAAASIG}{\bkmkend AAAAAAASIG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASIH" }{}}{\fldrslt {\cs37\ul\cf2 01010}}}
 {\cf21 # define GTEST_NO_INLINE_}\par
{\bkmkstart AAAAAAASII}{\bkmkend AAAAAAASII}
01011 {\cf21 #endif}\par
{\bkmkstart AAAAAAASIJ}{\bkmkend AAAAAAASIJ}
01012 \par
{\bkmkstart AAAAAAASIK}{\bkmkend AAAAAAASIK}
01013 {\cf20 // _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.}\par
{\bkmkstart AAAAAAASIL}{\bkmkend AAAAAAASIL}
01014 {\cf21 #if !defined(GTEST_HAS_CXXABI_H_)}\par
{\bkmkstart AAAAAAASIM}{\bkmkend AAAAAAASIM}
01015 {\cf21 # if defined(__GLIBCXX__) || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER))}\par
{\bkmkstart AAAAAAASIN}{\bkmkend AAAAAAASIN}
01016 {\cf21 #  define GTEST_HAS_CXXABI_H_ 1}\par
{\bkmkstart AAAAAAASIO}{\bkmkend AAAAAAASIO}
01017 {\cf21 # else}\par
{\bkmkstart AAAAAAASIP}{\bkmkend AAAAAAASIP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASIQ" }{}}{\fldrslt {\cs37\ul\cf2 01018}}}
 {\cf21 #  define GTEST_HAS_CXXABI_H_ 0}\par
{\bkmkstart AAAAAAASIR}{\bkmkend AAAAAAASIR}
01019 {\cf21 # endif}\par
{\bkmkstart AAAAAAASIS}{\bkmkend AAAAAAASIS}
01020 {\cf21 #endif}\par
{\bkmkstart AAAAAAASIT}{\bkmkend AAAAAAASIT}
01021 \par
{\bkmkstart AAAAAAASIU}{\bkmkend AAAAAAASIU}
01022 {\cf20 // A function level attribute to disable checking for use of uninitialized}\par
{\bkmkstart AAAAAAASIV}{\bkmkend AAAAAAASIV}
01023 {\cf20 // memory when built with MemorySanitizer.}\par
{\bkmkstart AAAAAAASIW}{\bkmkend AAAAAAASIW}
01024 {\cf21 #if defined(__clang__)}\par
{\bkmkstart AAAAAAASIX}{\bkmkend AAAAAAASIX}
01025 {\cf21 # if __has_feature(memory_sanitizer)}\par
{\bkmkstart AAAAAAASIY}{\bkmkend AAAAAAASIY}
01026 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ \\}\par
{\bkmkstart AAAAAAASIZ}{\bkmkend AAAAAAASIZ}
01027 {\cf21        __attribute__((no_sanitize_memory))}\par
{\bkmkstart AAAAAAASJA}{\bkmkend AAAAAAASJA}
01028 {\cf21 # else}\par
{\bkmkstart AAAAAAASJB}{\bkmkend AAAAAAASJB}
01029 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_}\par
{\bkmkstart AAAAAAASJC}{\bkmkend AAAAAAASJC}
01030 {\cf21 # endif  }{\cf20 // __has_feature(memory_sanitizer)}\par
{\bkmkstart AAAAAAASJD}{\bkmkend AAAAAAASJD}
01031 {\cf21 #else}\par
{\bkmkstart AAAAAAASJE}{\bkmkend AAAAAAASJE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASJF" }{}}{\fldrslt {\cs37\ul\cf2 01032}}}
 {\cf21 # define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_}\par
{\bkmkstart AAAAAAASJG}{\bkmkend AAAAAAASJG}
01033 {\cf21 #endif  }{\cf20 // __clang__}\par
{\bkmkstart AAAAAAASJH}{\bkmkend AAAAAAASJH}
01034 \par
{\bkmkstart AAAAAAASJI}{\bkmkend AAAAAAASJI}
01035 {\cf20 // A function level attribute to disable AddressSanitizer instrumentation.}\par
{\bkmkstart AAAAAAASJJ}{\bkmkend AAAAAAASJJ}
01036 {\cf21 #if defined(__clang__)}\par
{\bkmkstart AAAAAAASJK}{\bkmkend AAAAAAASJK}
01037 {\cf21 # if __has_feature(address_sanitizer)}\par
{\bkmkstart AAAAAAASJL}{\bkmkend AAAAAAASJL}
01038 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \\}\par
{\bkmkstart AAAAAAASJM}{\bkmkend AAAAAAASJM}
01039 {\cf21        __attribute__((no_sanitize_address))}\par
{\bkmkstart AAAAAAASJN}{\bkmkend AAAAAAASJN}
01040 {\cf21 # else}\par
{\bkmkstart AAAAAAASJO}{\bkmkend AAAAAAASJO}
01041 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_}\par
{\bkmkstart AAAAAAASJP}{\bkmkend AAAAAAASJP}
01042 {\cf21 # endif  }{\cf20 // __has_feature(address_sanitizer)}\par
{\bkmkstart AAAAAAASJQ}{\bkmkend AAAAAAASJQ}
01043 {\cf21 #else}\par
{\bkmkstart AAAAAAASJR}{\bkmkend AAAAAAASJR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASJS" }{}}{\fldrslt {\cs37\ul\cf2 01044}}}
 {\cf21 # define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_}\par
{\bkmkstart AAAAAAASJT}{\bkmkend AAAAAAASJT}
01045 {\cf21 #endif  }{\cf20 // __clang__}\par
{\bkmkstart AAAAAAASJU}{\bkmkend AAAAAAASJU}
01046 \par
{\bkmkstart AAAAAAASJV}{\bkmkend AAAAAAASJV}
01047 {\cf20 // A function level attribute to disable ThreadSanitizer instrumentation.}\par
{\bkmkstart AAAAAAASJW}{\bkmkend AAAAAAASJW}
01048 {\cf21 #if defined(__clang__)}\par
{\bkmkstart AAAAAAASJX}{\bkmkend AAAAAAASJX}
01049 {\cf21 # if __has_feature(thread_sanitizer)}\par
{\bkmkstart AAAAAAASJY}{\bkmkend AAAAAAASJY}
01050 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ \\}\par
{\bkmkstart AAAAAAASJZ}{\bkmkend AAAAAAASJZ}
01051 {\cf21        __attribute__((no_sanitize_thread))}\par
{\bkmkstart AAAAAAASKA}{\bkmkend AAAAAAASKA}
01052 {\cf21 # else}\par
{\bkmkstart AAAAAAASKB}{\bkmkend AAAAAAASKB}
01053 {\cf21 #  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_}\par
{\bkmkstart AAAAAAASKC}{\bkmkend AAAAAAASKC}
01054 {\cf21 # endif  }{\cf20 // __has_feature(thread_sanitizer)}\par
{\bkmkstart AAAAAAASKD}{\bkmkend AAAAAAASKD}
01055 {\cf21 #else}\par
{\bkmkstart AAAAAAASKE}{\bkmkend AAAAAAASKE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASKF" }{}}{\fldrslt {\cs37\ul\cf2 01056}}}
 {\cf21 # define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_}\par
{\bkmkstart AAAAAAASKG}{\bkmkend AAAAAAASKG}
01057 {\cf21 #endif  }{\cf20 // __clang__}\par
{\bkmkstart AAAAAAASKH}{\bkmkend AAAAAAASKH}
01058 \par
{\bkmkstart AAAAAAASKI}{\bkmkend AAAAAAASKI}
01059 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZQ" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
 \{\par
{\bkmkstart AAAAAAASKJ}{\bkmkend AAAAAAASKJ}
01060 \par
{\bkmkstart AAAAAAASKK}{\bkmkend AAAAAAASKK}
01061 {\cf17 class }Message;\par
{\bkmkstart AAAAAAASKL}{\bkmkend AAAAAAASKL}
01062 \par
{\bkmkstart AAAAAAASKM}{\bkmkend AAAAAAASKM}
01063 {\cf21 #if defined(GTEST_TUPLE_NAMESPACE_)}\par
{\bkmkstart AAAAAAASKN}{\bkmkend AAAAAAASKN}
01064 {\cf20 // Import tuple and friends into the ::testing namespace.}\par
{\bkmkstart AAAAAAASKO}{\bkmkend AAAAAAASKO}
01065 {\cf20 // It is part of our interface, having them in ::testing allows us to change}\par
{\bkmkstart AAAAAAASKP}{\bkmkend AAAAAAASKP}
01066 {\cf20 // their types as needed.}\par
{\bkmkstart AAAAAAASKQ}{\bkmkend AAAAAAASKQ}
01067 {\cf17 using} GTEST_TUPLE_NAMESPACE_::get;\par
{\bkmkstart AAAAAAASKR}{\bkmkend AAAAAAASKR}
01068 {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASKS" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_TUPLE_NAMESPACE_::make_tuple}}}
;\par
{\bkmkstart AAAAAAASKT}{\bkmkend AAAAAAASKT}
01069 {\cf17 using} GTEST_TUPLE_NAMESPACE_::tuple;\par
{\bkmkstart AAAAAAASKU}{\bkmkend AAAAAAASKU}
01070 {\cf17 using} GTEST_TUPLE_NAMESPACE_::tuple_size;\par
{\bkmkstart AAAAAAASKV}{\bkmkend AAAAAAASKV}
01071 {\cf17 using} GTEST_TUPLE_NAMESPACE_::tuple_element;\par
{\bkmkstart AAAAAAASKW}{\bkmkend AAAAAAASKW}
01072 {\cf21 #endif  }{\cf20 // defined(GTEST_TUPLE_NAMESPACE_)}\par
{\bkmkstart AAAAAAASKX}{\bkmkend AAAAAAASKX}
01073 \par
{\bkmkstart AAAAAAASKY}{\bkmkend AAAAAAASKY}
01074 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAAASKZ}{\bkmkend AAAAAAASKZ}
01075 \par
{\bkmkstart AAAAAAASLA}{\bkmkend AAAAAAASLA}
01076 {\cf20 // A secret type that Google Test users don't know about.  It has no}\par
{\bkmkstart AAAAAAASLB}{\bkmkend AAAAAAASLB}
01077 {\cf20 // definition on purpose.  Therefore it's impossible to create a}\par
{\bkmkstart AAAAAAASLC}{\bkmkend AAAAAAASLC}
01078 {\cf20 // Secret object, which is what we want.}\par
{\bkmkstart AAAAAAASLD}{\bkmkend AAAAAAASLD}
01079 {\cf17 class }Secret;\par
{\bkmkstart AAAAAAASLE}{\bkmkend AAAAAAASLE}
01080 \par
{\bkmkstart AAAAAAASLF}{\bkmkend AAAAAAASLF}
01081 {\cf20 // The GTEST_COMPILE_ASSERT_ macro can be used to verify that a compile time}\par
{\bkmkstart AAAAAAASLG}{\bkmkend AAAAAAASLG}
01082 {\cf20 // expression is true. For example, you could use it to verify the}\par
{\bkmkstart AAAAAAASLH}{\bkmkend AAAAAAASLH}
01083 {\cf20 // size of a static array:}\par
{\bkmkstart AAAAAAASLI}{\bkmkend AAAAAAASLI}
01084 {\cf20 //}\par
{\bkmkstart AAAAAAASLJ}{\bkmkend AAAAAAASLJ}
01085 {\cf20 //   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,}\par
{\bkmkstart AAAAAAASLK}{\bkmkend AAAAAAASLK}
01086 {\cf20 //                         names_incorrect_size);}\par
{\bkmkstart AAAAAAASLL}{\bkmkend AAAAAAASLL}
01087 {\cf20 //}\par
{\bkmkstart AAAAAAASLM}{\bkmkend AAAAAAASLM}
01088 {\cf20 // or to make sure a struct is smaller than a certain size:}\par
{\bkmkstart AAAAAAASLN}{\bkmkend AAAAAAASLN}
01089 {\cf20 //}\par
{\bkmkstart AAAAAAASLO}{\bkmkend AAAAAAASLO}
01090 {\cf20 //   GTEST_COMPILE_ASSERT_(sizeof(foo) < 128, foo_too_large);}\par
{\bkmkstart AAAAAAASLP}{\bkmkend AAAAAAASLP}
01091 {\cf20 //}\par
{\bkmkstart AAAAAAASLQ}{\bkmkend AAAAAAASLQ}
01092 {\cf20 // The second argument to the macro is the name of the variable. If}\par
{\bkmkstart AAAAAAASLR}{\bkmkend AAAAAAASLR}
01093 {\cf20 // the expression is false, most compilers will issue a warning/error}\par
{\bkmkstart AAAAAAASLS}{\bkmkend AAAAAAASLS}
01094 {\cf20 // containing the name of the variable.}\par
{\bkmkstart AAAAAAASLT}{\bkmkend AAAAAAASLT}
01095 \par
{\bkmkstart AAAAAAASLU}{\bkmkend AAAAAAASLU}
01096 {\cf21 #if GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASLV}{\bkmkend AAAAAAASLV}
01097 {\cf21 # define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)}\par
{\bkmkstart AAAAAAASLW}{\bkmkend AAAAAAASLW}
01098 {\cf21 #else  }{\cf20 // !GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASLX}{\bkmkend AAAAAAASLX}
01099 {\cf17 template} <{\cf18 bool}>\par
{\bkmkstart AAAAAAASLY}{\bkmkend AAAAAAASLY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASLZ" }{}}{\fldrslt {\cs37\ul\cf2 01100}}}
   {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASLZ" }{}}{\fldrslt {\cs37\ul\cf2 CompileAssert}}}
 \{\par
{\bkmkstart AAAAAAASMA}{\bkmkend AAAAAAASMA}
01101 \};\par
{\bkmkstart AAAAAAASMB}{\bkmkend AAAAAAASMB}
01102 \par
{\bkmkstart AAAAAAASMC}{\bkmkend AAAAAAASMC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASMD" }{}}{\fldrslt {\cs37\ul\cf2 01103}}}
 {\cf21 # define GTEST_COMPILE_ASSERT_(expr, msg) \\}\par
{\bkmkstart AAAAAAASME}{\bkmkend AAAAAAASME}
01104 {\cf21   typedef ::testing::internal::CompileAssert<(static_cast<bool>(expr))> \\}\par
{\bkmkstart AAAAAAASMF}{\bkmkend AAAAAAASMF}
01105 {\cf21       msg[static_cast<bool>(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_}\par
{\bkmkstart AAAAAAASMG}{\bkmkend AAAAAAASMG}
01106 {\cf21 #endif  }{\cf20 // !GTEST_LANG_CXX11}\par
{\bkmkstart AAAAAAASMH}{\bkmkend AAAAAAASMH}
01107 \par
{\bkmkstart AAAAAAASMI}{\bkmkend AAAAAAASMI}
01108 {\cf20 // Implementation details of GTEST_COMPILE_ASSERT_:}\par
{\bkmkstart AAAAAAASMJ}{\bkmkend AAAAAAASMJ}
01109 {\cf20 //}\par
{\bkmkstart AAAAAAASMK}{\bkmkend AAAAAAASMK}
01110 {\cf20 // (In C++11, we simply use static_assert instead of the following)}\par
{\bkmkstart AAAAAAASML}{\bkmkend AAAAAAASML}
01111 {\cf20 //}\par
{\bkmkstart AAAAAAASMM}{\bkmkend AAAAAAASMM}
01112 {\cf20 // - GTEST_COMPILE_ASSERT_ works by defining an array type that has -1}\par
{\bkmkstart AAAAAAASMN}{\bkmkend AAAAAAASMN}
01113 {\cf20 //   elements (and thus is invalid) when the expression is false.}\par
{\bkmkstart AAAAAAASMO}{\bkmkend AAAAAAASMO}
01114 {\cf20 //}\par
{\bkmkstart AAAAAAASMP}{\bkmkend AAAAAAASMP}
01115 {\cf20 // - The simpler definition}\par
{\bkmkstart AAAAAAASMQ}{\bkmkend AAAAAAASMQ}
01116 {\cf20 //}\par
{\bkmkstart AAAAAAASMR}{\bkmkend AAAAAAASMR}
01117 {\cf20 //    #define GTEST_COMPILE_ASSERT_(expr, msg) typedef char msg[(expr) ? 1 : -1]}\par
{\bkmkstart AAAAAAASMS}{\bkmkend AAAAAAASMS}
01118 {\cf20 //}\par
{\bkmkstart AAAAAAASMT}{\bkmkend AAAAAAASMT}
01119 {\cf20 //   does not work, as gcc supports variable-length arrays whose sizes}\par
{\bkmkstart AAAAAAASMU}{\bkmkend AAAAAAASMU}
01120 {\cf20 //   are determined at run-time (this is gcc's extension and not part}\par
{\bkmkstart AAAAAAASMV}{\bkmkend AAAAAAASMV}
01121 {\cf20 //   of the C++ standard).  As a result, gcc fails to reject the}\par
{\bkmkstart AAAAAAASMW}{\bkmkend AAAAAAASMW}
01122 {\cf20 //   following code with the simple definition:}\par
{\bkmkstart AAAAAAASMX}{\bkmkend AAAAAAASMX}
01123 {\cf20 //}\par
{\bkmkstart AAAAAAASMY}{\bkmkend AAAAAAASMY}
01124 {\cf20 //     int foo;}\par
{\bkmkstart AAAAAAASMZ}{\bkmkend AAAAAAASMZ}
01125 {\cf20 //     GTEST_COMPILE_ASSERT_(foo, msg); // not supposed to compile as foo is}\par
{\bkmkstart AAAAAAASNA}{\bkmkend AAAAAAASNA}
01126 {\cf20 //                                      // not a compile-time constant.}\par
{\bkmkstart AAAAAAASNB}{\bkmkend AAAAAAASNB}
01127 {\cf20 //}\par
{\bkmkstart AAAAAAASNC}{\bkmkend AAAAAAASNC}
01128 {\cf20 // - By using the type CompileAssert<(bool(expr))>, we ensures that}\par
{\bkmkstart AAAAAAASND}{\bkmkend AAAAAAASND}
01129 {\cf20 //   expr is a compile-time constant.  (Template arguments must be}\par
{\bkmkstart AAAAAAASNE}{\bkmkend AAAAAAASNE}
01130 {\cf20 //   determined at compile-time.)}\par
{\bkmkstart AAAAAAASNF}{\bkmkend AAAAAAASNF}
01131 {\cf20 //}\par
{\bkmkstart AAAAAAASNG}{\bkmkend AAAAAAASNG}
01132 {\cf20 // - The outter parentheses in CompileAssert<(bool(expr))> are necessary}\par
{\bkmkstart AAAAAAASNH}{\bkmkend AAAAAAASNH}
01133 {\cf20 //   to work around a bug in gcc 3.4.4 and 4.0.1.  If we had written}\par
{\bkmkstart AAAAAAASNI}{\bkmkend AAAAAAASNI}
01134 {\cf20 //}\par
{\bkmkstart AAAAAAASNJ}{\bkmkend AAAAAAASNJ}
01135 {\cf20 //     CompileAssert<bool(expr)>}\par
{\bkmkstart AAAAAAASNK}{\bkmkend AAAAAAASNK}
01136 {\cf20 //}\par
{\bkmkstart AAAAAAASNL}{\bkmkend AAAAAAASNL}
01137 {\cf20 //   instead, these compilers will refuse to compile}\par
{\bkmkstart AAAAAAASNM}{\bkmkend AAAAAAASNM}
01138 {\cf20 //}\par
{\bkmkstart AAAAAAASNN}{\bkmkend AAAAAAASNN}
01139 {\cf20 //     GTEST_COMPILE_ASSERT_(5 > 0, some_message);}\par
{\bkmkstart AAAAAAASNO}{\bkmkend AAAAAAASNO}
01140 {\cf20 //}\par
{\bkmkstart AAAAAAASNP}{\bkmkend AAAAAAASNP}
01141 {\cf20 //   (They seem to think the ">" in "5 > 0" marks the end of the}\par
{\bkmkstart AAAAAAASNQ}{\bkmkend AAAAAAASNQ}
01142 {\cf20 //   template argument list.)}\par
{\bkmkstart AAAAAAASNR}{\bkmkend AAAAAAASNR}
01143 {\cf20 //}\par
{\bkmkstart AAAAAAASNS}{\bkmkend AAAAAAASNS}
01144 {\cf20 // - The array size is (bool(expr) ? 1 : -1), instead of simply}\par
{\bkmkstart AAAAAAASNT}{\bkmkend AAAAAAASNT}
01145 {\cf20 //}\par
{\bkmkstart AAAAAAASNU}{\bkmkend AAAAAAASNU}
01146 {\cf20 //     ((expr) ? 1 : -1).}\par
{\bkmkstart AAAAAAASNV}{\bkmkend AAAAAAASNV}
01147 {\cf20 //}\par
{\bkmkstart AAAAAAASNW}{\bkmkend AAAAAAASNW}
01148 {\cf20 //   This is to avoid running into a bug in MS VC 7.1, which}\par
{\bkmkstart AAAAAAASNX}{\bkmkend AAAAAAASNX}
01149 {\cf20 //   causes ((0.0) ? 1 : -1) to incorrectly evaluate to 1.}\par
{\bkmkstart AAAAAAASNY}{\bkmkend AAAAAAASNY}
01150 \par
{\bkmkstart AAAAAAASNZ}{\bkmkend AAAAAAASNZ}
01151 {\cf20 // StaticAssertTypeEqHelper is used by StaticAssertTypeEq defined in gtest.h.}\par
{\bkmkstart AAAAAAASOA}{\bkmkend AAAAAAASOA}
01152 {\cf20 //}\par
{\bkmkstart AAAAAAASOB}{\bkmkend AAAAAAASOB}
01153 {\cf20 // This template is declared, but intentionally undefined.}\par
{\bkmkstart AAAAAAASOC}{\bkmkend AAAAAAASOC}
01154 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAASOD}{\bkmkend AAAAAAASOD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVO" }{}}{\fldrslt {\cs37\ul\cf2 01155}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVO" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEqHelper}}}
;\par
{\bkmkstart AAAAAAASOE}{\bkmkend AAAAAAASOE}
01156 \par
{\bkmkstart AAAAAAASOF}{\bkmkend AAAAAAASOF}
01157 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAASOG}{\bkmkend AAAAAAASOG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOH" }{}}{\fldrslt {\cs37\ul\cf2 01158}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVO" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEqHelper}}}
<T, T> \{\par
{\bkmkstart AAAAAAASOI}{\bkmkend AAAAAAASOI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOJ" }{}}{\fldrslt {\cs37\ul\cf2 01159}}}
   {\cf17 enum} \{ value = {\cf17 true} \};\par
{\bkmkstart AAAAAAASOK}{\bkmkend AAAAAAASOK}
01160 \};\par
{\bkmkstart AAAAAAASOL}{\bkmkend AAAAAAASOL}
01161 \par
{\bkmkstart AAAAAAASOM}{\bkmkend AAAAAAASOM}
01162 {\cf20 // Same as std::is_same<>.}\par
{\bkmkstart AAAAAAASON}{\bkmkend AAAAAAASON}
01163 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
{\bkmkstart AAAAAAASOO}{\bkmkend AAAAAAASOO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOP" }{}}{\fldrslt {\cs37\ul\cf2 01164}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOP" }{}}{\fldrslt {\cs37\ul\cf2 IsSame}}}
 \{\par
{\bkmkstart AAAAAAASOQ}{\bkmkend AAAAAAASOQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOR" }{}}{\fldrslt {\cs37\ul\cf2 01165}}}
   {\cf17 enum} \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOR" }{}}{\fldrslt {\cs37\ul\cf2 value}}}
 = {\cf17 false} \};\par
{\bkmkstart AAAAAAASOS}{\bkmkend AAAAAAASOS}
01166 \};\par
{\bkmkstart AAAAAAASOT}{\bkmkend AAAAAAASOT}
01167 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAASOU}{\bkmkend AAAAAAASOU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOV" }{}}{\fldrslt {\cs37\ul\cf2 01168}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOP" }{}}{\fldrslt {\cs37\ul\cf2 IsSame}}}
<T, T> \{\par
{\bkmkstart AAAAAAASOW}{\bkmkend AAAAAAASOW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOX" }{}}{\fldrslt {\cs37\ul\cf2 01169}}}
   {\cf17 enum} \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASOR" }{}}{\fldrslt {\cs37\ul\cf2 value}}}
 = {\cf17 true} \};\par
{\bkmkstart AAAAAAASOY}{\bkmkend AAAAAAASOY}
01170 \};\par
{\bkmkstart AAAAAAASOZ}{\bkmkend AAAAAAASOZ}
01171 \par
{\bkmkstart AAAAAAASPA}{\bkmkend AAAAAAASPA}
01172 {\cf20 // Evaluates to the number of elements in 'array'.}\par
{\bkmkstart AAAAAAASPB}{\bkmkend AAAAAAASPB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASPC" }{}}{\fldrslt {\cs37\ul\cf2 01173}}}
 {\cf21 #define GTEST_ARRAY_SIZE_(array) (sizeof(array) / sizeof(array[0]))}\par
{\bkmkstart AAAAAAASPD}{\bkmkend AAAAAAASPD}
01174 \par
{\bkmkstart AAAAAAASPE}{\bkmkend AAAAAAASPE}
01175 {\cf21 #if GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASPF}{\bkmkend AAAAAAASPF}
01176 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 ::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 string}}}
;\par
{\bkmkstart AAAAAAASPG}{\bkmkend AAAAAAASPG}
01177 {\cf21 #else}\par
{\bkmkstart AAAAAAASPH}{\bkmkend AAAAAAASPH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 01178}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 ::std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 string}}}
;\par
{\bkmkstart AAAAAAASPI}{\bkmkend AAAAAAASPI}
01179 {\cf21 #endif  }{\cf20 // GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASPJ}{\bkmkend AAAAAAASPJ}
01180 \par
{\bkmkstart AAAAAAASPK}{\bkmkend AAAAAAASPK}
01181 {\cf21 #if GTEST_HAS_GLOBAL_WSTRING}\par
{\bkmkstart AAAAAAASPL}{\bkmkend AAAAAAASPL}
01182 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 ::wstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 wstring}}}
;\par
{\bkmkstart AAAAAAASPM}{\bkmkend AAAAAAASPM}
01183 {\cf21 #elif GTEST_HAS_STD_WSTRING}\par
{\bkmkstart AAAAAAASPN}{\bkmkend AAAAAAASPN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 01184}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 ::std::wstring}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 wstring}}}
;\par
{\bkmkstart AAAAAAASPO}{\bkmkend AAAAAAASPO}
01185 {\cf21 #endif  }{\cf20 // GTEST_HAS_GLOBAL_WSTRING}\par
{\bkmkstart AAAAAAASPP}{\bkmkend AAAAAAASPP}
01186 \par
{\bkmkstart AAAAAAASPQ}{\bkmkend AAAAAAASPQ}
01187 {\cf20 // A helper for suppressing warnings on constant condition.  It just}\par
{\bkmkstart AAAAAAASPR}{\bkmkend AAAAAAASPR}
01188 {\cf20 // returns 'condition'.}\par
{\bkmkstart AAAAAAASPS}{\bkmkend AAAAAAASPS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASPT" }{}}{\fldrslt {\cs37\ul\cf2 01189}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASPT" }{}}{\fldrslt {\cs37\ul\cf2 IsTrue}}}
({\cf18 bool} condition);\par
{\bkmkstart AAAAAAASPU}{\bkmkend AAAAAAASPU}
01190 \par
{\bkmkstart AAAAAAASPV}{\bkmkend AAAAAAASPV}
01191 {\cf20 // Defines scoped_ptr.}\par
{\bkmkstart AAAAAAASPW}{\bkmkend AAAAAAASPW}
01192 \par
{\bkmkstart AAAAAAASPX}{\bkmkend AAAAAAASPX}
01193 {\cf20 // This implementation of scoped_ptr is PARTIAL - it only contains}\par
{\bkmkstart AAAAAAASPY}{\bkmkend AAAAAAASPY}
01194 {\cf20 // enough stuff to satisfy Google Test's need.}\par
{\bkmkstart AAAAAAASPZ}{\bkmkend AAAAAAASPZ}
01195 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAASQA}{\bkmkend AAAAAAASQA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 01196}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 scoped_ptr}}}
 \{\par
{\bkmkstart AAAAAAASQB}{\bkmkend AAAAAAASQB}
01197  {\cf17 public}:\par
{\bkmkstart AAAAAAASQC}{\bkmkend AAAAAAASQC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQD" }{}}{\fldrslt {\cs37\ul\cf2 01198}}}
   {\cf17 typedef} T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQD" }{}}{\fldrslt {\cs37\ul\cf2 element_type}}}
;\par
{\bkmkstart AAAAAAASQE}{\bkmkend AAAAAAASQE}
01199 \par
{\bkmkstart AAAAAAASQF}{\bkmkend AAAAAAASQF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQG" }{}}{\fldrslt {\cs37\ul\cf2 01200}}}
   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQG" }{}}{\fldrslt {\cs37\ul\cf2 scoped_ptr}}}
(T* p = NULL) : ptr_(p) \{\}\par
{\bkmkstart AAAAAAASQH}{\bkmkend AAAAAAASQH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQI" }{}}{\fldrslt {\cs37\ul\cf2 01201}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQI" }{}}{\fldrslt {\cs37\ul\cf2 ~scoped_ptr}}}
() \{ {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQJ" }{}}{\fldrslt {\cs37\ul\cf2 reset}}}
(); \}\par
{\bkmkstart AAAAAAASQK}{\bkmkend AAAAAAASQK}
01202 \par
{\bkmkstart AAAAAAASQL}{\bkmkend AAAAAAASQL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQM" }{}}{\fldrslt {\cs37\ul\cf2 01203}}}
   T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQM" }{}}{\fldrslt {\cs37\ul\cf2 operator*}}}
(){\cf17  const }\{ {\cf19 return} *ptr_; \}\par
{\bkmkstart AAAAAAASQN}{\bkmkend AAAAAAASQN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQO" }{}}{\fldrslt {\cs37\ul\cf2 01204}}}
   T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQO" }{}}{\fldrslt {\cs37\ul\cf2 operator->}}}
(){\cf17  const }\{ {\cf19 return} ptr_; \}\par
{\bkmkstart AAAAAAASQP}{\bkmkend AAAAAAASQP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQQ" }{}}{\fldrslt {\cs37\ul\cf2 01205}}}
   T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQQ" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
(){\cf17  const }\{ {\cf19 return} ptr_; \}\par
{\bkmkstart AAAAAAASQR}{\bkmkend AAAAAAASQR}
01206 \par
{\bkmkstart AAAAAAASQS}{\bkmkend AAAAAAASQS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQT" }{}}{\fldrslt {\cs37\ul\cf2 01207}}}
   T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQT" }{}}{\fldrslt {\cs37\ul\cf2 release}}}
() \{\par
{\bkmkstart AAAAAAASQU}{\bkmkend AAAAAAASQU}
01208     T* {\cf17 const} ptr = ptr_;\par
{\bkmkstart AAAAAAASQV}{\bkmkend AAAAAAASQV}
01209     ptr_ = NULL;\par
{\bkmkstart AAAAAAASQW}{\bkmkend AAAAAAASQW}
01210     {\cf19 return} ptr;\par
{\bkmkstart AAAAAAASQX}{\bkmkend AAAAAAASQX}
01211   \}\par
{\bkmkstart AAAAAAASQY}{\bkmkend AAAAAAASQY}
01212 \par
{\bkmkstart AAAAAAASQZ}{\bkmkend AAAAAAASQZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQJ" }{}}{\fldrslt {\cs37\ul\cf2 01213}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASQJ" }{}}{\fldrslt {\cs37\ul\cf2 reset}}}
(T* p = NULL) \{\par
{\bkmkstart AAAAAAASRA}{\bkmkend AAAAAAASRA}
01214     {\cf19 if} (p != ptr_) \{\par
{\bkmkstart AAAAAAASRB}{\bkmkend AAAAAAASRB}
01215       {\cf19 if} ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASPT" }{}}{\fldrslt {\cs37\ul\cf2 IsTrue}}}
({\cf17 sizeof}(T) > 0)) \{  {\cf20 // Makes sure T is a complete type.}\par
{\bkmkstart AAAAAAASRC}{\bkmkend AAAAAAASRC}
01216         {\cf17 delete} ptr_;\par
{\bkmkstart AAAAAAASRD}{\bkmkend AAAAAAASRD}
01217       \}\par
{\bkmkstart AAAAAAASRE}{\bkmkend AAAAAAASRE}
01218       ptr_ = p;\par
{\bkmkstart AAAAAAASRF}{\bkmkend AAAAAAASRF}
01219     \}\par
{\bkmkstart AAAAAAASRG}{\bkmkend AAAAAAASRG}
01220   \}\par
{\bkmkstart AAAAAAASRH}{\bkmkend AAAAAAASRH}
01221 \par
{\bkmkstart AAAAAAASRI}{\bkmkend AAAAAAASRI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASRJ" }{}}{\fldrslt {\cs37\ul\cf2 01222}}}
   {\cf17 friend} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASRJ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 scoped_ptr}}}
& a, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 scoped_ptr}}}
& b) \{\par
{\bkmkstart AAAAAAASRK}{\bkmkend AAAAAAASRK}
01223     {\cf17 using} std::swap;\par
{\bkmkstart AAAAAAASRL}{\bkmkend AAAAAAASRL}
01224     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASRJ" }{}}{\fldrslt {\cs37\ul\cf2 swap}}}
(a.ptr_, b.ptr_);\par
{\bkmkstart AAAAAAASRM}{\bkmkend AAAAAAASRM}
01225   \}\par
{\bkmkstart AAAAAAASRN}{\bkmkend AAAAAAASRN}
01226 \par
{\bkmkstart AAAAAAASRO}{\bkmkend AAAAAAASRO}
01227  {\cf17 private}:\par
{\bkmkstart AAAAAAASRP}{\bkmkend AAAAAAASRP}
01228   T* ptr_;\par
{\bkmkstart AAAAAAASRQ}{\bkmkend AAAAAAASRQ}
01229 \par
{\bkmkstart AAAAAAASRR}{\bkmkend AAAAAAASRR}
01230   GTEST_DISALLOW_COPY_AND_ASSIGN_({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 scoped_ptr}}}
);\par
{\bkmkstart AAAAAAASRS}{\bkmkend AAAAAAASRS}
01231 \};\par
{\bkmkstart AAAAAAASRT}{\bkmkend AAAAAAASRT}
01232 \par
{\bkmkstart AAAAAAASRU}{\bkmkend AAAAAAASRU}
01233 {\cf20 // Defines RE.}\par
{\bkmkstart AAAAAAASRV}{\bkmkend AAAAAAASRV}
01234 \par
{\bkmkstart AAAAAAASRW}{\bkmkend AAAAAAASRW}
01235 {\cf21 #if GTEST_USES_PCRE}\par
{\bkmkstart AAAAAAASRX}{\bkmkend AAAAAAASRX}
01236 {\cf20 // if used, PCRE is injected by custom/gtest-port.h}\par
{\bkmkstart AAAAAAASRY}{\bkmkend AAAAAAASRY}
01237 {\cf21 #elif GTEST_USES_POSIX_RE || GTEST_USES_SIMPLE_RE}\par
{\bkmkstart AAAAAAASRZ}{\bkmkend AAAAAAASRZ}
01238 \par
{\bkmkstart AAAAAAASSA}{\bkmkend AAAAAAASSA}
01239 {\cf20 // A simple C++ wrapper for <regex.h>.  It uses the POSIX Extended}\par
{\bkmkstart AAAAAAASSB}{\bkmkend AAAAAAASSB}
01240 {\cf20 // Regular Expression syntax.}\par
{\bkmkstart AAAAAAASSC}{\bkmkend AAAAAAASSC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 01241}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
 \{\par
{\bkmkstart AAAAAAASSE}{\bkmkend AAAAAAASSE}
01242  {\cf17 public}:\par
{\bkmkstart AAAAAAASSF}{\bkmkend AAAAAAASSF}
01243   {\cf20 // A copy constructor is required by the Standard to initialize object}\par
{\bkmkstart AAAAAAASSG}{\bkmkend AAAAAAASSG}
01244   {\cf20 // references from r-values.}\par
{\bkmkstart AAAAAAASSH}{\bkmkend AAAAAAASSH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSI" }{}}{\fldrslt {\cs37\ul\cf2 01245}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSI" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& other) \{ Init(other.{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSJ" }{}}{\fldrslt {\cs37\ul\cf2 pattern}}}
()); \}\par
{\bkmkstart AAAAAAASSK}{\bkmkend AAAAAAASSK}
01246 \par
{\bkmkstart AAAAAAASSL}{\bkmkend AAAAAAASSL}
01247   {\cf20 // Constructs an RE from a string.}\par
{\bkmkstart AAAAAAASSM}{\bkmkend AAAAAAASSM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSN" }{}}{\fldrslt {\cs37\ul\cf2 01248}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSN" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& regex) \{ Init(regex.c_str()); \}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASSO}{\bkmkend AAAAAAASSO}
01249 \par
{\bkmkstart AAAAAAASSP}{\bkmkend AAAAAAASSP}
01250 {\cf21 # if GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASSQ}{\bkmkend AAAAAAASSQ}
01251 \par
{\bkmkstart AAAAAAASSR}{\bkmkend AAAAAAASSR}
01252   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::string}}}
& regex) \{ Init(regex.c_str()); \}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASSS}{\bkmkend AAAAAAASSS}
01253 \par
{\bkmkstart AAAAAAASST}{\bkmkend AAAAAAASST}
01254 {\cf21 # endif  }{\cf20 // GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASSU}{\bkmkend AAAAAAASSU}
01255 \par
{\bkmkstart AAAAAAASSV}{\bkmkend AAAAAAASSV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSW" }{}}{\fldrslt {\cs37\ul\cf2 01256}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSW" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
({\cf17 const} {\cf18 char}* regex) \{ Init(regex); \}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASSX}{\bkmkend AAAAAAASSX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSY" }{}}{\fldrslt {\cs37\ul\cf2 01257}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSY" }{}}{\fldrslt {\cs37\ul\cf2 ~RE}}}
();\par
{\bkmkstart AAAAAAASSZ}{\bkmkend AAAAAAASSZ}
01258 \par
{\bkmkstart AAAAAAASTA}{\bkmkend AAAAAAASTA}
01259   {\cf20 // Returns the string representation of the regex.}\par
{\bkmkstart AAAAAAASTB}{\bkmkend AAAAAAASTB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSJ" }{}}{\fldrslt {\cs37\ul\cf2 01260}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSJ" }{}}{\fldrslt {\cs37\ul\cf2 pattern}}}
(){\cf17  const }\{ {\cf19 return} pattern_; \}\par
{\bkmkstart AAAAAAASTC}{\bkmkend AAAAAAASTC}
01261 \par
{\bkmkstart AAAAAAASTD}{\bkmkend AAAAAAASTD}
01262   {\cf20 // FullMatch(str, re) returns true iff regular expression re matches}\par
{\bkmkstart AAAAAAASTE}{\bkmkend AAAAAAASTE}
01263   {\cf20 // the entire str.}\par
{\bkmkstart AAAAAAASTF}{\bkmkend AAAAAAASTF}
01264   {\cf20 // PartialMatch(str, re) returns true iff regular expression re}\par
{\bkmkstart AAAAAAASTG}{\bkmkend AAAAAAASTG}
01265   {\cf20 // matches a substring of str (including str itself).}\par
{\bkmkstart AAAAAAASTH}{\bkmkend AAAAAAASTH}
01266   {\cf20 //}\par
{\bkmkstart AAAAAAASTI}{\bkmkend AAAAAAASTI}
01267   {\cf20 // FIXME: make FullMatch() and PartialMatch() work}\par
{\bkmkstart AAAAAAASTJ}{\bkmkend AAAAAAASTJ}
01268   {\cf20 // when str contains NUL characters.}\par
{\bkmkstart AAAAAAASTK}{\bkmkend AAAAAAASTK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASTL" }{}}{\fldrslt {\cs37\ul\cf2 01269}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASTL" }{}}{\fldrslt {\cs37\ul\cf2 FullMatch}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& re) \{\par
{\bkmkstart AAAAAAASTM}{\bkmkend AAAAAAASTM}
01270     {\cf19 return} FullMatch(str.c_str(), re);\par
{\bkmkstart AAAAAAASTN}{\bkmkend AAAAAAASTN}
01271   \}\par
{\bkmkstart AAAAAAASTO}{\bkmkend AAAAAAASTO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASTP" }{}}{\fldrslt {\cs37\ul\cf2 01272}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASTP" }{}}{\fldrslt {\cs37\ul\cf2 PartialMatch}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& re) \{\par
{\bkmkstart AAAAAAASTQ}{\bkmkend AAAAAAASTQ}
01273     {\cf19 return} PartialMatch(str.c_str(), re);\par
{\bkmkstart AAAAAAASTR}{\bkmkend AAAAAAASTR}
01274   \}\par
{\bkmkstart AAAAAAASTS}{\bkmkend AAAAAAASTS}
01275 \par
{\bkmkstart AAAAAAASTT}{\bkmkend AAAAAAASTT}
01276 {\cf21 # if GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASTU}{\bkmkend AAAAAAASTU}
01277 \par
{\bkmkstart AAAAAAASTV}{\bkmkend AAAAAAASTV}
01278   {\cf17 static} {\cf18 bool} FullMatch({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::string}}}
& str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& re) \{\par
{\bkmkstart AAAAAAASTW}{\bkmkend AAAAAAASTW}
01279     {\cf19 return} FullMatch(str.c_str(), re);\par
{\bkmkstart AAAAAAASTX}{\bkmkend AAAAAAASTX}
01280   \}\par
{\bkmkstart AAAAAAASTY}{\bkmkend AAAAAAASTY}
01281   {\cf17 static} {\cf18 bool} PartialMatch({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::string}}}
& str, {\cf17 const} RE& re) \{\par
{\bkmkstart AAAAAAASTZ}{\bkmkend AAAAAAASTZ}
01282     {\cf19 return} PartialMatch(str.c_str(), re);\par
{\bkmkstart AAAAAAASUA}{\bkmkend AAAAAAASUA}
01283   \}\par
{\bkmkstart AAAAAAASUB}{\bkmkend AAAAAAASUB}
01284 \par
{\bkmkstart AAAAAAASUC}{\bkmkend AAAAAAASUC}
01285 {\cf21 # endif  }{\cf20 // GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAASUD}{\bkmkend AAAAAAASUD}
01286 \par
{\bkmkstart AAAAAAASUE}{\bkmkend AAAAAAASUE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASUF" }{}}{\fldrslt {\cs37\ul\cf2 01287}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASUF" }{}}{\fldrslt {\cs37\ul\cf2 FullMatch}}}
({\cf17 const} {\cf18 char}* str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& re);\par
{\bkmkstart AAAAAAASUG}{\bkmkend AAAAAAASUG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASUH" }{}}{\fldrslt {\cs37\ul\cf2 01288}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASUH" }{}}{\fldrslt {\cs37\ul\cf2 PartialMatch}}}
({\cf17 const} {\cf18 char}* str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
& re);\par
{\bkmkstart AAAAAAASUI}{\bkmkend AAAAAAASUI}
01289 \par
{\bkmkstart AAAAAAASUJ}{\bkmkend AAAAAAASUJ}
01290  {\cf17 private}:\par
{\bkmkstart AAAAAAASUK}{\bkmkend AAAAAAASUK}
01291   {\cf18 void} Init({\cf17 const} {\cf18 char}* regex);\par
{\bkmkstart AAAAAAASUL}{\bkmkend AAAAAAASUL}
01292 \par
{\bkmkstart AAAAAAASUM}{\bkmkend AAAAAAASUM}
01293   {\cf20 // We use a const char* instead of an std::string, as Google Test used to be}\par
{\bkmkstart AAAAAAASUN}{\bkmkend AAAAAAASUN}
01294   {\cf20 // used where std::string is not available.  FIXME: change to}\par
{\bkmkstart AAAAAAASUO}{\bkmkend AAAAAAASUO}
01295   {\cf20 // std::string.}\par
{\bkmkstart AAAAAAASUP}{\bkmkend AAAAAAASUP}
01296   {\cf17 const} {\cf18 char}* pattern_;\par
{\bkmkstart AAAAAAASUQ}{\bkmkend AAAAAAASUQ}
01297   {\cf18 bool} is_valid_;\par
{\bkmkstart AAAAAAASUR}{\bkmkend AAAAAAASUR}
01298 \par
{\bkmkstart AAAAAAASUS}{\bkmkend AAAAAAASUS}
01299 {\cf21 # if GTEST_USES_POSIX_RE}\par
{\bkmkstart AAAAAAASUT}{\bkmkend AAAAAAASUT}
01300 \par
{\bkmkstart AAAAAAASUU}{\bkmkend AAAAAAASUU}
01301   regex_t full_regex_;     {\cf20 // For FullMatch().}\par
{\bkmkstart AAAAAAASUV}{\bkmkend AAAAAAASUV}
01302   regex_t partial_regex_;  {\cf20 // For PartialMatch().}\par
{\bkmkstart AAAAAAASUW}{\bkmkend AAAAAAASUW}
01303 \par
{\bkmkstart AAAAAAASUX}{\bkmkend AAAAAAASUX}
01304 {\cf21 # else  }{\cf20 // GTEST_USES_SIMPLE_RE}\par
{\bkmkstart AAAAAAASUY}{\bkmkend AAAAAAASUY}
01305 \par
{\bkmkstart AAAAAAASUZ}{\bkmkend AAAAAAASUZ}
01306   {\cf17 const} {\cf18 char}* full_pattern_;  {\cf20 // For FullMatch();}\par
{\bkmkstart AAAAAAASVA}{\bkmkend AAAAAAASVA}
01307 \par
{\bkmkstart AAAAAAASVB}{\bkmkend AAAAAAASVB}
01308 {\cf21 # endif}\par
{\bkmkstart AAAAAAASVC}{\bkmkend AAAAAAASVC}
01309 \par
{\bkmkstart AAAAAAASVD}{\bkmkend AAAAAAASVD}
01310   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASEY" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASSD" }{}}{\fldrslt {\cs37\ul\cf2 RE}}}
);\par
{\bkmkstart AAAAAAASVE}{\bkmkend AAAAAAASVE}
01311 \};\par
{\bkmkstart AAAAAAASVF}{\bkmkend AAAAAAASVF}
01312 \par
{\bkmkstart AAAAAAASVG}{\bkmkend AAAAAAASVG}
01313 {\cf21 #endif  }{\cf20 // GTEST_USES_PCRE}\par
{\bkmkstart AAAAAAASVH}{\bkmkend AAAAAAASVH}
01314 \par
{\bkmkstart AAAAAAASVI}{\bkmkend AAAAAAASVI}
01315 {\cf20 // Formats a source file path and a line number as they would appear}\par
{\bkmkstart AAAAAAASVJ}{\bkmkend AAAAAAASVJ}
01316 {\cf20 // in an error message from the compiler used to compile this code.}\par
{\bkmkstart AAAAAAASVK}{\bkmkend AAAAAAASVK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASVL" }{}}{\fldrslt {\cs37\ul\cf2 01317}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_ ::std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASVL" }{}}{\fldrslt {\cs37\ul\cf2 FormatFileLocation}}}
({\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
{\bkmkstart AAAAAAASVM}{\bkmkend AAAAAAASVM}
01318 \par
{\bkmkstart AAAAAAASVN}{\bkmkend AAAAAAASVN}
01319 {\cf20 // Formats a file location for compiler-independent XML output.}\par
{\bkmkstart AAAAAAASVO}{\bkmkend AAAAAAASVO}
01320 {\cf20 // Although this function is not platform dependent, we put it next to}\par
{\bkmkstart AAAAAAASVP}{\bkmkend AAAAAAASVP}
01321 {\cf20 // FormatFileLocation in order to contrast the two functions.}\par
{\bkmkstart AAAAAAASVQ}{\bkmkend AAAAAAASVQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASVR" }{}}{\fldrslt {\cs37\ul\cf2 01322}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_ ::std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASVR" }{}}{\fldrslt {\cs37\ul\cf2 FormatCompilerIndependentFileLocation}}}
({\cf17 const} {\cf18 char}* file,\par
{\bkmkstart AAAAAAASVS}{\bkmkend AAAAAAASVS}
01323                                                                {\cf18 int} line);\par
{\bkmkstart AAAAAAASVT}{\bkmkend AAAAAAASVT}
01324 \par
{\bkmkstart AAAAAAASVU}{\bkmkend AAAAAAASVU}
01325 {\cf20 // Defines logging utilities:}\par
{\bkmkstart AAAAAAASVV}{\bkmkend AAAAAAASVV}
01326 {\cf20 //   GTEST_LOG_(severity) - logs messages at the specified severity level. The}\par
{\bkmkstart AAAAAAASVW}{\bkmkend AAAAAAASVW}
01327 {\cf20 //                          message itself is streamed into the macro.}\par
{\bkmkstart AAAAAAASVX}{\bkmkend AAAAAAASVX}
01328 {\cf20 //   LogToStderr()  - directs all log messages to stderr.}\par
{\bkmkstart AAAAAAASVY}{\bkmkend AAAAAAASVY}
01329 {\cf20 //   FlushInfoLog() - flushes informational log messages.}\par
{\bkmkstart AAAAAAASVZ}{\bkmkend AAAAAAASVZ}
01330 \par
{\bkmkstart AAAAAAASWA}{\bkmkend AAAAAAASWA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWB" }{}}{\fldrslt {\cs37\ul\cf2 01331}}}
 {\cf17 enum} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWB" }{}}{\fldrslt {\cs37\ul\cf2 GTestLogSeverity}}}
 \{\par
{\bkmkstart AAAAAAASWC}{\bkmkend AAAAAAASWC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWD" }{}}{\fldrslt {\cs37\ul\cf2 01332}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_INFO}}}
,\par
{\bkmkstart AAAAAAASWE}{\bkmkend AAAAAAASWE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWF" }{}}{\fldrslt {\cs37\ul\cf2 01333}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWF" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_WARNING}}}
,\par
{\bkmkstart AAAAAAASWG}{\bkmkend AAAAAAASWG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWH" }{}}{\fldrslt {\cs37\ul\cf2 01334}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWH" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ERROR}}}
,\par
{\bkmkstart AAAAAAASWI}{\bkmkend AAAAAAASWI}
01335   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWJ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_FATAL}}}
\par
{\bkmkstart AAAAAAASWK}{\bkmkend AAAAAAASWK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWJ" }{}}{\fldrslt {\cs37\ul\cf2 01336}}}
 \};\par
{\bkmkstart AAAAAAASWL}{\bkmkend AAAAAAASWL}
01337 \par
{\bkmkstart AAAAAAASWM}{\bkmkend AAAAAAASWM}
01338 {\cf20 // Formats log entry severity, provides a stream object for streaming the}\par
{\bkmkstart AAAAAAASWN}{\bkmkend AAAAAAASWN}
01339 {\cf20 // log message, and terminates the message with a newline when going out of}\par
{\bkmkstart AAAAAAASWO}{\bkmkend AAAAAAASWO}
01340 {\cf20 // scope.}\par
{\bkmkstart AAAAAAASWP}{\bkmkend AAAAAAASWP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWQ" }{}}{\fldrslt {\cs37\ul\cf2 01341}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWQ" }{}}{\fldrslt {\cs37\ul\cf2 GTestLog}}}
 \{\par
{\bkmkstart AAAAAAASWR}{\bkmkend AAAAAAASWR}
01342  {\cf17 public}:\par
{\bkmkstart AAAAAAASWS}{\bkmkend AAAAAAASWS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWT" }{}}{\fldrslt {\cs37\ul\cf2 01343}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWT" }{}}{\fldrslt {\cs37\ul\cf2 GTestLog}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWB" }{}}{\fldrslt {\cs37\ul\cf2 GTestLogSeverity}}}
 severity, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
{\bkmkstart AAAAAAASWU}{\bkmkend AAAAAAASWU}
01344 \par
{\bkmkstart AAAAAAASWV}{\bkmkend AAAAAAASWV}
01345   {\cf20 // Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.}\par
{\bkmkstart AAAAAAASWW}{\bkmkend AAAAAAASWW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWX" }{}}{\fldrslt {\cs37\ul\cf2 01346}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWX" }{}}{\fldrslt {\cs37\ul\cf2 ~GTestLog}}}
();\par
{\bkmkstart AAAAAAASWY}{\bkmkend AAAAAAASWY}
01347 \par
{\bkmkstart AAAAAAASWZ}{\bkmkend AAAAAAASWZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXA" }{}}{\fldrslt {\cs37\ul\cf2 01348}}}
   ::std::ostream& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXA" }{}}{\fldrslt {\cs37\ul\cf2 GetStream}}}
() \{ return ::std::cerr; \}\par
{\bkmkstart AAAAAAASXB}{\bkmkend AAAAAAASXB}
01349 \par
{\bkmkstart AAAAAAASXC}{\bkmkend AAAAAAASXC}
01350  {\cf17 private}:\par
{\bkmkstart AAAAAAASXD}{\bkmkend AAAAAAASXD}
01351   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWB" }{}}{\fldrslt {\cs37\ul\cf2 GTestLogSeverity}}}
 severity_;\par
{\bkmkstart AAAAAAASXE}{\bkmkend AAAAAAASXE}
01352 \par
{\bkmkstart AAAAAAASXF}{\bkmkend AAAAAAASXF}
01353   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASWQ" }{}}{\fldrslt {\cs37\ul\cf2 GTestLog}}}
);\par
{\bkmkstart AAAAAAASXG}{\bkmkend AAAAAAASXG}
01354 \};\par
{\bkmkstart AAAAAAASXH}{\bkmkend AAAAAAASXH}
01355 \par
{\bkmkstart AAAAAAASXI}{\bkmkend AAAAAAASXI}
01356 {\cf21 #if !defined(GTEST_LOG_)}\par
{\bkmkstart AAAAAAASXJ}{\bkmkend AAAAAAASXJ}
01357 \par
{\bkmkstart AAAAAAASXK}{\bkmkend AAAAAAASXK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXL" }{}}{\fldrslt {\cs37\ul\cf2 01358}}}
 {\cf21 # define GTEST_LOG_(severity) \\}\par
{\bkmkstart AAAAAAASXM}{\bkmkend AAAAAAASXM}
01359 {\cf21     ::testing::internal::GTestLog(::testing::internal::GTEST_##severity, \\}\par
{\bkmkstart AAAAAAASXN}{\bkmkend AAAAAAASXN}
01360 {\cf21                                   __FILE__, __LINE__).GetStream()}\par
{\bkmkstart AAAAAAASXO}{\bkmkend AAAAAAASXO}
01361 \par
{\bkmkstart AAAAAAASXP}{\bkmkend AAAAAAASXP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXQ" }{}}{\fldrslt {\cs37\ul\cf2 01362}}}
 {\cf17 inline} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXQ" }{}}{\fldrslt {\cs37\ul\cf2 LogToStderr}}}
() \{\}\par
{\bkmkstart AAAAAAASXR}{\bkmkend AAAAAAASXR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXS" }{}}{\fldrslt {\cs37\ul\cf2 01363}}}
 {\cf17 inline} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASXS" }{}}{\fldrslt {\cs37\ul\cf2 FlushInfoLog}}}
() \{ fflush(NULL); \}\par
{\bkmkstart AAAAAAASXT}{\bkmkend AAAAAAASXT}
01364 \par
{\bkmkstart AAAAAAASXU}{\bkmkend AAAAAAASXU}
01365 {\cf21 #endif  }{\cf20 // !defined(GTEST_LOG_)}\par
{\bkmkstart AAAAAAASXV}{\bkmkend AAAAAAASXV}
01366 \par
{\bkmkstart AAAAAAASXW}{\bkmkend AAAAAAASXW}
01367 {\cf21 #if !defined(GTEST_CHECK_)}\par
{\bkmkstart AAAAAAASXX}{\bkmkend AAAAAAASXX}
01368 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE.}\par
{\bkmkstart AAAAAAASXY}{\bkmkend AAAAAAASXY}
01369 {\cf20 //}\par
{\bkmkstart AAAAAAASXZ}{\bkmkend AAAAAAASXZ}
01370 {\cf20 // GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition}\par
{\bkmkstart AAAAAAASYA}{\bkmkend AAAAAAASYA}
01371 {\cf20 // is not satisfied.}\par
{\bkmkstart AAAAAAASYB}{\bkmkend AAAAAAASYB}
01372 {\cf20 //  Synopsys:}\par
{\bkmkstart AAAAAAASYC}{\bkmkend AAAAAAASYC}
01373 {\cf20 //    GTEST_CHECK_(boolean_condition);}\par
{\bkmkstart AAAAAAASYD}{\bkmkend AAAAAAASYD}
01374 {\cf20 //     or}\par
{\bkmkstart AAAAAAASYE}{\bkmkend AAAAAAASYE}
01375 {\cf20 //    GTEST_CHECK_(boolean_condition) << "Additional message";}\par
{\bkmkstart AAAAAAASYF}{\bkmkend AAAAAAASYF}
01376 {\cf20 //}\par
{\bkmkstart AAAAAAASYG}{\bkmkend AAAAAAASYG}
01377 {\cf20 //    This checks the condition and if the condition is not satisfied}\par
{\bkmkstart AAAAAAASYH}{\bkmkend AAAAAAASYH}
01378 {\cf20 //    it prints message about the condition violation, including the}\par
{\bkmkstart AAAAAAASYI}{\bkmkend AAAAAAASYI}
01379 {\cf20 //    condition itself, plus additional message streamed into it, if any,}\par
{\bkmkstart AAAAAAASYJ}{\bkmkend AAAAAAASYJ}
01380 {\cf20 //    and then it aborts the program. It aborts the program irrespective of}\par
{\bkmkstart AAAAAAASYK}{\bkmkend AAAAAAASYK}
01381 {\cf20 //    whether it is built in the debug mode or not.}\par
{\bkmkstart AAAAAAASYL}{\bkmkend AAAAAAASYL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCC" }{}}{\fldrslt {\cs37\ul\cf2 01382}}}
 {\cf21 # define GTEST_CHECK_(condition) \\}\par
{\bkmkstart AAAAAAASYM}{\bkmkend AAAAAAASYM}
01383 {\cf21     GTEST_AMBIGUOUS_ELSE_BLOCKER_ \\}\par
{\bkmkstart AAAAAAASYN}{\bkmkend AAAAAAASYN}
01384 {\cf21     if (::testing::internal::IsTrue(condition)) \\}\par
{\bkmkstart AAAAAAASYO}{\bkmkend AAAAAAASYO}
01385 {\cf21       ; \\}\par
{\bkmkstart AAAAAAASYP}{\bkmkend AAAAAAASYP}
01386 {\cf21     else \\}\par
{\bkmkstart AAAAAAASYQ}{\bkmkend AAAAAAASYQ}
01387 {\cf21       GTEST_LOG_(FATAL) << "Condition "} #condition " failed. "\par
{\bkmkstart AAAAAAASYR}{\bkmkend AAAAAAASYR}
01388 {\cf21 #endif  }{\cf20 // !defined(GTEST_CHECK_)}\par
{\bkmkstart AAAAAAASYS}{\bkmkend AAAAAAASYS}
01389 \par
{\bkmkstart AAAAAAASYT}{\bkmkend AAAAAAASYT}
01390 {\cf20 // An all-mode assert to verify that the given POSIX-style function}\par
{\bkmkstart AAAAAAASYU}{\bkmkend AAAAAAASYU}
01391 {\cf20 // call returns 0 (indicating success).  Known limitation: this}\par
{\bkmkstart AAAAAAASYV}{\bkmkend AAAAAAASYV}
01392 {\cf20 // doesn't expand to a balanced 'if' statement, so enclose the macro}\par
{\bkmkstart AAAAAAASYW}{\bkmkend AAAAAAASYW}
01393 {\cf20 // in \{\} if you need to use it as the only statement in an 'if'}\par
{\bkmkstart AAAAAAASYX}{\bkmkend AAAAAAASYX}
01394 {\cf20 // branch.}\par
{\bkmkstart AAAAAAASYY}{\bkmkend AAAAAAASYY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 01395}}}
 {\cf21 #define GTEST_CHECK_POSIX_SUCCESS_(posix_call) \\}\par
{\bkmkstart AAAAAAASZA}{\bkmkend AAAAAAASZA}
01396 {\cf21   if (const int gtest_error = (posix_call)) \\}\par
{\bkmkstart AAAAAAASZB}{\bkmkend AAAAAAASZB}
01397 {\cf21     GTEST_LOG_(FATAL) << #posix_call << "failed with error "} \\\par
{\bkmkstart AAAAAAASZC}{\bkmkend AAAAAAASZC}
01398                       << gtest_error\par
{\bkmkstart AAAAAAASZD}{\bkmkend AAAAAAASZD}
01399 \par
{\bkmkstart AAAAAAASZE}{\bkmkend AAAAAAASZE}
01400 {\cf20 // Adds reference to a type if it is not a reference type,}\par
{\bkmkstart AAAAAAASZF}{\bkmkend AAAAAAASZF}
01401 {\cf20 // otherwise leaves it unchanged.  This is the same as}\par
{\bkmkstart AAAAAAASZG}{\bkmkend AAAAAAASZG}
01402 {\cf20 // tr1::add_reference, which is not widely available yet.}\par
{\bkmkstart AAAAAAASZH}{\bkmkend AAAAAAASZH}
01403 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAASZI}{\bkmkend AAAAAAASZI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASZJ" }{}}{\fldrslt {\cs37\ul\cf2 01404}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKTH" }{}}{\fldrslt {\cs37\ul\cf2 AddReference}}}
 \{ {\cf17 typedef} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASZJ" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
; \};  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASZK}{\bkmkend AAAAAAASZK}
01405 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAASZL}{\bkmkend AAAAAAASZL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASZM" }{}}{\fldrslt {\cs37\ul\cf2 01406}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKTH" }{}}{\fldrslt {\cs37\ul\cf2 AddReference}}}
<T&> \{ {\cf17 typedef} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASZM" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
; \};  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAASZN}{\bkmkend AAAAAAASZN}
01407 \par
{\bkmkstart AAAAAAASZO}{\bkmkend AAAAAAASZO}
01408 {\cf20 // A handy wrapper around AddReference that works when the argument T}\par
{\bkmkstart AAAAAAASZP}{\bkmkend AAAAAAASZP}
01409 {\cf20 // depends on template parameters.}\par
{\bkmkstart AAAAAAASZQ}{\bkmkend AAAAAAASZQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASZR" }{}}{\fldrslt {\cs37\ul\cf2 01410}}}
 {\cf21 #define GTEST_ADD_REFERENCE_(T) \\}\par
{\bkmkstart AAAAAAASZS}{\bkmkend AAAAAAASZS}
01411 {\cf21     typename ::testing::internal::AddReference<T>::type}\par
{\bkmkstart AAAAAAASZT}{\bkmkend AAAAAAASZT}
01412 \par
{\bkmkstart AAAAAAASZU}{\bkmkend AAAAAAASZU}
01413 {\cf20 // Transforms "T" into "const T&" according to standard reference collapsing}\par
{\bkmkstart AAAAAAASZV}{\bkmkend AAAAAAASZV}
01414 {\cf20 // rules (this is only needed as a backport for C++98 compilers that do not}\par
{\bkmkstart AAAAAAASZW}{\bkmkend AAAAAAASZW}
01415 {\cf20 // support reference collapsing). Specifically, it transforms:}\par
{\bkmkstart AAAAAAASZX}{\bkmkend AAAAAAASZX}
01416 {\cf20 //}\par
{\bkmkstart AAAAAAASZY}{\bkmkend AAAAAAASZY}
01417 {\cf20 //   char         ==> const char&}\par
{\bkmkstart AAAAAAASZZ}{\bkmkend AAAAAAASZZ}
01418 {\cf20 //   const char   ==> const char&}\par
{\bkmkstart AAAAAAATAA}{\bkmkend AAAAAAATAA}
01419 {\cf20 //   char&        ==> char&}\par
{\bkmkstart AAAAAAATAB}{\bkmkend AAAAAAATAB}
01420 {\cf20 //   const char&  ==> const char&}\par
{\bkmkstart AAAAAAATAC}{\bkmkend AAAAAAATAC}
01421 {\cf20 //}\par
{\bkmkstart AAAAAAATAD}{\bkmkend AAAAAAATAD}
01422 {\cf20 // Note that the non-const reference will not have "const" added. This is}\par
{\bkmkstart AAAAAAATAE}{\bkmkend AAAAAAATAE}
01423 {\cf20 // standard, and necessary so that "T" can always bind to "const T&".}\par
{\bkmkstart AAAAAAATAF}{\bkmkend AAAAAAATAF}
01424 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATAG}{\bkmkend AAAAAAATAG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAH" }{}}{\fldrslt {\cs37\ul\cf2 01425}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAI" }{}}{\fldrslt {\cs37\ul\cf2 ConstRef}}}
 \{ {\cf17 typedef} {\cf17 const} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAH" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
; \};\par
{\bkmkstart AAAAAAATAJ}{\bkmkend AAAAAAATAJ}
01426 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATAK}{\bkmkend AAAAAAATAK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAL" }{}}{\fldrslt {\cs37\ul\cf2 01427}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAI" }{}}{\fldrslt {\cs37\ul\cf2 ConstRef}}}
<T&> \{ {\cf17 typedef} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAL" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
; \};\par
{\bkmkstart AAAAAAATAM}{\bkmkend AAAAAAATAM}
01428 \par
{\bkmkstart AAAAAAATAN}{\bkmkend AAAAAAATAN}
01429 {\cf20 // The argument T must depend on some template parameters.}\par
{\bkmkstart AAAAAAATAO}{\bkmkend AAAAAAATAO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAP" }{}}{\fldrslt {\cs37\ul\cf2 01430}}}
 {\cf21 #define GTEST_REFERENCE_TO_CONST_(T) \\}\par
{\bkmkstart AAAAAAATAQ}{\bkmkend AAAAAAATAQ}
01431 {\cf21   typename ::testing::internal::ConstRef<T>::type}\par
{\bkmkstart AAAAAAATAR}{\bkmkend AAAAAAATAR}
01432 \par
{\bkmkstart AAAAAAATAS}{\bkmkend AAAAAAATAS}
01433 {\cf21 #if GTEST_HAS_STD_MOVE_}\par
{\bkmkstart AAAAAAATAT}{\bkmkend AAAAAAATAT}
01434 {\cf17 using} std::forward;\par
{\bkmkstart AAAAAAATAU}{\bkmkend AAAAAAATAU}
01435 {\cf17 using} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAV" }{}}{\fldrslt {\cs37\ul\cf2 std::move}}}
;\par
{\bkmkstart AAAAAAATAW}{\bkmkend AAAAAAATAW}
01436 \par
{\bkmkstart AAAAAAATAX}{\bkmkend AAAAAAATAX}
01437 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATAY}{\bkmkend AAAAAAATAY}
01438 {\cf17 struct }RvalueRef \{\par
{\bkmkstart AAAAAAATAZ}{\bkmkend AAAAAAATAZ}
01439   {\cf17 typedef} T&& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBA" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
{\bkmkstart AAAAAAATBB}{\bkmkend AAAAAAATBB}
01440 \};\par
{\bkmkstart AAAAAAATBC}{\bkmkend AAAAAAATBC}
01441 {\cf21 #else  }{\cf20 // GTEST_HAS_STD_MOVE_}\par
{\bkmkstart AAAAAAATBD}{\bkmkend AAAAAAATBD}
01442 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATBE}{\bkmkend AAAAAAATBE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAV" }{}}{\fldrslt {\cs37\ul\cf2 01443}}}
 {\cf17 const} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATAV" }{}}{\fldrslt {\cs37\ul\cf2 move}}}
({\cf17 const} T& t) \{\par
{\bkmkstart AAAAAAATBF}{\bkmkend AAAAAAATBF}
01444   {\cf19 return} t;\par
{\bkmkstart AAAAAAATBG}{\bkmkend AAAAAAATBG}
01445 \}\par
{\bkmkstart AAAAAAATBH}{\bkmkend AAAAAAATBH}
01446 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATBI}{\bkmkend AAAAAAATBI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBJ" }{}}{\fldrslt {\cs37\ul\cf2 01447}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBJ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ADD_REFERENCE_}}}
(T) forward({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBJ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ADD_REFERENCE_}}}
(T) t) \{ {\cf19 return} t; \}\par
{\bkmkstart AAAAAAATBK}{\bkmkend AAAAAAATBK}
01448 \par
{\bkmkstart AAAAAAATBL}{\bkmkend AAAAAAATBL}
01449 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATBM}{\bkmkend AAAAAAATBM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBN" }{}}{\fldrslt {\cs37\ul\cf2 01450}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBN" }{}}{\fldrslt {\cs37\ul\cf2 RvalueRef}}}
 \{\par
{\bkmkstart AAAAAAATBO}{\bkmkend AAAAAAATBO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBA" }{}}{\fldrslt {\cs37\ul\cf2 01451}}}
   {\cf17 typedef} {\cf17 const} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATBA" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
{\bkmkstart AAAAAAATBP}{\bkmkend AAAAAAATBP}
01452 \};\par
{\bkmkstart AAAAAAATBQ}{\bkmkend AAAAAAATBQ}
01453 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_MOVE_}\par
{\bkmkstart AAAAAAATBR}{\bkmkend AAAAAAATBR}
01454 \par
{\bkmkstart AAAAAAATBS}{\bkmkend AAAAAAATBS}
01455 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
{\bkmkstart AAAAAAATBT}{\bkmkend AAAAAAATBT}
01456 {\cf20 //}\par
{\bkmkstart AAAAAAATBU}{\bkmkend AAAAAAATBU}
01457 {\cf20 // Use ImplicitCast_ as a safe version of static_cast for upcasting in}\par
{\bkmkstart AAAAAAATBV}{\bkmkend AAAAAAATBV}
01458 {\cf20 // the type hierarchy (e.g. casting a Foo* to a SuperclassOfFoo* or a}\par
{\bkmkstart AAAAAAATBW}{\bkmkend AAAAAAATBW}
01459 {\cf20 // const Foo*).  When you use ImplicitCast_, the compiler checks that}\par
{\bkmkstart AAAAAAATBX}{\bkmkend AAAAAAATBX}
01460 {\cf20 // the cast is safe.  Such explicit ImplicitCast_s are necessary in}\par
{\bkmkstart AAAAAAATBY}{\bkmkend AAAAAAATBY}
01461 {\cf20 // surprisingly many situations where C++ demands an exact type match}\par
{\bkmkstart AAAAAAATBZ}{\bkmkend AAAAAAATBZ}
01462 {\cf20 // instead of an argument type convertable to a target type.}\par
{\bkmkstart AAAAAAATCA}{\bkmkend AAAAAAATCA}
01463 {\cf20 //}\par
{\bkmkstart AAAAAAATCB}{\bkmkend AAAAAAATCB}
01464 {\cf20 // The syntax for using ImplicitCast_ is the same as for static_cast:}\par
{\bkmkstart AAAAAAATCC}{\bkmkend AAAAAAATCC}
01465 {\cf20 //}\par
{\bkmkstart AAAAAAATCD}{\bkmkend AAAAAAATCD}
01466 {\cf20 //   ImplicitCast_<ToType>(expr)}\par
{\bkmkstart AAAAAAATCE}{\bkmkend AAAAAAATCE}
01467 {\cf20 //}\par
{\bkmkstart AAAAAAATCF}{\bkmkend AAAAAAATCF}
01468 {\cf20 // ImplicitCast_ would have been part of the C++ standard library,}\par
{\bkmkstart AAAAAAATCG}{\bkmkend AAAAAAATCG}
01469 {\cf20 // but the proposal was submitted too late.  It will probably make}\par
{\bkmkstart AAAAAAATCH}{\bkmkend AAAAAAATCH}
01470 {\cf20 // its way into the language in the future.}\par
{\bkmkstart AAAAAAATCI}{\bkmkend AAAAAAATCI}
01471 {\cf20 //}\par
{\bkmkstart AAAAAAATCJ}{\bkmkend AAAAAAATCJ}
01472 {\cf20 // This relatively ugly name is intentional. It prevents clashes with}\par
{\bkmkstart AAAAAAATCK}{\bkmkend AAAAAAATCK}
01473 {\cf20 // similar functions users may have (e.g., implicit_cast). The internal}\par
{\bkmkstart AAAAAAATCL}{\bkmkend AAAAAAATCL}
01474 {\cf20 // namespace alone is not enough because the function can be found by ADL.}\par
{\bkmkstart AAAAAAATCM}{\bkmkend AAAAAAATCM}
01475 {\cf17 template}<{\cf17 typename} To>\par
{\bkmkstart AAAAAAATCN}{\bkmkend AAAAAAATCN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATCO" }{}}{\fldrslt {\cs37\ul\cf2 01476}}}
 {\cf17 inline} To {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATCO" }{}}{\fldrslt {\cs37\ul\cf2 ImplicitCast_}}}
(To x) \{ {\cf19 return} x; \}\par
{\bkmkstart AAAAAAATCP}{\bkmkend AAAAAAATCP}
01477 \par
{\bkmkstart AAAAAAATCQ}{\bkmkend AAAAAAATCQ}
01478 {\cf20 // When you upcast (that is, cast a pointer from type Foo to type}\par
{\bkmkstart AAAAAAATCR}{\bkmkend AAAAAAATCR}
01479 {\cf20 // SuperclassOfFoo), it's fine to use ImplicitCast_<>, since upcasts}\par
{\bkmkstart AAAAAAATCS}{\bkmkend AAAAAAATCS}
01480 {\cf20 // always succeed.  When you downcast (that is, cast a pointer from}\par
{\bkmkstart AAAAAAATCT}{\bkmkend AAAAAAATCT}
01481 {\cf20 // type Foo to type SubclassOfFoo), static_cast<> isn't safe, because}\par
{\bkmkstart AAAAAAATCU}{\bkmkend AAAAAAATCU}
01482 {\cf20 // how do you know the pointer is really of type SubclassOfFoo?  It}\par
{\bkmkstart AAAAAAATCV}{\bkmkend AAAAAAATCV}
01483 {\cf20 // could be a bare Foo, or of type DifferentSubclassOfFoo.  Thus,}\par
{\bkmkstart AAAAAAATCW}{\bkmkend AAAAAAATCW}
01484 {\cf20 // when you downcast, you should use this macro.  In debug mode, we}\par
{\bkmkstart AAAAAAATCX}{\bkmkend AAAAAAATCX}
01485 {\cf20 // use dynamic_cast<> to double-check the downcast is legal (we die}\par
{\bkmkstart AAAAAAATCY}{\bkmkend AAAAAAATCY}
01486 {\cf20 // if it's not).  In normal mode, we do the efficient static_cast<>}\par
{\bkmkstart AAAAAAATCZ}{\bkmkend AAAAAAATCZ}
01487 {\cf20 // instead.  Thus, it's important to test in debug mode to make sure}\par
{\bkmkstart AAAAAAATDA}{\bkmkend AAAAAAATDA}
01488 {\cf20 // the cast is legal!}\par
{\bkmkstart AAAAAAATDB}{\bkmkend AAAAAAATDB}
01489 {\cf20 //    This is the only place in the code we should use dynamic_cast<>.}\par
{\bkmkstart AAAAAAATDC}{\bkmkend AAAAAAATDC}
01490 {\cf20 // In particular, you SHOULDN'T be using dynamic_cast<> in order to}\par
{\bkmkstart AAAAAAATDD}{\bkmkend AAAAAAATDD}
01491 {\cf20 // do RTTI (eg code like this:}\par
{\bkmkstart AAAAAAATDE}{\bkmkend AAAAAAATDE}
01492 {\cf20 //    if (dynamic_cast<Subclass1>(foo)) HandleASubclass1Object(foo);}\par
{\bkmkstart AAAAAAATDF}{\bkmkend AAAAAAATDF}
01493 {\cf20 //    if (dynamic_cast<Subclass2>(foo)) HandleASubclass2Object(foo);}\par
{\bkmkstart AAAAAAATDG}{\bkmkend AAAAAAATDG}
01494 {\cf20 // You should design the code some other way not to need this.}\par
{\bkmkstart AAAAAAATDH}{\bkmkend AAAAAAATDH}
01495 {\cf20 //}\par
{\bkmkstart AAAAAAATDI}{\bkmkend AAAAAAATDI}
01496 {\cf20 // This relatively ugly name is intentional. It prevents clashes with}\par
{\bkmkstart AAAAAAATDJ}{\bkmkend AAAAAAATDJ}
01497 {\cf20 // similar functions users may have (e.g., down_cast). The internal}\par
{\bkmkstart AAAAAAATDK}{\bkmkend AAAAAAATDK}
01498 {\cf20 // namespace alone is not enough because the function can be found by ADL.}\par
{\bkmkstart AAAAAAATDL}{\bkmkend AAAAAAATDL}
01499 {\cf17 template}<{\cf17 typename} To, {\cf17 typename} From>  {\cf20 // use like this: DownCast_<T*>(foo);}\par
{\bkmkstart AAAAAAATDM}{\bkmkend AAAAAAATDM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATDN" }{}}{\fldrslt {\cs37\ul\cf2 01500}}}
 {\cf17 inline} To {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATDN" }{}}{\fldrslt {\cs37\ul\cf2 DownCast_}}}
(From* f) \{  {\cf20 // so we only accept pointers}\par
{\bkmkstart AAAAAAATDO}{\bkmkend AAAAAAATDO}
01501   {\cf20 // Ensures that To is a sub-type of From *.  This test is here only}\par
{\bkmkstart AAAAAAATDP}{\bkmkend AAAAAAATDP}
01502   {\cf20 // for compile-time type checking, and has no overhead in an}\par
{\bkmkstart AAAAAAATDQ}{\bkmkend AAAAAAATDQ}
01503   {\cf20 // optimized build at run-time, as it will be optimized away}\par
{\bkmkstart AAAAAAATDR}{\bkmkend AAAAAAATDR}
01504   {\cf20 // completely.}\par
{\bkmkstart AAAAAAATDS}{\bkmkend AAAAAAATDS}
01505   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKVA" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_INTENTIONAL_CONST_COND_PUSH_}}}
()\par
{\bkmkstart AAAAAAATDT}{\bkmkend AAAAAAATDT}
01506   {\cf19 if} ({\cf17 false}) \{\par
{\bkmkstart AAAAAAATDU}{\bkmkend AAAAAAATDU}
01507   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAKVD" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_INTENTIONAL_CONST_COND_POP_}}}
()\par
{\bkmkstart AAAAAAATDV}{\bkmkend AAAAAAATDV}
01508     {\cf17 const} To to = NULL;\par
{\bkmkstart AAAAAAATDW}{\bkmkend AAAAAAATDW}
01509     ::testing::internal::ImplicitCast_<From*>(to);\par
{\bkmkstart AAAAAAATDX}{\bkmkend AAAAAAATDX}
01510   \}\par
{\bkmkstart AAAAAAATDY}{\bkmkend AAAAAAATDY}
01511 \par
{\bkmkstart AAAAAAATDZ}{\bkmkend AAAAAAATDZ}
01512 {\cf21 #if GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAATEA}{\bkmkend AAAAAAATEA}
01513   {\cf20 // RTTI: debug mode only!}\par
{\bkmkstart AAAAAAATEB}{\bkmkend AAAAAAATEB}
01514   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_}}}
(f == NULL || {\cf17 dynamic_cast<}To{\cf17 >}(f) != NULL);\par
{\bkmkstart AAAAAAATEC}{\bkmkend AAAAAAATEC}
01515 {\cf21 #endif}\par
{\bkmkstart AAAAAAATED}{\bkmkend AAAAAAATED}
01516   {\cf19 return} {\cf17 static_cast<}To{\cf17 >}(f);\par
{\bkmkstart AAAAAAATEE}{\bkmkend AAAAAAATEE}
01517 \}\par
{\bkmkstart AAAAAAATEF}{\bkmkend AAAAAAATEF}
01518 \par
{\bkmkstart AAAAAAATEG}{\bkmkend AAAAAAATEG}
01519 {\cf20 // Downcasts the pointer of type Base to Derived.}\par
{\bkmkstart AAAAAAATEH}{\bkmkend AAAAAAATEH}
01520 {\cf20 // Derived must be a subclass of Base. The parameter MUST}\par
{\bkmkstart AAAAAAATEI}{\bkmkend AAAAAAATEI}
01521 {\cf20 // point to a class of type Derived, not any subclass of it.}\par
{\bkmkstart AAAAAAATEJ}{\bkmkend AAAAAAATEJ}
01522 {\cf20 // When RTTI is available, the function performs a runtime}\par
{\bkmkstart AAAAAAATEK}{\bkmkend AAAAAAATEK}
01523 {\cf20 // check to enforce this.}\par
{\bkmkstart AAAAAAATEL}{\bkmkend AAAAAAATEL}
01524 {\cf17 template} <{\cf17 class} Derived, {\cf17 class} Base>\par
{\bkmkstart AAAAAAATEM}{\bkmkend AAAAAAATEM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATEN" }{}}{\fldrslt {\cs37\ul\cf2 01525}}}
 Derived* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATEN" }{}}{\fldrslt {\cs37\ul\cf2 CheckedDowncastToActualType}}}
(Base* base) \{\par
{\bkmkstart AAAAAAATEO}{\bkmkend AAAAAAATEO}
01526 {\cf21 #if GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAATEP}{\bkmkend AAAAAAATEP}
01527   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_}}}
({\cf17 typeid}(*base) == {\cf17 typeid}(Derived));\par
{\bkmkstart AAAAAAATEQ}{\bkmkend AAAAAAATEQ}
01528 {\cf21 #endif}\par
{\bkmkstart AAAAAAATER}{\bkmkend AAAAAAATER}
01529 \par
{\bkmkstart AAAAAAATES}{\bkmkend AAAAAAATES}
01530 {\cf21 #if GTEST_HAS_DOWNCAST_}\par
{\bkmkstart AAAAAAATET}{\bkmkend AAAAAAATET}
01531   return ::down_cast<Derived*>(base);\par
{\bkmkstart AAAAAAATEU}{\bkmkend AAAAAAATEU}
01532 {\cf21 #elif GTEST_HAS_RTTI}\par
{\bkmkstart AAAAAAATEV}{\bkmkend AAAAAAATEV}
01533   {\cf19 return} {\cf17 dynamic_cast<}Derived*{\cf17 >}(base);  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAATEW}{\bkmkend AAAAAAATEW}
01534 {\cf21 #else}\par
{\bkmkstart AAAAAAATEX}{\bkmkend AAAAAAATEX}
01535   {\cf19 return} {\cf17 static_cast<}Derived*{\cf17 >}(base);  {\cf20 // Poor man's downcast.}\par
{\bkmkstart AAAAAAATEY}{\bkmkend AAAAAAATEY}
01536 {\cf21 #endif}\par
{\bkmkstart AAAAAAATEZ}{\bkmkend AAAAAAATEZ}
01537 \}\par
{\bkmkstart AAAAAAATFA}{\bkmkend AAAAAAATFA}
01538 \par
{\bkmkstart AAAAAAATFB}{\bkmkend AAAAAAATFB}
01539 {\cf21 #if GTEST_HAS_STREAM_REDIRECTION}\par
{\bkmkstart AAAAAAATFC}{\bkmkend AAAAAAATFC}
01540 \par
{\bkmkstart AAAAAAATFD}{\bkmkend AAAAAAATFD}
01541 {\cf20 // Defines the stderr capturer:}\par
{\bkmkstart AAAAAAATFE}{\bkmkend AAAAAAATFE}
01542 {\cf20 //   CaptureStdout     - starts capturing stdout.}\par
{\bkmkstart AAAAAAATFF}{\bkmkend AAAAAAATFF}
01543 {\cf20 //   GetCapturedStdout - stops capturing stdout and returns the captured string.}\par
{\bkmkstart AAAAAAATFG}{\bkmkend AAAAAAATFG}
01544 {\cf20 //   CaptureStderr     - starts capturing stderr.}\par
{\bkmkstart AAAAAAATFH}{\bkmkend AAAAAAATFH}
01545 {\cf20 //   GetCapturedStderr - stops capturing stderr and returns the captured string.}\par
{\bkmkstart AAAAAAATFI}{\bkmkend AAAAAAATFI}
01546 {\cf20 //}\par
{\bkmkstart AAAAAAATFJ}{\bkmkend AAAAAAATFJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFK" }{}}{\fldrslt {\cs37\ul\cf2 01547}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFK" }{}}{\fldrslt {\cs37\ul\cf2 CaptureStdout}}}
();\par
{\bkmkstart AAAAAAATFL}{\bkmkend AAAAAAATFL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFM" }{}}{\fldrslt {\cs37\ul\cf2 01548}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFM" }{}}{\fldrslt {\cs37\ul\cf2 GetCapturedStdout}}}
();\par
{\bkmkstart AAAAAAATFN}{\bkmkend AAAAAAATFN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFO" }{}}{\fldrslt {\cs37\ul\cf2 01549}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFO" }{}}{\fldrslt {\cs37\ul\cf2 CaptureStderr}}}
();\par
{\bkmkstart AAAAAAATFP}{\bkmkend AAAAAAATFP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFQ" }{}}{\fldrslt {\cs37\ul\cf2 01550}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFQ" }{}}{\fldrslt {\cs37\ul\cf2 GetCapturedStderr}}}
();\par
{\bkmkstart AAAAAAATFR}{\bkmkend AAAAAAATFR}
01551 \par
{\bkmkstart AAAAAAATFS}{\bkmkend AAAAAAATFS}
01552 {\cf21 #endif  }{\cf20 // GTEST_HAS_STREAM_REDIRECTION}\par
{\bkmkstart AAAAAAATFT}{\bkmkend AAAAAAATFT}
01553 {\cf20 // Returns the size (in bytes) of a file.}\par
{\bkmkstart AAAAAAATFU}{\bkmkend AAAAAAATFU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFV" }{}}{\fldrslt {\cs37\ul\cf2 01554}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 size_t} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFV" }{}}{\fldrslt {\cs37\ul\cf2 GetFileSize}}}
(FILE* file);\par
{\bkmkstart AAAAAAATFW}{\bkmkend AAAAAAATFW}
01555 \par
{\bkmkstart AAAAAAATFX}{\bkmkend AAAAAAATFX}
01556 {\cf20 // Reads the entire content of a file as a string.}\par
{\bkmkstart AAAAAAATFY}{\bkmkend AAAAAAATFY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFZ" }{}}{\fldrslt {\cs37\ul\cf2 01557}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATFZ" }{}}{\fldrslt {\cs37\ul\cf2 ReadEntireFile}}}
(FILE* file);\par
{\bkmkstart AAAAAAATGA}{\bkmkend AAAAAAATGA}
01558 \par
{\bkmkstart AAAAAAATGB}{\bkmkend AAAAAAATGB}
01559 {\cf20 // All command line arguments.}\par
{\bkmkstart AAAAAAATGC}{\bkmkend AAAAAAATGC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATGD" }{}}{\fldrslt {\cs37\ul\cf2 01560}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 std::vector<std::string> {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATGD" }{}}{\fldrslt {\cs37\ul\cf2 GetArgvs}}}
();\par
{\bkmkstart AAAAAAATGE}{\bkmkend AAAAAAATGE}
01561 \par
{\bkmkstart AAAAAAATGF}{\bkmkend AAAAAAATGF}
01562 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
{\bkmkstart AAAAAAATGG}{\bkmkend AAAAAAATGG}
01563 \par
{\bkmkstart AAAAAAATGH}{\bkmkend AAAAAAATGH}
01564 std::vector<std::string> GetInjectableArgvs();\par
{\bkmkstart AAAAAAATGI}{\bkmkend AAAAAAATGI}
01565 {\cf20 // Deprecated: pass the args vector by value instead.}\par
{\bkmkstart AAAAAAATGJ}{\bkmkend AAAAAAATGJ}
01566 {\cf18 void} SetInjectableArgvs({\cf17 const} std::vector<std::string>* new_argvs);\par
{\bkmkstart AAAAAAATGK}{\bkmkend AAAAAAATGK}
01567 {\cf18 void} SetInjectableArgvs({\cf17 const} std::vector<std::string>& new_argvs);\par
{\bkmkstart AAAAAAATGL}{\bkmkend AAAAAAATGL}
01568 {\cf21 #if GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAATGM}{\bkmkend AAAAAAATGM}
01569 {\cf18 void} SetInjectableArgvs({\cf17 const} std::vector< ::string>& new_argvs);\par
{\bkmkstart AAAAAAATGN}{\bkmkend AAAAAAATGN}
01570 {\cf21 #endif  }{\cf20 // GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAATGO}{\bkmkend AAAAAAATGO}
01571 {\cf18 void} ClearInjectableArgvs();\par
{\bkmkstart AAAAAAATGP}{\bkmkend AAAAAAATGP}
01572 \par
{\bkmkstart AAAAAAATGQ}{\bkmkend AAAAAAATGQ}
01573 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
{\bkmkstart AAAAAAATGR}{\bkmkend AAAAAAATGR}
01574 \par
{\bkmkstart AAAAAAATGS}{\bkmkend AAAAAAATGS}
01575 {\cf20 // Defines synchronization primitives.}\par
{\bkmkstart AAAAAAATGT}{\bkmkend AAAAAAATGT}
01576 {\cf21 #if GTEST_IS_THREADSAFE}\par
{\bkmkstart AAAAAAATGU}{\bkmkend AAAAAAATGU}
01577 {\cf21 # if GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAATGV}{\bkmkend AAAAAAATGV}
01578 {\cf20 // Sleeps for (roughly) n milliseconds.  This function is only for testing}\par
{\bkmkstart AAAAAAATGW}{\bkmkend AAAAAAATGW}
01579 {\cf20 // Google Test's own constructs.  Don't use it in user tests, either}\par
{\bkmkstart AAAAAAATGX}{\bkmkend AAAAAAATGX}
01580 {\cf20 // directly or indirectly.}\par
{\bkmkstart AAAAAAATGY}{\bkmkend AAAAAAATGY}
01581 {\cf17 inline} {\cf18 void} SleepMilliseconds({\cf18 int} n) \{\par
{\bkmkstart AAAAAAATGZ}{\bkmkend AAAAAAATGZ}
01582   {\cf17 const} timespec time = \{\par
{\bkmkstart AAAAAAATHA}{\bkmkend AAAAAAATHA}
01583     0,                  {\cf20 // 0 seconds.}\par
{\bkmkstart AAAAAAATHB}{\bkmkend AAAAAAATHB}
01584     n * 1000L * 1000L,  {\cf20 // And n ms.}\par
{\bkmkstart AAAAAAATHC}{\bkmkend AAAAAAATHC}
01585   \};\par
{\bkmkstart AAAAAAATHD}{\bkmkend AAAAAAATHD}
01586   nanosleep(&time, NULL);\par
{\bkmkstart AAAAAAATHE}{\bkmkend AAAAAAATHE}
01587 \}\par
{\bkmkstart AAAAAAATHF}{\bkmkend AAAAAAATHF}
01588 {\cf21 # endif  }{\cf20 // GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAATHG}{\bkmkend AAAAAAATHG}
01589 \par
{\bkmkstart AAAAAAATHH}{\bkmkend AAAAAAATHH}
01590 {\cf21 # if GTEST_HAS_NOTIFICATION_}\par
{\bkmkstart AAAAAAATHI}{\bkmkend AAAAAAATHI}
01591 {\cf20 // Notification has already been imported into the namespace.}\par
{\bkmkstart AAAAAAATHJ}{\bkmkend AAAAAAATHJ}
01592 {\cf20 // Nothing to do here.}\par
{\bkmkstart AAAAAAATHK}{\bkmkend AAAAAAATHK}
01593 \par
{\bkmkstart AAAAAAATHL}{\bkmkend AAAAAAATHL}
01594 {\cf21 # elif GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAATHM}{\bkmkend AAAAAAATHM}
01595 {\cf20 // Allows a controller thread to pause execution of newly created}\par
{\bkmkstart AAAAAAATHN}{\bkmkend AAAAAAATHN}
01596 {\cf20 // threads until notified.  Instances of this class must be created}\par
{\bkmkstart AAAAAAATHO}{\bkmkend AAAAAAATHO}
01597 {\cf20 // and destroyed in the controller thread.}\par
{\bkmkstart AAAAAAATHP}{\bkmkend AAAAAAATHP}
01598 {\cf20 //}\par
{\bkmkstart AAAAAAATHQ}{\bkmkend AAAAAAATHQ}
01599 {\cf20 // This class is only for testing Google Test's own constructs. Do not}\par
{\bkmkstart AAAAAAATHR}{\bkmkend AAAAAAATHR}
01600 {\cf20 // use it in user tests, either directly or indirectly.}\par
{\bkmkstart AAAAAAATHS}{\bkmkend AAAAAAATHS}
01601 {\cf17 class }Notification \{\par
{\bkmkstart AAAAAAATHT}{\bkmkend AAAAAAATHT}
01602  {\cf17 public}:\par
{\bkmkstart AAAAAAATHU}{\bkmkend AAAAAAATHU}
01603   Notification() : notified_(false) \{\par
{\bkmkstart AAAAAAATHV}{\bkmkend AAAAAAATHV}
01604     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_mutex_init(&mutex_, NULL));\par
{\bkmkstart AAAAAAATHW}{\bkmkend AAAAAAATHW}
01605   \}\par
{\bkmkstart AAAAAAATHX}{\bkmkend AAAAAAATHX}
01606   ~Notification() \{\par
{\bkmkstart AAAAAAATHY}{\bkmkend AAAAAAATHY}
01607     pthread_mutex_destroy(&mutex_);\par
{\bkmkstart AAAAAAATHZ}{\bkmkend AAAAAAATHZ}
01608   \}\par
{\bkmkstart AAAAAAATIA}{\bkmkend AAAAAAATIA}
01609 \par
{\bkmkstart AAAAAAATIB}{\bkmkend AAAAAAATIB}
01610   {\cf20 // Notifies all threads created with this notification to start. Must}\par
{\bkmkstart AAAAAAATIC}{\bkmkend AAAAAAATIC}
01611   {\cf20 // be called from the controller thread.}\par
{\bkmkstart AAAAAAATID}{\bkmkend AAAAAAATID}
01612   {\cf18 void} Notify() \{\par
{\bkmkstart AAAAAAATIE}{\bkmkend AAAAAAATIE}
01613     pthread_mutex_lock(&mutex_);\par
{\bkmkstart AAAAAAATIF}{\bkmkend AAAAAAATIF}
01614     notified_ = {\cf17 true};\par
{\bkmkstart AAAAAAATIG}{\bkmkend AAAAAAATIG}
01615     pthread_mutex_unlock(&mutex_);\par
{\bkmkstart AAAAAAATIH}{\bkmkend AAAAAAATIH}
01616   \}\par
{\bkmkstart AAAAAAATII}{\bkmkend AAAAAAATII}
01617 \par
{\bkmkstart AAAAAAATIJ}{\bkmkend AAAAAAATIJ}
01618   {\cf20 // Blocks until the controller thread notifies. Must be called from a test}\par
{\bkmkstart AAAAAAATIK}{\bkmkend AAAAAAATIK}
01619   {\cf20 // thread.}\par
{\bkmkstart AAAAAAATIL}{\bkmkend AAAAAAATIL}
01620   {\cf18 void} WaitForNotification() \{\par
{\bkmkstart AAAAAAATIM}{\bkmkend AAAAAAATIM}
01621     {\cf19 for} (;;) \{\par
{\bkmkstart AAAAAAATIN}{\bkmkend AAAAAAATIN}
01622       pthread_mutex_lock(&mutex_);\par
{\bkmkstart AAAAAAATIO}{\bkmkend AAAAAAATIO}
01623       {\cf17 const} {\cf18 bool} notified = notified_;\par
{\bkmkstart AAAAAAATIP}{\bkmkend AAAAAAATIP}
01624       pthread_mutex_unlock(&mutex_);\par
{\bkmkstart AAAAAAATIQ}{\bkmkend AAAAAAATIQ}
01625       {\cf19 if} (notified)\par
{\bkmkstart AAAAAAATIR}{\bkmkend AAAAAAATIR}
01626         {\cf19 break};\par
{\bkmkstart AAAAAAATIS}{\bkmkend AAAAAAATIS}
01627       SleepMilliseconds(10);\par
{\bkmkstart AAAAAAATIT}{\bkmkend AAAAAAATIT}
01628     \}\par
{\bkmkstart AAAAAAATIU}{\bkmkend AAAAAAATIU}
01629   \}\par
{\bkmkstart AAAAAAATIV}{\bkmkend AAAAAAATIV}
01630 \par
{\bkmkstart AAAAAAATIW}{\bkmkend AAAAAAATIW}
01631  {\cf17 private}:\par
{\bkmkstart AAAAAAATIX}{\bkmkend AAAAAAATIX}
01632   pthread_mutex_t mutex_;\par
{\bkmkstart AAAAAAATIY}{\bkmkend AAAAAAATIY}
01633   {\cf18 bool} notified_;\par
{\bkmkstart AAAAAAATIZ}{\bkmkend AAAAAAATIZ}
01634 \par
{\bkmkstart AAAAAAATJA}{\bkmkend AAAAAAATJA}
01635   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(Notification);\par
{\bkmkstart AAAAAAATJB}{\bkmkend AAAAAAATJB}
01636 \};\par
{\bkmkstart AAAAAAATJC}{\bkmkend AAAAAAATJC}
01637 \par
{\bkmkstart AAAAAAATJD}{\bkmkend AAAAAAATJD}
01638 {\cf21 # elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
{\bkmkstart AAAAAAATJE}{\bkmkend AAAAAAATJE}
01639 \par
{\bkmkstart AAAAAAATJF}{\bkmkend AAAAAAATJF}
01640 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 void} SleepMilliseconds({\cf18 int} n);\par
{\bkmkstart AAAAAAATJG}{\bkmkend AAAAAAATJG}
01641 \par
{\bkmkstart AAAAAAATJH}{\bkmkend AAAAAAATJH}
01642 {\cf20 // Provides leak-safe Windows kernel handle ownership.}\par
{\bkmkstart AAAAAAATJI}{\bkmkend AAAAAAATJI}
01643 {\cf20 // Used in death tests and in threading support.}\par
{\bkmkstart AAAAAAATJJ}{\bkmkend AAAAAAATJJ}
01644 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AutoHandle \{\par
{\bkmkstart AAAAAAATJK}{\bkmkend AAAAAAATJK}
01645  {\cf17 public}:\par
{\bkmkstart AAAAAAATJL}{\bkmkend AAAAAAATJL}
01646   {\cf20 // Assume that Win32 HANDLE type is equivalent to void*. Doing so allows us to}\par
{\bkmkstart AAAAAAATJM}{\bkmkend AAAAAAATJM}
01647   {\cf20 // avoid including <windows.h> in this header file. Including <windows.h> is}\par
{\bkmkstart AAAAAAATJN}{\bkmkend AAAAAAATJN}
01648   {\cf20 // undesirable because it defines a lot of symbols and macros that tend to}\par
{\bkmkstart AAAAAAATJO}{\bkmkend AAAAAAATJO}
01649   {\cf20 // conflict with client code. This assumption is verified by}\par
{\bkmkstart AAAAAAATJP}{\bkmkend AAAAAAATJP}
01650   {\cf20 // WindowsTypesTest.HANDLEIsVoidStar.}\par
{\bkmkstart AAAAAAATJQ}{\bkmkend AAAAAAATJQ}
01651   {\cf17 typedef} {\cf18 void}* Handle;\par
{\bkmkstart AAAAAAATJR}{\bkmkend AAAAAAATJR}
01652   AutoHandle();\par
{\bkmkstart AAAAAAATJS}{\bkmkend AAAAAAATJS}
01653   {\cf17 explicit} AutoHandle(Handle handle);\par
{\bkmkstart AAAAAAATJT}{\bkmkend AAAAAAATJT}
01654 \par
{\bkmkstart AAAAAAATJU}{\bkmkend AAAAAAATJU}
01655   ~AutoHandle();\par
{\bkmkstart AAAAAAATJV}{\bkmkend AAAAAAATJV}
01656 \par
{\bkmkstart AAAAAAATJW}{\bkmkend AAAAAAATJW}
01657   Handle Get() {\cf17 const};\par
{\bkmkstart AAAAAAATJX}{\bkmkend AAAAAAATJX}
01658   {\cf18 void} Reset();\par
{\bkmkstart AAAAAAATJY}{\bkmkend AAAAAAATJY}
01659   {\cf18 void} Reset(Handle handle);\par
{\bkmkstart AAAAAAATJZ}{\bkmkend AAAAAAATJZ}
01660 \par
{\bkmkstart AAAAAAATKA}{\bkmkend AAAAAAATKA}
01661  {\cf17 private}:\par
{\bkmkstart AAAAAAATKB}{\bkmkend AAAAAAATKB}
01662   {\cf20 // Returns true iff the handle is a valid handle object that can be closed.}\par
{\bkmkstart AAAAAAATKC}{\bkmkend AAAAAAATKC}
01663   {\cf18 bool} IsCloseable() {\cf17 const};\par
{\bkmkstart AAAAAAATKD}{\bkmkend AAAAAAATKD}
01664 \par
{\bkmkstart AAAAAAATKE}{\bkmkend AAAAAAATKE}
01665   Handle handle_;\par
{\bkmkstart AAAAAAATKF}{\bkmkend AAAAAAATKF}
01666 \par
{\bkmkstart AAAAAAATKG}{\bkmkend AAAAAAATKG}
01667   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(AutoHandle);\par
{\bkmkstart AAAAAAATKH}{\bkmkend AAAAAAATKH}
01668 \};\par
{\bkmkstart AAAAAAATKI}{\bkmkend AAAAAAATKI}
01669 \par
{\bkmkstart AAAAAAATKJ}{\bkmkend AAAAAAATKJ}
01670 {\cf20 // Allows a controller thread to pause execution of newly created}\par
{\bkmkstart AAAAAAATKK}{\bkmkend AAAAAAATKK}
01671 {\cf20 // threads until notified.  Instances of this class must be created}\par
{\bkmkstart AAAAAAATKL}{\bkmkend AAAAAAATKL}
01672 {\cf20 // and destroyed in the controller thread.}\par
{\bkmkstart AAAAAAATKM}{\bkmkend AAAAAAATKM}
01673 {\cf20 //}\par
{\bkmkstart AAAAAAATKN}{\bkmkend AAAAAAATKN}
01674 {\cf20 // This class is only for testing Google Test's own constructs. Do not}\par
{\bkmkstart AAAAAAATKO}{\bkmkend AAAAAAATKO}
01675 {\cf20 // use it in user tests, either directly or indirectly.}\par
{\bkmkstart AAAAAAATKP}{\bkmkend AAAAAAATKP}
01676 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 Notification \{\par
{\bkmkstart AAAAAAATKQ}{\bkmkend AAAAAAATKQ}
01677  {\cf17 public}:\par
{\bkmkstart AAAAAAATKR}{\bkmkend AAAAAAATKR}
01678   Notification();\par
{\bkmkstart AAAAAAATKS}{\bkmkend AAAAAAATKS}
01679   {\cf18 void} Notify();\par
{\bkmkstart AAAAAAATKT}{\bkmkend AAAAAAATKT}
01680   {\cf18 void} WaitForNotification();\par
{\bkmkstart AAAAAAATKU}{\bkmkend AAAAAAATKU}
01681 \par
{\bkmkstart AAAAAAATKV}{\bkmkend AAAAAAATKV}
01682  {\cf17 private}:\par
{\bkmkstart AAAAAAATKW}{\bkmkend AAAAAAATKW}
01683   AutoHandle event_;\par
{\bkmkstart AAAAAAATKX}{\bkmkend AAAAAAATKX}
01684 \par
{\bkmkstart AAAAAAATKY}{\bkmkend AAAAAAATKY}
01685   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(Notification);\par
{\bkmkstart AAAAAAATKZ}{\bkmkend AAAAAAATKZ}
01686 \};\par
{\bkmkstart AAAAAAATLA}{\bkmkend AAAAAAATLA}
01687 {\cf21 # endif  }{\cf20 // GTEST_HAS_NOTIFICATION_}\par
{\bkmkstart AAAAAAATLB}{\bkmkend AAAAAAATLB}
01688 \par
{\bkmkstart AAAAAAATLC}{\bkmkend AAAAAAATLC}
01689 {\cf20 // On MinGW, we can have both GTEST_OS_WINDOWS and GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAATLD}{\bkmkend AAAAAAATLD}
01690 {\cf20 // defined, but we don't want to use MinGW's pthreads implementation, which}\par
{\bkmkstart AAAAAAATLE}{\bkmkend AAAAAAATLE}
01691 {\cf20 // has conformance problems with some versions of the POSIX standard.}\par
{\bkmkstart AAAAAAATLF}{\bkmkend AAAAAAATLF}
01692 {\cf21 # if GTEST_HAS_PTHREAD && !GTEST_OS_WINDOWS_MINGW}\par
{\bkmkstart AAAAAAATLG}{\bkmkend AAAAAAATLG}
01693 \par
{\bkmkstart AAAAAAATLH}{\bkmkend AAAAAAATLH}
01694 {\cf20 // As a C-function, ThreadFuncWithCLinkage cannot be templated itself.}\par
{\bkmkstart AAAAAAATLI}{\bkmkend AAAAAAATLI}
01695 {\cf20 // Consequently, it cannot select a correct instantiation of ThreadWithParam}\par
{\bkmkstart AAAAAAATLJ}{\bkmkend AAAAAAATLJ}
01696 {\cf20 // in order to call its Run(). Introducing ThreadWithParamBase as a}\par
{\bkmkstart AAAAAAATLK}{\bkmkend AAAAAAATLK}
01697 {\cf20 // non-templated base class for ThreadWithParam allows us to bypass this}\par
{\bkmkstart AAAAAAATLL}{\bkmkend AAAAAAATLL}
01698 {\cf20 // problem.}\par
{\bkmkstart AAAAAAATLM}{\bkmkend AAAAAAATLM}
01699 {\cf17 class }ThreadWithParamBase \{\par
{\bkmkstart AAAAAAATLN}{\bkmkend AAAAAAATLN}
01700  {\cf17 public}:\par
{\bkmkstart AAAAAAATLO}{\bkmkend AAAAAAATLO}
01701   {\cf17 virtual} ~ThreadWithParamBase() \{\}\par
{\bkmkstart AAAAAAATLP}{\bkmkend AAAAAAATLP}
01702   {\cf17 virtual} {\cf18 void} Run() = 0;\par
{\bkmkstart AAAAAAATLQ}{\bkmkend AAAAAAATLQ}
01703 \};\par
{\bkmkstart AAAAAAATLR}{\bkmkend AAAAAAATLR}
01704 \par
{\bkmkstart AAAAAAATLS}{\bkmkend AAAAAAATLS}
01705 {\cf20 // pthread_create() accepts a pointer to a function type with the C linkage.}\par
{\bkmkstart AAAAAAATLT}{\bkmkend AAAAAAATLT}
01706 {\cf20 // According to the Standard (7.5/1), function types with different linkages}\par
{\bkmkstart AAAAAAATLU}{\bkmkend AAAAAAATLU}
01707 {\cf20 // are different even if they are otherwise identical.  Some compilers (for}\par
{\bkmkstart AAAAAAATLV}{\bkmkend AAAAAAATLV}
01708 {\cf20 // example, SunStudio) treat them as different types.  Since class methods}\par
{\bkmkstart AAAAAAATLW}{\bkmkend AAAAAAATLW}
01709 {\cf20 // cannot be defined with C-linkage we need to define a free C-function to}\par
{\bkmkstart AAAAAAATLX}{\bkmkend AAAAAAATLX}
01710 {\cf20 // pass into pthread_create().}\par
{\bkmkstart AAAAAAATLY}{\bkmkend AAAAAAATLY}
01711 {\cf17 extern} {\cf22 "C"} {\cf17 inline} {\cf18 void}* ThreadFuncWithCLinkage({\cf18 void}* thread) \{\par
{\bkmkstart AAAAAAATLZ}{\bkmkend AAAAAAATLZ}
01712   {\cf17 static_cast<}ThreadWithParamBase*{\cf17 >}(thread)->Run();\par
{\bkmkstart AAAAAAATMA}{\bkmkend AAAAAAATMA}
01713   {\cf19 return} NULL;\par
{\bkmkstart AAAAAAATMB}{\bkmkend AAAAAAATMB}
01714 \}\par
{\bkmkstart AAAAAAATMC}{\bkmkend AAAAAAATMC}
01715 \par
{\bkmkstart AAAAAAATMD}{\bkmkend AAAAAAATMD}
01716 {\cf20 // Helper class for testing Google Test's multi-threading constructs.}\par
{\bkmkstart AAAAAAATME}{\bkmkend AAAAAAATME}
01717 {\cf20 // To use it, write:}\par
{\bkmkstart AAAAAAATMF}{\bkmkend AAAAAAATMF}
01718 {\cf20 //}\par
{\bkmkstart AAAAAAATMG}{\bkmkend AAAAAAATMG}
01719 {\cf20 //   void ThreadFunc(int param) \{ /* Do things with param */ \}}\par
{\bkmkstart AAAAAAATMH}{\bkmkend AAAAAAATMH}
01720 {\cf20 //   Notification thread_can_start;}\par
{\bkmkstart AAAAAAATMI}{\bkmkend AAAAAAATMI}
01721 {\cf20 //   ...}\par
{\bkmkstart AAAAAAATMJ}{\bkmkend AAAAAAATMJ}
01722 {\cf20 //   // The thread_can_start parameter is optional; you can supply NULL.}\par
{\bkmkstart AAAAAAATMK}{\bkmkend AAAAAAATMK}
01723 {\cf20 //   ThreadWithParam<int> thread(&ThreadFunc, 5, &thread_can_start);}\par
{\bkmkstart AAAAAAATML}{\bkmkend AAAAAAATML}
01724 {\cf20 //   thread_can_start.Notify();}\par
{\bkmkstart AAAAAAATMM}{\bkmkend AAAAAAATMM}
01725 {\cf20 //}\par
{\bkmkstart AAAAAAATMN}{\bkmkend AAAAAAATMN}
01726 {\cf20 // These classes are only for testing Google Test's own constructs. Do}\par
{\bkmkstart AAAAAAATMO}{\bkmkend AAAAAAATMO}
01727 {\cf20 // not use them in user tests, either directly or indirectly.}\par
{\bkmkstart AAAAAAATMP}{\bkmkend AAAAAAATMP}
01728 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATMQ}{\bkmkend AAAAAAATMQ}
01729 {\cf17 class }ThreadWithParam : {\cf17 public} ThreadWithParamBase \{\par
{\bkmkstart AAAAAAATMR}{\bkmkend AAAAAAATMR}
01730  {\cf17 public}:\par
{\bkmkstart AAAAAAATMS}{\bkmkend AAAAAAATMS}
01731   {\cf17 typedef} {\cf18 void} UserThreadFunc(T);\par
{\bkmkstart AAAAAAATMT}{\bkmkend AAAAAAATMT}
01732 \par
{\bkmkstart AAAAAAATMU}{\bkmkend AAAAAAATMU}
01733   ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\par
{\bkmkstart AAAAAAATMV}{\bkmkend AAAAAAATMV}
01734       : func_(func),\par
{\bkmkstart AAAAAAATMW}{\bkmkend AAAAAAATMW}
01735         param_(param),\par
{\bkmkstart AAAAAAATMX}{\bkmkend AAAAAAATMX}
01736         thread_can_start_(thread_can_start),\par
{\bkmkstart AAAAAAATMY}{\bkmkend AAAAAAATMY}
01737         finished_(false) \{\par
{\bkmkstart AAAAAAATMZ}{\bkmkend AAAAAAATMZ}
01738     ThreadWithParamBase* {\cf17 const} base = {\cf17 this};\par
{\bkmkstart AAAAAAATNA}{\bkmkend AAAAAAATNA}
01739     {\cf20 // The thread can be created only after all fields except thread_}\par
{\bkmkstart AAAAAAATNB}{\bkmkend AAAAAAATNB}
01740     {\cf20 // have been initialized.}\par
{\bkmkstart AAAAAAATNC}{\bkmkend AAAAAAATNC}
01741     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(\par
{\bkmkstart AAAAAAATND}{\bkmkend AAAAAAATND}
01742         pthread_create(&thread_, 0, &ThreadFuncWithCLinkage, base));\par
{\bkmkstart AAAAAAATNE}{\bkmkend AAAAAAATNE}
01743   \}\par
{\bkmkstart AAAAAAATNF}{\bkmkend AAAAAAATNF}
01744   ~ThreadWithParam() \{ Join(); \}\par
{\bkmkstart AAAAAAATNG}{\bkmkend AAAAAAATNG}
01745 \par
{\bkmkstart AAAAAAATNH}{\bkmkend AAAAAAATNH}
01746   {\cf18 void} Join() \{\par
{\bkmkstart AAAAAAATNI}{\bkmkend AAAAAAATNI}
01747     {\cf19 if} (!finished_) \{\par
{\bkmkstart AAAAAAATNJ}{\bkmkend AAAAAAATNJ}
01748       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_join(thread_, 0));\par
{\bkmkstart AAAAAAATNK}{\bkmkend AAAAAAATNK}
01749       finished_ = {\cf17 true};\par
{\bkmkstart AAAAAAATNL}{\bkmkend AAAAAAATNL}
01750     \}\par
{\bkmkstart AAAAAAATNM}{\bkmkend AAAAAAATNM}
01751   \}\par
{\bkmkstart AAAAAAATNN}{\bkmkend AAAAAAATNN}
01752 \par
{\bkmkstart AAAAAAATNO}{\bkmkend AAAAAAATNO}
01753   {\cf17 virtual} {\cf18 void} Run() \{\par
{\bkmkstart AAAAAAATNP}{\bkmkend AAAAAAATNP}
01754     {\cf19 if} (thread_can_start_ != NULL)\par
{\bkmkstart AAAAAAATNQ}{\bkmkend AAAAAAATNQ}
01755       thread_can_start_->WaitForNotification();\par
{\bkmkstart AAAAAAATNR}{\bkmkend AAAAAAATNR}
01756     func_(param_);\par
{\bkmkstart AAAAAAATNS}{\bkmkend AAAAAAATNS}
01757   \}\par
{\bkmkstart AAAAAAATNT}{\bkmkend AAAAAAATNT}
01758 \par
{\bkmkstart AAAAAAATNU}{\bkmkend AAAAAAATNU}
01759  {\cf17 private}:\par
{\bkmkstart AAAAAAATNV}{\bkmkend AAAAAAATNV}
01760   UserThreadFunc* {\cf17 const} func_;  {\cf20 // User-supplied thread function.}\par
{\bkmkstart AAAAAAATNW}{\bkmkend AAAAAAATNW}
01761   {\cf17 const} T param_;  {\cf20 // User-supplied parameter to the thread function.}\par
{\bkmkstart AAAAAAATNX}{\bkmkend AAAAAAATNX}
01762   {\cf20 // When non-NULL, used to block execution until the controller thread}\par
{\bkmkstart AAAAAAATNY}{\bkmkend AAAAAAATNY}
01763   {\cf20 // notifies.}\par
{\bkmkstart AAAAAAATNZ}{\bkmkend AAAAAAATNZ}
01764   Notification* {\cf17 const} thread_can_start_;\par
{\bkmkstart AAAAAAATOA}{\bkmkend AAAAAAATOA}
01765   {\cf18 bool} finished_;  {\cf20 // true iff we know that the thread function has finished.}\par
{\bkmkstart AAAAAAATOB}{\bkmkend AAAAAAATOB}
01766   pthread_t thread_;  {\cf20 // The native thread object.}\par
{\bkmkstart AAAAAAATOC}{\bkmkend AAAAAAATOC}
01767 \par
{\bkmkstart AAAAAAATOD}{\bkmkend AAAAAAATOD}
01768   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ThreadWithParam);\par
{\bkmkstart AAAAAAATOE}{\bkmkend AAAAAAATOE}
01769 \};\par
{\bkmkstart AAAAAAATOF}{\bkmkend AAAAAAATOF}
01770 {\cf21 # endif  }{\cf20 // !GTEST_OS_WINDOWS && GTEST_HAS_PTHREAD ||}\par
{\bkmkstart AAAAAAATOG}{\bkmkend AAAAAAATOG}
01771          {\cf20 // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
{\bkmkstart AAAAAAATOH}{\bkmkend AAAAAAATOH}
01772 \par
{\bkmkstart AAAAAAATOI}{\bkmkend AAAAAAATOI}
01773 {\cf21 # if GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
{\bkmkstart AAAAAAATOJ}{\bkmkend AAAAAAATOJ}
01774 {\cf20 // Mutex and ThreadLocal have already been imported into the namespace.}\par
{\bkmkstart AAAAAAATOK}{\bkmkend AAAAAAATOK}
01775 {\cf20 // Nothing to do here.}\par
{\bkmkstart AAAAAAATOL}{\bkmkend AAAAAAATOL}
01776 \par
{\bkmkstart AAAAAAATOM}{\bkmkend AAAAAAATOM}
01777 {\cf21 # elif GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
{\bkmkstart AAAAAAATON}{\bkmkend AAAAAAATON}
01778 \par
{\bkmkstart AAAAAAATOO}{\bkmkend AAAAAAATOO}
01779 {\cf20 // Mutex implements mutex on Windows platforms.  It is used in conjunction}\par
{\bkmkstart AAAAAAATOP}{\bkmkend AAAAAAATOP}
01780 {\cf20 // with class MutexLock:}\par
{\bkmkstart AAAAAAATOQ}{\bkmkend AAAAAAATOQ}
01781 {\cf20 //}\par
{\bkmkstart AAAAAAATOR}{\bkmkend AAAAAAATOR}
01782 {\cf20 //   Mutex mutex;}\par
{\bkmkstart AAAAAAATOS}{\bkmkend AAAAAAATOS}
01783 {\cf20 //   ...}\par
{\bkmkstart AAAAAAATOT}{\bkmkend AAAAAAATOT}
01784 {\cf20 //   MutexLock lock(&mutex);  // Acquires the mutex and releases it at the}\par
{\bkmkstart AAAAAAATOU}{\bkmkend AAAAAAATOU}
01785 {\cf20 //                            // end of the current scope.}\par
{\bkmkstart AAAAAAATOV}{\bkmkend AAAAAAATOV}
01786 {\cf20 //}\par
{\bkmkstart AAAAAAATOW}{\bkmkend AAAAAAATOW}
01787 {\cf20 // A static Mutex *must* be defined or declared using one of the following}\par
{\bkmkstart AAAAAAATOX}{\bkmkend AAAAAAATOX}
01788 {\cf20 // macros:}\par
{\bkmkstart AAAAAAATOY}{\bkmkend AAAAAAATOY}
01789 {\cf20 //   GTEST_DEFINE_STATIC_MUTEX_(g_some_mutex);}\par
{\bkmkstart AAAAAAATOZ}{\bkmkend AAAAAAATOZ}
01790 {\cf20 //   GTEST_DECLARE_STATIC_MUTEX_(g_some_mutex);}\par
{\bkmkstart AAAAAAATPA}{\bkmkend AAAAAAATPA}
01791 {\cf20 //}\par
{\bkmkstart AAAAAAATPB}{\bkmkend AAAAAAATPB}
01792 {\cf20 // (A non-static Mutex is defined/declared in the usual way).}\par
{\bkmkstart AAAAAAATPC}{\bkmkend AAAAAAATPC}
01793 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 Mutex \{\par
{\bkmkstart AAAAAAATPD}{\bkmkend AAAAAAATPD}
01794  {\cf17 public}:\par
{\bkmkstart AAAAAAATPE}{\bkmkend AAAAAAATPE}
01795   {\cf17 enum} MutexType \{ kStatic = 0, kDynamic = 1 \};\par
{\bkmkstart AAAAAAATPF}{\bkmkend AAAAAAATPF}
01796   {\cf20 // We rely on kStaticMutex being 0 as it is to what the linker initializes}\par
{\bkmkstart AAAAAAATPG}{\bkmkend AAAAAAATPG}
01797   {\cf20 // type_ in static mutexes.  critical_section_ will be initialized lazily}\par
{\bkmkstart AAAAAAATPH}{\bkmkend AAAAAAATPH}
01798   {\cf20 // in ThreadSafeLazyInit().}\par
{\bkmkstart AAAAAAATPI}{\bkmkend AAAAAAATPI}
01799   {\cf17 enum} StaticConstructorSelector \{ kStaticMutex = 0 \};\par
{\bkmkstart AAAAAAATPJ}{\bkmkend AAAAAAATPJ}
01800 \par
{\bkmkstart AAAAAAATPK}{\bkmkend AAAAAAATPK}
01801   {\cf20 // This constructor intentionally does nothing.  It relies on type_ being}\par
{\bkmkstart AAAAAAATPL}{\bkmkend AAAAAAATPL}
01802   {\cf20 // statically initialized to 0 (effectively setting it to kStatic) and on}\par
{\bkmkstart AAAAAAATPM}{\bkmkend AAAAAAATPM}
01803   {\cf20 // ThreadSafeLazyInit() to lazily initialize the rest of the members.}\par
{\bkmkstart AAAAAAATPN}{\bkmkend AAAAAAATPN}
01804   {\cf17 explicit} Mutex(StaticConstructorSelector {\cf20 /*dummy*/}) \{\}\par
{\bkmkstart AAAAAAATPO}{\bkmkend AAAAAAATPO}
01805 \par
{\bkmkstart AAAAAAATPP}{\bkmkend AAAAAAATPP}
01806   Mutex();\par
{\bkmkstart AAAAAAATPQ}{\bkmkend AAAAAAATPQ}
01807   ~Mutex();\par
{\bkmkstart AAAAAAATPR}{\bkmkend AAAAAAATPR}
01808 \par
{\bkmkstart AAAAAAATPS}{\bkmkend AAAAAAATPS}
01809   {\cf18 void} Lock();\par
{\bkmkstart AAAAAAATPT}{\bkmkend AAAAAAATPT}
01810 \par
{\bkmkstart AAAAAAATPU}{\bkmkend AAAAAAATPU}
01811   {\cf18 void} Unlock();\par
{\bkmkstart AAAAAAATPV}{\bkmkend AAAAAAATPV}
01812 \par
{\bkmkstart AAAAAAATPW}{\bkmkend AAAAAAATPW}
01813   {\cf20 // Does nothing if the current thread holds the mutex. Otherwise, crashes}\par
{\bkmkstart AAAAAAATPX}{\bkmkend AAAAAAATPX}
01814   {\cf20 // with high probability.}\par
{\bkmkstart AAAAAAATPY}{\bkmkend AAAAAAATPY}
01815   {\cf18 void} AssertHeld();\par
{\bkmkstart AAAAAAATPZ}{\bkmkend AAAAAAATPZ}
01816 \par
{\bkmkstart AAAAAAATQA}{\bkmkend AAAAAAATQA}
01817  {\cf17 private}:\par
{\bkmkstart AAAAAAATQB}{\bkmkend AAAAAAATQB}
01818   {\cf20 // Initializes owner_thread_id_ and critical_section_ in static mutexes.}\par
{\bkmkstart AAAAAAATQC}{\bkmkend AAAAAAATQC}
01819   {\cf18 void} ThreadSafeLazyInit();\par
{\bkmkstart AAAAAAATQD}{\bkmkend AAAAAAATQD}
01820 \par
{\bkmkstart AAAAAAATQE}{\bkmkend AAAAAAATQE}
01821   {\cf20 // Per https://blogs.msdn.microsoft.com/oldnewthing/20040223-00/?p=40503,}\par
{\bkmkstart AAAAAAATQF}{\bkmkend AAAAAAATQF}
01822   {\cf20 // we assume that 0 is an invalid value for thread IDs.}\par
{\bkmkstart AAAAAAATQG}{\bkmkend AAAAAAATQG}
01823   {\cf18 unsigned} {\cf18 int} owner_thread_id_;\par
{\bkmkstart AAAAAAATQH}{\bkmkend AAAAAAATQH}
01824 \par
{\bkmkstart AAAAAAATQI}{\bkmkend AAAAAAATQI}
01825   {\cf20 // For static mutexes, we rely on these members being initialized to zeros}\par
{\bkmkstart AAAAAAATQJ}{\bkmkend AAAAAAATQJ}
01826   {\cf20 // by the linker.}\par
{\bkmkstart AAAAAAATQK}{\bkmkend AAAAAAATQK}
01827   MutexType type_;\par
{\bkmkstart AAAAAAATQL}{\bkmkend AAAAAAATQL}
01828   {\cf18 long} critical_section_init_phase_;  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAATQM}{\bkmkend AAAAAAATQM}
01829   GTEST_CRITICAL_SECTION* critical_section_;\par
{\bkmkstart AAAAAAATQN}{\bkmkend AAAAAAATQN}
01830 \par
{\bkmkstart AAAAAAATQO}{\bkmkend AAAAAAATQO}
01831   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(Mutex);\par
{\bkmkstart AAAAAAATQP}{\bkmkend AAAAAAATQP}
01832 \};\par
{\bkmkstart AAAAAAATQQ}{\bkmkend AAAAAAATQQ}
01833 \par
{\bkmkstart AAAAAAATQR}{\bkmkend AAAAAAATQR}
01834 {\cf21 # define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
{\bkmkstart AAAAAAATQS}{\bkmkend AAAAAAATQS}
01835 {\cf21     extern ::testing::internal::Mutex mutex}\par
{\bkmkstart AAAAAAATQT}{\bkmkend AAAAAAATQT}
01836 \par
{\bkmkstart AAAAAAATQU}{\bkmkend AAAAAAATQU}
01837 {\cf21 # define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\}\par
{\bkmkstart AAAAAAATQV}{\bkmkend AAAAAAATQV}
01838 {\cf21     ::testing::internal::Mutex mutex(::testing::internal::Mutex::kStaticMutex)}\par
{\bkmkstart AAAAAAATQW}{\bkmkend AAAAAAATQW}
01839 \par
{\bkmkstart AAAAAAATQX}{\bkmkend AAAAAAATQX}
01840 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
{\bkmkstart AAAAAAATQY}{\bkmkend AAAAAAATQY}
01841 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
{\bkmkstart AAAAAAATQZ}{\bkmkend AAAAAAATQZ}
01842 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
{\bkmkstart AAAAAAATRA}{\bkmkend AAAAAAATRA}
01843 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
{\bkmkstart AAAAAAATRB}{\bkmkend AAAAAAATRB}
01844 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
{\bkmkstart AAAAAAATRC}{\bkmkend AAAAAAATRC}
01845 {\cf17 class }GTestMutexLock \{\par
{\bkmkstart AAAAAAATRD}{\bkmkend AAAAAAATRD}
01846  {\cf17 public}:\par
{\bkmkstart AAAAAAATRE}{\bkmkend AAAAAAATRE}
01847   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
(Mutex* mutex)\par
{\bkmkstart AAAAAAATRG}{\bkmkend AAAAAAATRG}
01848       : mutex_(mutex) \{ mutex_->Lock(); \}\par
{\bkmkstart AAAAAAATRH}{\bkmkend AAAAAAATRH}
01849 \par
{\bkmkstart AAAAAAATRI}{\bkmkend AAAAAAATRI}
01850   ~GTestMutexLock() \{ mutex_->Unlock(); \}\par
{\bkmkstart AAAAAAATRJ}{\bkmkend AAAAAAATRJ}
01851 \par
{\bkmkstart AAAAAAATRK}{\bkmkend AAAAAAATRK}
01852  {\cf17 private}:\par
{\bkmkstart AAAAAAATRL}{\bkmkend AAAAAAATRL}
01853   Mutex* {\cf17 const} mutex_;\par
{\bkmkstart AAAAAAATRM}{\bkmkend AAAAAAATRM}
01854 \par
{\bkmkstart AAAAAAATRN}{\bkmkend AAAAAAATRN}
01855   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
);\par
{\bkmkstart AAAAAAATRO}{\bkmkend AAAAAAATRO}
01856 \};\par
{\bkmkstart AAAAAAATRP}{\bkmkend AAAAAAATRP}
01857 \par
{\bkmkstart AAAAAAATRQ}{\bkmkend AAAAAAATRQ}
01858 {\cf17 typedef} GTestMutexLock {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRR" }{}}{\fldrslt {\cs37\ul\cf2 MutexLock}}}
;\par
{\bkmkstart AAAAAAATRS}{\bkmkend AAAAAAATRS}
01859 \par
{\bkmkstart AAAAAAATRT}{\bkmkend AAAAAAATRT}
01860 {\cf20 // Base class for ValueHolder<T>.  Allows a caller to hold and delete a value}\par
{\bkmkstart AAAAAAATRU}{\bkmkend AAAAAAATRU}
01861 {\cf20 // without knowing its type.}\par
{\bkmkstart AAAAAAATRV}{\bkmkend AAAAAAATRV}
01862 {\cf17 class }ThreadLocalValueHolderBase \{\par
{\bkmkstart AAAAAAATRW}{\bkmkend AAAAAAATRW}
01863  {\cf17 public}:\par
{\bkmkstart AAAAAAATRX}{\bkmkend AAAAAAATRX}
01864   {\cf17 virtual} ~ThreadLocalValueHolderBase() \{\}\par
{\bkmkstart AAAAAAATRY}{\bkmkend AAAAAAATRY}
01865 \};\par
{\bkmkstart AAAAAAATRZ}{\bkmkend AAAAAAATRZ}
01866 \par
{\bkmkstart AAAAAAATSA}{\bkmkend AAAAAAATSA}
01867 {\cf20 // Provides a way for a thread to send notifications to a ThreadLocal}\par
{\bkmkstart AAAAAAATSB}{\bkmkend AAAAAAATSB}
01868 {\cf20 // regardless of its parameter type.}\par
{\bkmkstart AAAAAAATSC}{\bkmkend AAAAAAATSC}
01869 {\cf17 class }ThreadLocalBase \{\par
{\bkmkstart AAAAAAATSD}{\bkmkend AAAAAAATSD}
01870  {\cf17 public}:\par
{\bkmkstart AAAAAAATSE}{\bkmkend AAAAAAATSE}
01871   {\cf20 // Creates a new ValueHolder<T> object holding a default value passed to}\par
{\bkmkstart AAAAAAATSF}{\bkmkend AAAAAAATSF}
01872   {\cf20 // this ThreadLocal<T>'s constructor and returns it.  It is the caller's}\par
{\bkmkstart AAAAAAATSG}{\bkmkend AAAAAAATSG}
01873   {\cf20 // responsibility not to call this when the ThreadLocal<T> instance already}\par
{\bkmkstart AAAAAAATSH}{\bkmkend AAAAAAATSH}
01874   {\cf20 // has a value on the current thread.}\par
{\bkmkstart AAAAAAATSI}{\bkmkend AAAAAAATSI}
01875   {\cf17 virtual} ThreadLocalValueHolderBase* NewValueForCurrentThread() {\cf17 const} = 0;\par
{\bkmkstart AAAAAAATSJ}{\bkmkend AAAAAAATSJ}
01876 \par
{\bkmkstart AAAAAAATSK}{\bkmkend AAAAAAATSK}
01877  {\cf17 protected}:\par
{\bkmkstart AAAAAAATSL}{\bkmkend AAAAAAATSL}
01878   ThreadLocalBase() \{\}\par
{\bkmkstart AAAAAAATSM}{\bkmkend AAAAAAATSM}
01879   {\cf17 virtual} ~ThreadLocalBase() \{\}\par
{\bkmkstart AAAAAAATSN}{\bkmkend AAAAAAATSN}
01880 \par
{\bkmkstart AAAAAAATSO}{\bkmkend AAAAAAATSO}
01881  {\cf17 private}:\par
{\bkmkstart AAAAAAATSP}{\bkmkend AAAAAAATSP}
01882   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ThreadLocalBase);\par
{\bkmkstart AAAAAAATSQ}{\bkmkend AAAAAAATSQ}
01883 \};\par
{\bkmkstart AAAAAAATSR}{\bkmkend AAAAAAATSR}
01884 \par
{\bkmkstart AAAAAAATSS}{\bkmkend AAAAAAATSS}
01885 {\cf20 // Maps a thread to a set of ThreadLocals that have values instantiated on that}\par
{\bkmkstart AAAAAAATST}{\bkmkend AAAAAAATST}
01886 {\cf20 // thread and notifies them when the thread exits.  A ThreadLocal instance is}\par
{\bkmkstart AAAAAAATSU}{\bkmkend AAAAAAATSU}
01887 {\cf20 // expected to persist until all threads it has values on have terminated.}\par
{\bkmkstart AAAAAAATSV}{\bkmkend AAAAAAATSV}
01888 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 ThreadLocalRegistry \{\par
{\bkmkstart AAAAAAATSW}{\bkmkend AAAAAAATSW}
01889  {\cf17 public}:\par
{\bkmkstart AAAAAAATSX}{\bkmkend AAAAAAATSX}
01890   {\cf20 // Registers thread_local_instance as having value on the current thread.}\par
{\bkmkstart AAAAAAATSY}{\bkmkend AAAAAAATSY}
01891   {\cf20 // Returns a value that can be used to identify the thread from other threads.}\par
{\bkmkstart AAAAAAATSZ}{\bkmkend AAAAAAATSZ}
01892   {\cf17 static} ThreadLocalValueHolderBase* GetValueOnCurrentThread(\par
{\bkmkstart AAAAAAATTA}{\bkmkend AAAAAAATTA}
01893       {\cf17 const} ThreadLocalBase* thread_local_instance);\par
{\bkmkstart AAAAAAATTB}{\bkmkend AAAAAAATTB}
01894 \par
{\bkmkstart AAAAAAATTC}{\bkmkend AAAAAAATTC}
01895   {\cf20 // Invoked when a ThreadLocal instance is destroyed.}\par
{\bkmkstart AAAAAAATTD}{\bkmkend AAAAAAATTD}
01896   {\cf17 static} {\cf18 void} OnThreadLocalDestroyed(\par
{\bkmkstart AAAAAAATTE}{\bkmkend AAAAAAATTE}
01897       {\cf17 const} ThreadLocalBase* thread_local_instance);\par
{\bkmkstart AAAAAAATTF}{\bkmkend AAAAAAATTF}
01898 \};\par
{\bkmkstart AAAAAAATTG}{\bkmkend AAAAAAATTG}
01899 \par
{\bkmkstart AAAAAAATTH}{\bkmkend AAAAAAATTH}
01900 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 ThreadWithParamBase \{\par
{\bkmkstart AAAAAAATTI}{\bkmkend AAAAAAATTI}
01901  {\cf17 public}:\par
{\bkmkstart AAAAAAATTJ}{\bkmkend AAAAAAATTJ}
01902   {\cf18 void} Join();\par
{\bkmkstart AAAAAAATTK}{\bkmkend AAAAAAATTK}
01903 \par
{\bkmkstart AAAAAAATTL}{\bkmkend AAAAAAATTL}
01904  {\cf17 protected}:\par
{\bkmkstart AAAAAAATTM}{\bkmkend AAAAAAATTM}
01905   {\cf17 class }Runnable \{\par
{\bkmkstart AAAAAAATTN}{\bkmkend AAAAAAATTN}
01906    {\cf17 public}:\par
{\bkmkstart AAAAAAATTO}{\bkmkend AAAAAAATTO}
01907     {\cf17 virtual} ~Runnable() \{\}\par
{\bkmkstart AAAAAAATTP}{\bkmkend AAAAAAATTP}
01908     {\cf17 virtual} {\cf18 void} Run() = 0;\par
{\bkmkstart AAAAAAATTQ}{\bkmkend AAAAAAATTQ}
01909   \};\par
{\bkmkstart AAAAAAATTR}{\bkmkend AAAAAAATTR}
01910 \par
{\bkmkstart AAAAAAATTS}{\bkmkend AAAAAAATTS}
01911   ThreadWithParamBase(Runnable *runnable, Notification* thread_can_start);\par
{\bkmkstart AAAAAAATTT}{\bkmkend AAAAAAATTT}
01912   {\cf17 virtual} ~ThreadWithParamBase();\par
{\bkmkstart AAAAAAATTU}{\bkmkend AAAAAAATTU}
01913 \par
{\bkmkstart AAAAAAATTV}{\bkmkend AAAAAAATTV}
01914  {\cf17 private}:\par
{\bkmkstart AAAAAAATTW}{\bkmkend AAAAAAATTW}
01915   AutoHandle thread_;\par
{\bkmkstart AAAAAAATTX}{\bkmkend AAAAAAATTX}
01916 \};\par
{\bkmkstart AAAAAAATTY}{\bkmkend AAAAAAATTY}
01917 \par
{\bkmkstart AAAAAAATTZ}{\bkmkend AAAAAAATTZ}
01918 {\cf20 // Helper class for testing Google Test's multi-threading constructs.}\par
{\bkmkstart AAAAAAATUA}{\bkmkend AAAAAAATUA}
01919 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATUB}{\bkmkend AAAAAAATUB}
01920 {\cf17 class }ThreadWithParam : {\cf17 public} ThreadWithParamBase \{\par
{\bkmkstart AAAAAAATUC}{\bkmkend AAAAAAATUC}
01921  {\cf17 public}:\par
{\bkmkstart AAAAAAATUD}{\bkmkend AAAAAAATUD}
01922   {\cf17 typedef} {\cf18 void} UserThreadFunc(T);\par
{\bkmkstart AAAAAAATUE}{\bkmkend AAAAAAATUE}
01923 \par
{\bkmkstart AAAAAAATUF}{\bkmkend AAAAAAATUF}
01924   ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)\par
{\bkmkstart AAAAAAATUG}{\bkmkend AAAAAAATUG}
01925       : ThreadWithParamBase(new RunnableImpl(func, param), thread_can_start) \{\par
{\bkmkstart AAAAAAATUH}{\bkmkend AAAAAAATUH}
01926   \}\par
{\bkmkstart AAAAAAATUI}{\bkmkend AAAAAAATUI}
01927   {\cf17 virtual} ~ThreadWithParam() \{\}\par
{\bkmkstart AAAAAAATUJ}{\bkmkend AAAAAAATUJ}
01928 \par
{\bkmkstart AAAAAAATUK}{\bkmkend AAAAAAATUK}
01929  {\cf17 private}:\par
{\bkmkstart AAAAAAATUL}{\bkmkend AAAAAAATUL}
01930   {\cf17 class }RunnableImpl : {\cf17 public} Runnable \{\par
{\bkmkstart AAAAAAATUM}{\bkmkend AAAAAAATUM}
01931    {\cf17 public}:\par
{\bkmkstart AAAAAAATUN}{\bkmkend AAAAAAATUN}
01932     RunnableImpl(UserThreadFunc* func, T param)\par
{\bkmkstart AAAAAAATUO}{\bkmkend AAAAAAATUO}
01933         : func_(func),\par
{\bkmkstart AAAAAAATUP}{\bkmkend AAAAAAATUP}
01934           param_(param) \{\par
{\bkmkstart AAAAAAATUQ}{\bkmkend AAAAAAATUQ}
01935     \}\par
{\bkmkstart AAAAAAATUR}{\bkmkend AAAAAAATUR}
01936     {\cf17 virtual} ~RunnableImpl() \{\}\par
{\bkmkstart AAAAAAATUS}{\bkmkend AAAAAAATUS}
01937     {\cf17 virtual} {\cf18 void} Run() \{\par
{\bkmkstart AAAAAAATUT}{\bkmkend AAAAAAATUT}
01938       func_(param_);\par
{\bkmkstart AAAAAAATUU}{\bkmkend AAAAAAATUU}
01939     \}\par
{\bkmkstart AAAAAAATUV}{\bkmkend AAAAAAATUV}
01940 \par
{\bkmkstart AAAAAAATUW}{\bkmkend AAAAAAATUW}
01941    {\cf17 private}:\par
{\bkmkstart AAAAAAATUX}{\bkmkend AAAAAAATUX}
01942     UserThreadFunc* {\cf17 const} func_;\par
{\bkmkstart AAAAAAATUY}{\bkmkend AAAAAAATUY}
01943     {\cf17 const} T param_;\par
{\bkmkstart AAAAAAATUZ}{\bkmkend AAAAAAATUZ}
01944 \par
{\bkmkstart AAAAAAATVA}{\bkmkend AAAAAAATVA}
01945     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(RunnableImpl);\par
{\bkmkstart AAAAAAATVB}{\bkmkend AAAAAAATVB}
01946   \};\par
{\bkmkstart AAAAAAATVC}{\bkmkend AAAAAAATVC}
01947 \par
{\bkmkstart AAAAAAATVD}{\bkmkend AAAAAAATVD}
01948   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ThreadWithParam);\par
{\bkmkstart AAAAAAATVE}{\bkmkend AAAAAAATVE}
01949 \};\par
{\bkmkstart AAAAAAATVF}{\bkmkend AAAAAAATVF}
01950 \par
{\bkmkstart AAAAAAATVG}{\bkmkend AAAAAAATVG}
01951 {\cf20 // Implements thread-local storage on Windows systems.}\par
{\bkmkstart AAAAAAATVH}{\bkmkend AAAAAAATVH}
01952 {\cf20 //}\par
{\bkmkstart AAAAAAATVI}{\bkmkend AAAAAAATVI}
01953 {\cf20 //   // Thread 1}\par
{\bkmkstart AAAAAAATVJ}{\bkmkend AAAAAAATVJ}
01954 {\cf20 //   ThreadLocal<int> tl(100);  // 100 is the default value for each thread.}\par
{\bkmkstart AAAAAAATVK}{\bkmkend AAAAAAATVK}
01955 {\cf20 //}\par
{\bkmkstart AAAAAAATVL}{\bkmkend AAAAAAATVL}
01956 {\cf20 //   // Thread 2}\par
{\bkmkstart AAAAAAATVM}{\bkmkend AAAAAAATVM}
01957 {\cf20 //   tl.set(150);  // Changes the value for thread 2 only.}\par
{\bkmkstart AAAAAAATVN}{\bkmkend AAAAAAATVN}
01958 {\cf20 //   EXPECT_EQ(150, tl.get());}\par
{\bkmkstart AAAAAAATVO}{\bkmkend AAAAAAATVO}
01959 {\cf20 //}\par
{\bkmkstart AAAAAAATVP}{\bkmkend AAAAAAATVP}
01960 {\cf20 //   // Thread 1}\par
{\bkmkstart AAAAAAATVQ}{\bkmkend AAAAAAATVQ}
01961 {\cf20 //   EXPECT_EQ(100, tl.get());  // In thread 1, tl has the original value.}\par
{\bkmkstart AAAAAAATVR}{\bkmkend AAAAAAATVR}
01962 {\cf20 //   tl.set(200);}\par
{\bkmkstart AAAAAAATVS}{\bkmkend AAAAAAATVS}
01963 {\cf20 //   EXPECT_EQ(200, tl.get());}\par
{\bkmkstart AAAAAAATVT}{\bkmkend AAAAAAATVT}
01964 {\cf20 //}\par
{\bkmkstart AAAAAAATVU}{\bkmkend AAAAAAATVU}
01965 {\cf20 // The template type argument T must have a public copy constructor.}\par
{\bkmkstart AAAAAAATVV}{\bkmkend AAAAAAATVV}
01966 {\cf20 // In addition, the default ThreadLocal constructor requires T to have}\par
{\bkmkstart AAAAAAATVW}{\bkmkend AAAAAAATVW}
01967 {\cf20 // a public default constructor.}\par
{\bkmkstart AAAAAAATVX}{\bkmkend AAAAAAATVX}
01968 {\cf20 //}\par
{\bkmkstart AAAAAAATVY}{\bkmkend AAAAAAATVY}
01969 {\cf20 // The users of a TheadLocal instance have to make sure that all but one}\par
{\bkmkstart AAAAAAATVZ}{\bkmkend AAAAAAATVZ}
01970 {\cf20 // threads (including the main one) using that instance have exited before}\par
{\bkmkstart AAAAAAATWA}{\bkmkend AAAAAAATWA}
01971 {\cf20 // destroying it. Otherwise, the per-thread objects managed for them by the}\par
{\bkmkstart AAAAAAATWB}{\bkmkend AAAAAAATWB}
01972 {\cf20 // ThreadLocal instance are not guaranteed to be destroyed on all platforms.}\par
{\bkmkstart AAAAAAATWC}{\bkmkend AAAAAAATWC}
01973 {\cf20 //}\par
{\bkmkstart AAAAAAATWD}{\bkmkend AAAAAAATWD}
01974 {\cf20 // Google Test only uses global ThreadLocal objects.  That means they}\par
{\bkmkstart AAAAAAATWE}{\bkmkend AAAAAAATWE}
01975 {\cf20 // will die after main() has returned.  Therefore, no per-thread}\par
{\bkmkstart AAAAAAATWF}{\bkmkend AAAAAAATWF}
01976 {\cf20 // object managed by Google Test will be leaked as long as all threads}\par
{\bkmkstart AAAAAAATWG}{\bkmkend AAAAAAATWG}
01977 {\cf20 // using Google Test have exited when main() returns.}\par
{\bkmkstart AAAAAAATWH}{\bkmkend AAAAAAATWH}
01978 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAATWI}{\bkmkend AAAAAAATWI}
01979 {\cf17 class }ThreadLocal : {\cf17 public} ThreadLocalBase \{\par
{\bkmkstart AAAAAAATWJ}{\bkmkend AAAAAAATWJ}
01980  {\cf17 public}:\par
{\bkmkstart AAAAAAATWK}{\bkmkend AAAAAAATWK}
01981   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWL" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
() : default_factory_(new DefaultValueHolderFactory()) \{\}\par
{\bkmkstart AAAAAAATWM}{\bkmkend AAAAAAATWM}
01982   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWL" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
({\cf17 const} T& value)\par
{\bkmkstart AAAAAAATWN}{\bkmkend AAAAAAATWN}
01983       : default_factory_(new InstanceValueHolderFactory(value)) \{\}\par
{\bkmkstart AAAAAAATWO}{\bkmkend AAAAAAATWO}
01984 \par
{\bkmkstart AAAAAAATWP}{\bkmkend AAAAAAATWP}
01985   ~ThreadLocal() \{ ThreadLocalRegistry::OnThreadLocalDestroyed({\cf17 this}); \}\par
{\bkmkstart AAAAAAATWQ}{\bkmkend AAAAAAATWQ}
01986 \par
{\bkmkstart AAAAAAATWR}{\bkmkend AAAAAAATWR}
01987   T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
() \{ {\cf19 return} GetOrCreateValue(); \}\par
{\bkmkstart AAAAAAATWT}{\bkmkend AAAAAAATWT}
01988   {\cf17 const} T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
(){\cf17  const }\{ {\cf19 return} GetOrCreateValue(); \}\par
{\bkmkstart AAAAAAATWU}{\bkmkend AAAAAAATWU}
01989   {\cf17 const} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWV" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
(){\cf17  const }\{ {\cf19 return} *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
(); \}\par
{\bkmkstart AAAAAAATWW}{\bkmkend AAAAAAATWW}
01990   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWX" }{}}{\fldrslt {\cs37\ul\cf2 set}}}
({\cf17 const} T& value) \{ *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
() = value; \}\par
{\bkmkstart AAAAAAATWY}{\bkmkend AAAAAAATWY}
01991 \par
{\bkmkstart AAAAAAATWZ}{\bkmkend AAAAAAATWZ}
01992  {\cf17 private}:\par
{\bkmkstart AAAAAAATXA}{\bkmkend AAAAAAATXA}
01993   {\cf20 // Holds a value of T.  Can be deleted via its base class without the caller}\par
{\bkmkstart AAAAAAATXB}{\bkmkend AAAAAAATXB}
01994   {\cf20 // knowing the type of T.}\par
{\bkmkstart AAAAAAATXC}{\bkmkend AAAAAAATXC}
01995   {\cf17 class }ValueHolder : {\cf17 public} ThreadLocalValueHolderBase \{\par
{\bkmkstart AAAAAAATXD}{\bkmkend AAAAAAATXD}
01996    {\cf17 public}:\par
{\bkmkstart AAAAAAATXE}{\bkmkend AAAAAAATXE}
01997     ValueHolder() : value_() \{\}\par
{\bkmkstart AAAAAAATXF}{\bkmkend AAAAAAATXF}
01998     {\cf17 explicit} ValueHolder({\cf17 const} T& value) : value_(value) \{\}\par
{\bkmkstart AAAAAAATXG}{\bkmkend AAAAAAATXG}
01999 \par
{\bkmkstart AAAAAAATXH}{\bkmkend AAAAAAATXH}
02000     T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
() \{ {\cf19 return} &value_; \}\par
{\bkmkstart AAAAAAATXI}{\bkmkend AAAAAAATXI}
02001 \par
{\bkmkstart AAAAAAATXJ}{\bkmkend AAAAAAATXJ}
02002    {\cf17 private}:\par
{\bkmkstart AAAAAAATXK}{\bkmkend AAAAAAATXK}
02003     T value_;\par
{\bkmkstart AAAAAAATXL}{\bkmkend AAAAAAATXL}
02004     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ValueHolder);\par
{\bkmkstart AAAAAAATXM}{\bkmkend AAAAAAATXM}
02005   \};\par
{\bkmkstart AAAAAAATXN}{\bkmkend AAAAAAATXN}
02006 \par
{\bkmkstart AAAAAAATXO}{\bkmkend AAAAAAATXO}
02007 \par
{\bkmkstart AAAAAAATXP}{\bkmkend AAAAAAATXP}
02008   T* GetOrCreateValue(){\cf17  const }\{\par
{\bkmkstart AAAAAAATXQ}{\bkmkend AAAAAAATXQ}
02009     {\cf19 return} {\cf17 static_cast<}ValueHolder*{\cf17 >}(\par
{\bkmkstart AAAAAAATXR}{\bkmkend AAAAAAATXR}
02010         ThreadLocalRegistry::GetValueOnCurrentThread({\cf17 this}))->{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
();\par
{\bkmkstart AAAAAAATXS}{\bkmkend AAAAAAATXS}
02011   \}\par
{\bkmkstart AAAAAAATXT}{\bkmkend AAAAAAATXT}
02012 \par
{\bkmkstart AAAAAAATXU}{\bkmkend AAAAAAATXU}
02013   {\cf17 virtual} ThreadLocalValueHolderBase* NewValueForCurrentThread(){\cf17  const }\{\par
{\bkmkstart AAAAAAATXV}{\bkmkend AAAAAAATXV}
02014     {\cf19 return} default_factory_->MakeNewHolder();\par
{\bkmkstart AAAAAAATXW}{\bkmkend AAAAAAATXW}
02015   \}\par
{\bkmkstart AAAAAAATXX}{\bkmkend AAAAAAATXX}
02016 \par
{\bkmkstart AAAAAAATXY}{\bkmkend AAAAAAATXY}
02017   {\cf17 class }ValueHolderFactory \{\par
{\bkmkstart AAAAAAATXZ}{\bkmkend AAAAAAATXZ}
02018    {\cf17 public}:\par
{\bkmkstart AAAAAAATYA}{\bkmkend AAAAAAATYA}
02019     ValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAATYB}{\bkmkend AAAAAAATYB}
02020     {\cf17 virtual} ~ValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAATYC}{\bkmkend AAAAAAATYC}
02021     {\cf17 virtual} ValueHolder* MakeNewHolder() {\cf17 const} = 0;\par
{\bkmkstart AAAAAAATYD}{\bkmkend AAAAAAATYD}
02022 \par
{\bkmkstart AAAAAAATYE}{\bkmkend AAAAAAATYE}
02023    {\cf17 private}:\par
{\bkmkstart AAAAAAATYF}{\bkmkend AAAAAAATYF}
02024     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ValueHolderFactory);\par
{\bkmkstart AAAAAAATYG}{\bkmkend AAAAAAATYG}
02025   \};\par
{\bkmkstart AAAAAAATYH}{\bkmkend AAAAAAATYH}
02026 \par
{\bkmkstart AAAAAAATYI}{\bkmkend AAAAAAATYI}
02027   {\cf17 class }DefaultValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
{\bkmkstart AAAAAAATYJ}{\bkmkend AAAAAAATYJ}
02028    {\cf17 public}:\par
{\bkmkstart AAAAAAATYK}{\bkmkend AAAAAAATYK}
02029     DefaultValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAATYL}{\bkmkend AAAAAAATYL}
02030     {\cf17 virtual} ValueHolder* MakeNewHolder(){\cf17  const }\{ {\cf19 return} {\cf17 new} ValueHolder(); \}\par
{\bkmkstart AAAAAAATYM}{\bkmkend AAAAAAATYM}
02031 \par
{\bkmkstart AAAAAAATYN}{\bkmkend AAAAAAATYN}
02032    {\cf17 private}:\par
{\bkmkstart AAAAAAATYO}{\bkmkend AAAAAAATYO}
02033     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(DefaultValueHolderFactory);\par
{\bkmkstart AAAAAAATYP}{\bkmkend AAAAAAATYP}
02034   \};\par
{\bkmkstart AAAAAAATYQ}{\bkmkend AAAAAAATYQ}
02035 \par
{\bkmkstart AAAAAAATYR}{\bkmkend AAAAAAATYR}
02036   {\cf17 class }InstanceValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
{\bkmkstart AAAAAAATYS}{\bkmkend AAAAAAATYS}
02037    {\cf17 public}:\par
{\bkmkstart AAAAAAATYT}{\bkmkend AAAAAAATYT}
02038     {\cf17 explicit} InstanceValueHolderFactory({\cf17 const} T& value) : value_(value) \{\}\par
{\bkmkstart AAAAAAATYU}{\bkmkend AAAAAAATYU}
02039     {\cf17 virtual} ValueHolder* MakeNewHolder(){\cf17  const }\{\par
{\bkmkstart AAAAAAATYV}{\bkmkend AAAAAAATYV}
02040       {\cf19 return} {\cf17 new} ValueHolder(value_);\par
{\bkmkstart AAAAAAATYW}{\bkmkend AAAAAAATYW}
02041     \}\par
{\bkmkstart AAAAAAATYX}{\bkmkend AAAAAAATYX}
02042 \par
{\bkmkstart AAAAAAATYY}{\bkmkend AAAAAAATYY}
02043    {\cf17 private}:\par
{\bkmkstart AAAAAAATYZ}{\bkmkend AAAAAAATYZ}
02044     {\cf17 const} T value_;  {\cf20 // The value for each thread.}\par
{\bkmkstart AAAAAAATZA}{\bkmkend AAAAAAATZA}
02045 \par
{\bkmkstart AAAAAAATZB}{\bkmkend AAAAAAATZB}
02046     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(InstanceValueHolderFactory);\par
{\bkmkstart AAAAAAATZC}{\bkmkend AAAAAAATZC}
02047   \};\par
{\bkmkstart AAAAAAATZD}{\bkmkend AAAAAAATZD}
02048 \par
{\bkmkstart AAAAAAATZE}{\bkmkend AAAAAAATZE}
02049   scoped_ptr<ValueHolderFactory> default_factory_;\par
{\bkmkstart AAAAAAATZF}{\bkmkend AAAAAAATZF}
02050 \par
{\bkmkstart AAAAAAATZG}{\bkmkend AAAAAAATZG}
02051   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWL" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
);\par
{\bkmkstart AAAAAAATZH}{\bkmkend AAAAAAATZH}
02052 \};\par
{\bkmkstart AAAAAAATZI}{\bkmkend AAAAAAATZI}
02053 \par
{\bkmkstart AAAAAAATZJ}{\bkmkend AAAAAAATZJ}
02054 {\cf21 # elif GTEST_HAS_PTHREAD}\par
{\bkmkstart AAAAAAATZK}{\bkmkend AAAAAAATZK}
02055 \par
{\bkmkstart AAAAAAATZL}{\bkmkend AAAAAAATZL}
02056 {\cf20 // MutexBase and Mutex implement mutex on pthreads-based platforms.}\par
{\bkmkstart AAAAAAATZM}{\bkmkend AAAAAAATZM}
02057 {\cf17 class }MutexBase \{\par
{\bkmkstart AAAAAAATZN}{\bkmkend AAAAAAATZN}
02058  {\cf17 public}:\par
{\bkmkstart AAAAAAATZO}{\bkmkend AAAAAAATZO}
02059   {\cf20 // Acquires this mutex.}\par
{\bkmkstart AAAAAAATZP}{\bkmkend AAAAAAATZP}
02060   {\cf18 void} Lock() \{\par
{\bkmkstart AAAAAAATZQ}{\bkmkend AAAAAAATZQ}
02061     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_mutex_lock(&mutex_));\par
{\bkmkstart AAAAAAATZR}{\bkmkend AAAAAAATZR}
02062     owner_ = pthread_self();\par
{\bkmkstart AAAAAAATZS}{\bkmkend AAAAAAATZS}
02063     has_owner_ = {\cf17 true};\par
{\bkmkstart AAAAAAATZT}{\bkmkend AAAAAAATZT}
02064   \}\par
{\bkmkstart AAAAAAATZU}{\bkmkend AAAAAAATZU}
02065 \par
{\bkmkstart AAAAAAATZV}{\bkmkend AAAAAAATZV}
02066   {\cf20 // Releases this mutex.}\par
{\bkmkstart AAAAAAATZW}{\bkmkend AAAAAAATZW}
02067   {\cf18 void} Unlock() \{\par
{\bkmkstart AAAAAAATZX}{\bkmkend AAAAAAATZX}
02068     {\cf20 // Since the lock is being released the owner_ field should no longer be}\par
{\bkmkstart AAAAAAATZY}{\bkmkend AAAAAAATZY}
02069     {\cf20 // considered valid. We don't protect writing to has_owner_ here, as it's}\par
{\bkmkstart AAAAAAATZZ}{\bkmkend AAAAAAATZZ}
02070     {\cf20 // the caller's responsibility to ensure that the current thread holds the}\par
{\bkmkstart AAAAAAAUAA}{\bkmkend AAAAAAAUAA}
02071     {\cf20 // mutex when this is called.}\par
{\bkmkstart AAAAAAAUAB}{\bkmkend AAAAAAAUAB}
02072     has_owner_ = {\cf17 false};\par
{\bkmkstart AAAAAAAUAC}{\bkmkend AAAAAAAUAC}
02073     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_mutex_unlock(&mutex_));\par
{\bkmkstart AAAAAAAUAD}{\bkmkend AAAAAAAUAD}
02074   \}\par
{\bkmkstart AAAAAAAUAE}{\bkmkend AAAAAAAUAE}
02075 \par
{\bkmkstart AAAAAAAUAF}{\bkmkend AAAAAAAUAF}
02076   {\cf20 // Does nothing if the current thread holds the mutex. Otherwise, crashes}\par
{\bkmkstart AAAAAAAUAG}{\bkmkend AAAAAAAUAG}
02077   {\cf20 // with high probability.}\par
{\bkmkstart AAAAAAAUAH}{\bkmkend AAAAAAAUAH}
02078   {\cf18 void} AssertHeld(){\cf17  const }\{\par
{\bkmkstart AAAAAAAUAI}{\bkmkend AAAAAAAUAI}
02079     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_}}}
(has_owner_ && pthread_equal(owner_, pthread_self()))\par
{\bkmkstart AAAAAAAUAJ}{\bkmkend AAAAAAAUAJ}
02080         << {\cf22 "The current thread is not holding the mutex @"} << {\cf17 this};\par
{\bkmkstart AAAAAAAUAK}{\bkmkend AAAAAAAUAK}
02081   \}\par
{\bkmkstart AAAAAAAUAL}{\bkmkend AAAAAAAUAL}
02082 \par
{\bkmkstart AAAAAAAUAM}{\bkmkend AAAAAAAUAM}
02083   {\cf20 // A static mutex may be used before main() is entered.  It may even}\par
{\bkmkstart AAAAAAAUAN}{\bkmkend AAAAAAAUAN}
02084   {\cf20 // be used before the dynamic initialization stage.  Therefore we}\par
{\bkmkstart AAAAAAAUAO}{\bkmkend AAAAAAAUAO}
02085   {\cf20 // must be able to initialize a static mutex object at link time.}\par
{\bkmkstart AAAAAAAUAP}{\bkmkend AAAAAAAUAP}
02086   {\cf20 // This means MutexBase has to be a POD and its member variables}\par
{\bkmkstart AAAAAAAUAQ}{\bkmkend AAAAAAAUAQ}
02087   {\cf20 // have to be public.}\par
{\bkmkstart AAAAAAAUAR}{\bkmkend AAAAAAAUAR}
02088  {\cf17 public}:\par
{\bkmkstart AAAAAAAUAS}{\bkmkend AAAAAAAUAS}
02089   pthread_mutex_t mutex_;  {\cf20 // The underlying pthread mutex.}\par
{\bkmkstart AAAAAAAUAT}{\bkmkend AAAAAAAUAT}
02090   {\cf20 // has_owner_ indicates whether the owner_ field below contains a valid thread}\par
{\bkmkstart AAAAAAAUAU}{\bkmkend AAAAAAAUAU}
02091   {\cf20 // ID and is therefore safe to inspect (e.g., to use in pthread_equal()). All}\par
{\bkmkstart AAAAAAAUAV}{\bkmkend AAAAAAAUAV}
02092   {\cf20 // accesses to the owner_ field should be protected by a check of this field.}\par
{\bkmkstart AAAAAAAUAW}{\bkmkend AAAAAAAUAW}
02093   {\cf20 // An alternative might be to memset() owner_ to all zeros, but there's no}\par
{\bkmkstart AAAAAAAUAX}{\bkmkend AAAAAAAUAX}
02094   {\cf20 // guarantee that a zero'd pthread_t is necessarily invalid or even different}\par
{\bkmkstart AAAAAAAUAY}{\bkmkend AAAAAAAUAY}
02095   {\cf20 // from pthread_self().}\par
{\bkmkstart AAAAAAAUAZ}{\bkmkend AAAAAAAUAZ}
02096   {\cf18 bool} has_owner_;\par
{\bkmkstart AAAAAAAUBA}{\bkmkend AAAAAAAUBA}
02097   pthread_t owner_;  {\cf20 // The thread holding the mutex.}\par
{\bkmkstart AAAAAAAUBB}{\bkmkend AAAAAAAUBB}
02098 \};\par
{\bkmkstart AAAAAAAUBC}{\bkmkend AAAAAAAUBC}
02099 \par
{\bkmkstart AAAAAAAUBD}{\bkmkend AAAAAAAUBD}
02100 {\cf20 // Forward-declares a static mutex.}\par
{\bkmkstart AAAAAAAUBE}{\bkmkend AAAAAAAUBE}
02101 {\cf21 #  define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
{\bkmkstart AAAAAAAUBF}{\bkmkend AAAAAAAUBF}
02102 {\cf21      extern ::testing::internal::MutexBase mutex}\par
{\bkmkstart AAAAAAAUBG}{\bkmkend AAAAAAAUBG}
02103 \par
{\bkmkstart AAAAAAAUBH}{\bkmkend AAAAAAAUBH}
02104 {\cf20 // Defines and statically (i.e. at link time) initializes a static mutex.}\par
{\bkmkstart AAAAAAAUBI}{\bkmkend AAAAAAAUBI}
02105 {\cf20 // The initialization list here does not explicitly initialize each field,}\par
{\bkmkstart AAAAAAAUBJ}{\bkmkend AAAAAAAUBJ}
02106 {\cf20 // instead relying on default initialization for the unspecified fields. In}\par
{\bkmkstart AAAAAAAUBK}{\bkmkend AAAAAAAUBK}
02107 {\cf20 // particular, the owner_ field (a pthread_t) is not explicitly initialized.}\par
{\bkmkstart AAAAAAAUBL}{\bkmkend AAAAAAAUBL}
02108 {\cf20 // This allows initialization to work whether pthread_t is a scalar or struct.}\par
{\bkmkstart AAAAAAAUBM}{\bkmkend AAAAAAAUBM}
02109 {\cf20 // The flag -Wmissing-field-initializers must not be specified for this to work.}\par
{\bkmkstart AAAAAAAUBN}{\bkmkend AAAAAAAUBN}
02110 {\cf21 #define GTEST_DEFINE_STATIC_MUTEX_(mutex) \\}\par
{\bkmkstart AAAAAAAUBO}{\bkmkend AAAAAAAUBO}
02111 {\cf21   ::testing::internal::MutexBase mutex = \{PTHREAD_MUTEX_INITIALIZER, false, 0\}}\par
{\bkmkstart AAAAAAAUBP}{\bkmkend AAAAAAAUBP}
02112 \par
{\bkmkstart AAAAAAAUBQ}{\bkmkend AAAAAAAUBQ}
02113 {\cf20 // The Mutex class can only be used for mutexes created at runtime. It}\par
{\bkmkstart AAAAAAAUBR}{\bkmkend AAAAAAAUBR}
02114 {\cf20 // shares its API with MutexBase otherwise.}\par
{\bkmkstart AAAAAAAUBS}{\bkmkend AAAAAAAUBS}
02115 {\cf17 class }Mutex : {\cf17 public} MutexBase \{\par
{\bkmkstart AAAAAAAUBT}{\bkmkend AAAAAAAUBT}
02116  {\cf17 public}:\par
{\bkmkstart AAAAAAAUBU}{\bkmkend AAAAAAAUBU}
02117   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUBV" }{}}{\fldrslt {\cs37\ul\cf2 Mutex}}}
() \{\par
{\bkmkstart AAAAAAAUBW}{\bkmkend AAAAAAAUBW}
02118     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_mutex_init(&mutex_, NULL));\par
{\bkmkstart AAAAAAAUBX}{\bkmkend AAAAAAAUBX}
02119     has_owner_ = {\cf17 false};\par
{\bkmkstart AAAAAAAUBY}{\bkmkend AAAAAAAUBY}
02120   \}\par
{\bkmkstart AAAAAAAUBZ}{\bkmkend AAAAAAAUBZ}
02121   ~Mutex() \{\par
{\bkmkstart AAAAAAAUCA}{\bkmkend AAAAAAAUCA}
02122     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_mutex_destroy(&mutex_));\par
{\bkmkstart AAAAAAAUCB}{\bkmkend AAAAAAAUCB}
02123   \}\par
{\bkmkstart AAAAAAAUCC}{\bkmkend AAAAAAAUCC}
02124 \par
{\bkmkstart AAAAAAAUCD}{\bkmkend AAAAAAAUCD}
02125  {\cf17 private}:\par
{\bkmkstart AAAAAAAUCE}{\bkmkend AAAAAAAUCE}
02126   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUBV" }{}}{\fldrslt {\cs37\ul\cf2 Mutex}}}
);\par
{\bkmkstart AAAAAAAUCF}{\bkmkend AAAAAAAUCF}
02127 \};\par
{\bkmkstart AAAAAAAUCG}{\bkmkend AAAAAAAUCG}
02128 \par
{\bkmkstart AAAAAAAUCH}{\bkmkend AAAAAAAUCH}
02129 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
{\bkmkstart AAAAAAAUCI}{\bkmkend AAAAAAAUCI}
02130 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
{\bkmkstart AAAAAAAUCJ}{\bkmkend AAAAAAAUCJ}
02131 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
{\bkmkstart AAAAAAAUCK}{\bkmkend AAAAAAAUCK}
02132 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
{\bkmkstart AAAAAAAUCL}{\bkmkend AAAAAAAUCL}
02133 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
{\bkmkstart AAAAAAAUCM}{\bkmkend AAAAAAAUCM}
02134 {\cf17 class }GTestMutexLock \{\par
{\bkmkstart AAAAAAAUCN}{\bkmkend AAAAAAAUCN}
02135  {\cf17 public}:\par
{\bkmkstart AAAAAAAUCO}{\bkmkend AAAAAAAUCO}
02136   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
(MutexBase* mutex)\par
{\bkmkstart AAAAAAAUCP}{\bkmkend AAAAAAAUCP}
02137       : mutex_(mutex) \{ mutex_->Lock(); \}\par
{\bkmkstart AAAAAAAUCQ}{\bkmkend AAAAAAAUCQ}
02138 \par
{\bkmkstart AAAAAAAUCR}{\bkmkend AAAAAAAUCR}
02139   ~GTestMutexLock() \{ mutex_->Unlock(); \}\par
{\bkmkstart AAAAAAAUCS}{\bkmkend AAAAAAAUCS}
02140 \par
{\bkmkstart AAAAAAAUCT}{\bkmkend AAAAAAAUCT}
02141  {\cf17 private}:\par
{\bkmkstart AAAAAAAUCU}{\bkmkend AAAAAAAUCU}
02142   MutexBase* {\cf17 const} mutex_;\par
{\bkmkstart AAAAAAAUCV}{\bkmkend AAAAAAAUCV}
02143 \par
{\bkmkstart AAAAAAAUCW}{\bkmkend AAAAAAAUCW}
02144   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
);\par
{\bkmkstart AAAAAAAUCX}{\bkmkend AAAAAAAUCX}
02145 \};\par
{\bkmkstart AAAAAAAUCY}{\bkmkend AAAAAAAUCY}
02146 \par
{\bkmkstart AAAAAAAUCZ}{\bkmkend AAAAAAAUCZ}
02147 {\cf17 typedef} GTestMutexLock {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRR" }{}}{\fldrslt {\cs37\ul\cf2 MutexLock}}}
;\par
{\bkmkstart AAAAAAAUDA}{\bkmkend AAAAAAAUDA}
02148 \par
{\bkmkstart AAAAAAAUDB}{\bkmkend AAAAAAAUDB}
02149 {\cf20 // Helpers for ThreadLocal.}\par
{\bkmkstart AAAAAAAUDC}{\bkmkend AAAAAAAUDC}
02150 \par
{\bkmkstart AAAAAAAUDD}{\bkmkend AAAAAAAUDD}
02151 {\cf20 // pthread_key_create() requires DeleteThreadLocalValue() to have}\par
{\bkmkstart AAAAAAAUDE}{\bkmkend AAAAAAAUDE}
02152 {\cf20 // C-linkage.  Therefore it cannot be templatized to access}\par
{\bkmkstart AAAAAAAUDF}{\bkmkend AAAAAAAUDF}
02153 {\cf20 // ThreadLocal<T>.  Hence the need for class}\par
{\bkmkstart AAAAAAAUDG}{\bkmkend AAAAAAAUDG}
02154 {\cf20 // ThreadLocalValueHolderBase.}\par
{\bkmkstart AAAAAAAUDH}{\bkmkend AAAAAAAUDH}
02155 {\cf17 class }ThreadLocalValueHolderBase \{\par
{\bkmkstart AAAAAAAUDI}{\bkmkend AAAAAAAUDI}
02156  {\cf17 public}:\par
{\bkmkstart AAAAAAAUDJ}{\bkmkend AAAAAAAUDJ}
02157   {\cf17 virtual} ~ThreadLocalValueHolderBase() \{\}\par
{\bkmkstart AAAAAAAUDK}{\bkmkend AAAAAAAUDK}
02158 \};\par
{\bkmkstart AAAAAAAUDL}{\bkmkend AAAAAAAUDL}
02159 \par
{\bkmkstart AAAAAAAUDM}{\bkmkend AAAAAAAUDM}
02160 {\cf20 // Called by pthread to delete thread-local data stored by}\par
{\bkmkstart AAAAAAAUDN}{\bkmkend AAAAAAAUDN}
02161 {\cf20 // pthread_setspecific().}\par
{\bkmkstart AAAAAAAUDO}{\bkmkend AAAAAAAUDO}
02162 {\cf17 extern} {\cf22 "C"} {\cf17 inline} {\cf18 void} DeleteThreadLocalValue({\cf18 void}* value_holder) \{\par
{\bkmkstart AAAAAAAUDP}{\bkmkend AAAAAAAUDP}
02163   {\cf17 delete} {\cf17 static_cast<}ThreadLocalValueHolderBase*{\cf17 >}(value_holder);\par
{\bkmkstart AAAAAAAUDQ}{\bkmkend AAAAAAAUDQ}
02164 \}\par
{\bkmkstart AAAAAAAUDR}{\bkmkend AAAAAAAUDR}
02165 \par
{\bkmkstart AAAAAAAUDS}{\bkmkend AAAAAAAUDS}
02166 {\cf20 // Implements thread-local storage on pthreads-based systems.}\par
{\bkmkstart AAAAAAAUDT}{\bkmkend AAAAAAAUDT}
02167 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAUDU}{\bkmkend AAAAAAAUDU}
02168 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 ThreadLocal \{\par
{\bkmkstart AAAAAAAUDV}{\bkmkend AAAAAAAUDV}
02169  {\cf17 public}:\par
{\bkmkstart AAAAAAAUDW}{\bkmkend AAAAAAAUDW}
02170   ThreadLocal()\par
{\bkmkstart AAAAAAAUDX}{\bkmkend AAAAAAAUDX}
02171       : key_(CreateKey()), default_factory_(new DefaultValueHolderFactory()) \{\}\par
{\bkmkstart AAAAAAAUDY}{\bkmkend AAAAAAAUDY}
02172   {\cf17 explicit} ThreadLocal({\cf17 const} T& value)\par
{\bkmkstart AAAAAAAUDZ}{\bkmkend AAAAAAAUDZ}
02173       : key_(CreateKey()),\par
{\bkmkstart AAAAAAAUEA}{\bkmkend AAAAAAAUEA}
02174         default_factory_(new InstanceValueHolderFactory(value)) \{\}\par
{\bkmkstart AAAAAAAUEB}{\bkmkend AAAAAAAUEB}
02175 \par
{\bkmkstart AAAAAAAUEC}{\bkmkend AAAAAAAUEC}
02176   ~ThreadLocal() \{\par
{\bkmkstart AAAAAAAUED}{\bkmkend AAAAAAAUED}
02177     {\cf20 // Destroys the managed object for the current thread, if any.}\par
{\bkmkstart AAAAAAAUEE}{\bkmkend AAAAAAAUEE}
02178     DeleteThreadLocalValue(pthread_getspecific(key_));\par
{\bkmkstart AAAAAAAUEF}{\bkmkend AAAAAAAUEF}
02179 \par
{\bkmkstart AAAAAAAUEG}{\bkmkend AAAAAAAUEG}
02180     {\cf20 // Releases resources associated with the key.  This will *not*}\par
{\bkmkstart AAAAAAAUEH}{\bkmkend AAAAAAAUEH}
02181     {\cf20 // delete managed objects for other threads.}\par
{\bkmkstart AAAAAAAUEI}{\bkmkend AAAAAAAUEI}
02182     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_key_delete(key_));\par
{\bkmkstart AAAAAAAUEJ}{\bkmkend AAAAAAAUEJ}
02183   \}\par
{\bkmkstart AAAAAAAUEK}{\bkmkend AAAAAAAUEK}
02184 \par
{\bkmkstart AAAAAAAUEL}{\bkmkend AAAAAAAUEL}
02185   T* pointer() \{ {\cf19 return} GetOrCreateValue(); \}\par
{\bkmkstart AAAAAAAUEM}{\bkmkend AAAAAAAUEM}
02186   {\cf17 const} T* pointer(){\cf17  const }\{ {\cf19 return} GetOrCreateValue(); \}\par
{\bkmkstart AAAAAAAUEN}{\bkmkend AAAAAAAUEN}
02187   {\cf17 const} T& get(){\cf17  const }\{ {\cf19 return} *pointer(); \}\par
{\bkmkstart AAAAAAAUEO}{\bkmkend AAAAAAAUEO}
02188   {\cf18 void} set({\cf17 const} T& value) \{ *pointer() = value; \}\par
{\bkmkstart AAAAAAAUEP}{\bkmkend AAAAAAAUEP}
02189 \par
{\bkmkstart AAAAAAAUEQ}{\bkmkend AAAAAAAUEQ}
02190  {\cf17 private}:\par
{\bkmkstart AAAAAAAUER}{\bkmkend AAAAAAAUER}
02191   {\cf20 // Holds a value of type T.}\par
{\bkmkstart AAAAAAAUES}{\bkmkend AAAAAAAUES}
02192   {\cf17 class }ValueHolder : {\cf17 public} ThreadLocalValueHolderBase \{\par
{\bkmkstart AAAAAAAUET}{\bkmkend AAAAAAAUET}
02193    {\cf17 public}:\par
{\bkmkstart AAAAAAAUEU}{\bkmkend AAAAAAAUEU}
02194     ValueHolder() : value_() \{\}\par
{\bkmkstart AAAAAAAUEV}{\bkmkend AAAAAAAUEV}
02195     {\cf17 explicit} ValueHolder({\cf17 const} T& value) : value_(value) \{\}\par
{\bkmkstart AAAAAAAUEW}{\bkmkend AAAAAAAUEW}
02196 \par
{\bkmkstart AAAAAAAUEX}{\bkmkend AAAAAAAUEX}
02197     T* pointer() \{ {\cf19 return} &value_; \}\par
{\bkmkstart AAAAAAAUEY}{\bkmkend AAAAAAAUEY}
02198 \par
{\bkmkstart AAAAAAAUEZ}{\bkmkend AAAAAAAUEZ}
02199    {\cf17 private}:\par
{\bkmkstart AAAAAAAUFA}{\bkmkend AAAAAAAUFA}
02200     T value_;\par
{\bkmkstart AAAAAAAUFB}{\bkmkend AAAAAAAUFB}
02201     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ValueHolder);\par
{\bkmkstart AAAAAAAUFC}{\bkmkend AAAAAAAUFC}
02202   \};\par
{\bkmkstart AAAAAAAUFD}{\bkmkend AAAAAAAUFD}
02203 \par
{\bkmkstart AAAAAAAUFE}{\bkmkend AAAAAAAUFE}
02204   {\cf17 static} pthread_key_t CreateKey() \{\par
{\bkmkstart AAAAAAAUFF}{\bkmkend AAAAAAAUFF}
02205     pthread_key_t key;\par
{\bkmkstart AAAAAAAUFG}{\bkmkend AAAAAAAUFG}
02206     {\cf20 // When a thread exits, DeleteThreadLocalValue() will be called on}\par
{\bkmkstart AAAAAAAUFH}{\bkmkend AAAAAAAUFH}
02207     {\cf20 // the object managed for that thread.}\par
{\bkmkstart AAAAAAAUFI}{\bkmkend AAAAAAAUFI}
02208     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(\par
{\bkmkstart AAAAAAAUFJ}{\bkmkend AAAAAAAUFJ}
02209         pthread_key_create(&key, &DeleteThreadLocalValue));\par
{\bkmkstart AAAAAAAUFK}{\bkmkend AAAAAAAUFK}
02210     {\cf19 return} key;\par
{\bkmkstart AAAAAAAUFL}{\bkmkend AAAAAAAUFL}
02211   \}\par
{\bkmkstart AAAAAAAUFM}{\bkmkend AAAAAAAUFM}
02212 \par
{\bkmkstart AAAAAAAUFN}{\bkmkend AAAAAAAUFN}
02213   T* GetOrCreateValue(){\cf17  const }\{\par
{\bkmkstart AAAAAAAUFO}{\bkmkend AAAAAAAUFO}
02214     ThreadLocalValueHolderBase* {\cf17 const} holder =\par
{\bkmkstart AAAAAAAUFP}{\bkmkend AAAAAAAUFP}
02215         {\cf17 static_cast<}ThreadLocalValueHolderBase*{\cf17 >}(pthread_getspecific(key_));\par
{\bkmkstart AAAAAAAUFQ}{\bkmkend AAAAAAAUFQ}
02216     {\cf19 if} (holder != NULL) \{\par
{\bkmkstart AAAAAAAUFR}{\bkmkend AAAAAAAUFR}
02217       {\cf19 return} CheckedDowncastToActualType<ValueHolder>(holder)->pointer();\par
{\bkmkstart AAAAAAAUFS}{\bkmkend AAAAAAAUFS}
02218     \}\par
{\bkmkstart AAAAAAAUFT}{\bkmkend AAAAAAAUFT}
02219 \par
{\bkmkstart AAAAAAAUFU}{\bkmkend AAAAAAAUFU}
02220     ValueHolder* {\cf17 const} new_holder = default_factory_->MakeNewHolder();\par
{\bkmkstart AAAAAAAUFV}{\bkmkend AAAAAAAUFV}
02221     ThreadLocalValueHolderBase* {\cf17 const} holder_base = new_holder;\par
{\bkmkstart AAAAAAAUFW}{\bkmkend AAAAAAAUFW}
02222     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAASYZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_POSIX_SUCCESS_}}}
(pthread_setspecific(key_, holder_base));\par
{\bkmkstart AAAAAAAUFX}{\bkmkend AAAAAAAUFX}
02223     {\cf19 return} new_holder->pointer();\par
{\bkmkstart AAAAAAAUFY}{\bkmkend AAAAAAAUFY}
02224   \}\par
{\bkmkstart AAAAAAAUFZ}{\bkmkend AAAAAAAUFZ}
02225 \par
{\bkmkstart AAAAAAAUGA}{\bkmkend AAAAAAAUGA}
02226   {\cf17 class }ValueHolderFactory \{\par
{\bkmkstart AAAAAAAUGB}{\bkmkend AAAAAAAUGB}
02227    {\cf17 public}:\par
{\bkmkstart AAAAAAAUGC}{\bkmkend AAAAAAAUGC}
02228     ValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAAUGD}{\bkmkend AAAAAAAUGD}
02229     {\cf17 virtual} ~ValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAAUGE}{\bkmkend AAAAAAAUGE}
02230     {\cf17 virtual} ValueHolder* MakeNewHolder() {\cf17 const} = 0;\par
{\bkmkstart AAAAAAAUGF}{\bkmkend AAAAAAAUGF}
02231 \par
{\bkmkstart AAAAAAAUGG}{\bkmkend AAAAAAAUGG}
02232    {\cf17 private}:\par
{\bkmkstart AAAAAAAUGH}{\bkmkend AAAAAAAUGH}
02233     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ValueHolderFactory);\par
{\bkmkstart AAAAAAAUGI}{\bkmkend AAAAAAAUGI}
02234   \};\par
{\bkmkstart AAAAAAAUGJ}{\bkmkend AAAAAAAUGJ}
02235 \par
{\bkmkstart AAAAAAAUGK}{\bkmkend AAAAAAAUGK}
02236   {\cf17 class }DefaultValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
{\bkmkstart AAAAAAAUGL}{\bkmkend AAAAAAAUGL}
02237    {\cf17 public}:\par
{\bkmkstart AAAAAAAUGM}{\bkmkend AAAAAAAUGM}
02238     DefaultValueHolderFactory() \{\}\par
{\bkmkstart AAAAAAAUGN}{\bkmkend AAAAAAAUGN}
02239     {\cf17 virtual} ValueHolder* MakeNewHolder(){\cf17  const }\{ {\cf19 return} {\cf17 new} ValueHolder(); \}\par
{\bkmkstart AAAAAAAUGO}{\bkmkend AAAAAAAUGO}
02240 \par
{\bkmkstart AAAAAAAUGP}{\bkmkend AAAAAAAUGP}
02241    {\cf17 private}:\par
{\bkmkstart AAAAAAAUGQ}{\bkmkend AAAAAAAUGQ}
02242     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(DefaultValueHolderFactory);\par
{\bkmkstart AAAAAAAUGR}{\bkmkend AAAAAAAUGR}
02243   \};\par
{\bkmkstart AAAAAAAUGS}{\bkmkend AAAAAAAUGS}
02244 \par
{\bkmkstart AAAAAAAUGT}{\bkmkend AAAAAAAUGT}
02245   {\cf17 class }InstanceValueHolderFactory : {\cf17 public} ValueHolderFactory \{\par
{\bkmkstart AAAAAAAUGU}{\bkmkend AAAAAAAUGU}
02246    {\cf17 public}:\par
{\bkmkstart AAAAAAAUGV}{\bkmkend AAAAAAAUGV}
02247     {\cf17 explicit} InstanceValueHolderFactory({\cf17 const} T& value) : value_(value) \{\}\par
{\bkmkstart AAAAAAAUGW}{\bkmkend AAAAAAAUGW}
02248     {\cf17 virtual} ValueHolder* MakeNewHolder(){\cf17  const }\{\par
{\bkmkstart AAAAAAAUGX}{\bkmkend AAAAAAAUGX}
02249       {\cf19 return} {\cf17 new} ValueHolder(value_);\par
{\bkmkstart AAAAAAAUGY}{\bkmkend AAAAAAAUGY}
02250     \}\par
{\bkmkstart AAAAAAAUGZ}{\bkmkend AAAAAAAUGZ}
02251 \par
{\bkmkstart AAAAAAAUHA}{\bkmkend AAAAAAAUHA}
02252    {\cf17 private}:\par
{\bkmkstart AAAAAAAUHB}{\bkmkend AAAAAAAUHB}
02253     {\cf17 const} T value_;  {\cf20 // The value for each thread.}\par
{\bkmkstart AAAAAAAUHC}{\bkmkend AAAAAAAUHC}
02254 \par
{\bkmkstart AAAAAAAUHD}{\bkmkend AAAAAAAUHD}
02255     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(InstanceValueHolderFactory);\par
{\bkmkstart AAAAAAAUHE}{\bkmkend AAAAAAAUHE}
02256   \};\par
{\bkmkstart AAAAAAAUHF}{\bkmkend AAAAAAAUHF}
02257 \par
{\bkmkstart AAAAAAAUHG}{\bkmkend AAAAAAAUHG}
02258   {\cf20 // A key pthreads uses for looking up per-thread values.}\par
{\bkmkstart AAAAAAAUHH}{\bkmkend AAAAAAAUHH}
02259   {\cf17 const} pthread_key_t key_;\par
{\bkmkstart AAAAAAAUHI}{\bkmkend AAAAAAAUHI}
02260   scoped_ptr<ValueHolderFactory> default_factory_;\par
{\bkmkstart AAAAAAAUHJ}{\bkmkend AAAAAAAUHJ}
02261 \par
{\bkmkstart AAAAAAAUHK}{\bkmkend AAAAAAAUHK}
02262   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(ThreadLocal);\par
{\bkmkstart AAAAAAAUHL}{\bkmkend AAAAAAAUHL}
02263 \};\par
{\bkmkstart AAAAAAAUHM}{\bkmkend AAAAAAAUHM}
02264 \par
{\bkmkstart AAAAAAAUHN}{\bkmkend AAAAAAAUHN}
02265 {\cf21 # endif  }{\cf20 // GTEST_HAS_MUTEX_AND_THREAD_LOCAL_}\par
{\bkmkstart AAAAAAAUHO}{\bkmkend AAAAAAAUHO}
02266 \par
{\bkmkstart AAAAAAAUHP}{\bkmkend AAAAAAAUHP}
02267 {\cf21 #else  }{\cf20 // GTEST_IS_THREADSAFE}\par
{\bkmkstart AAAAAAAUHQ}{\bkmkend AAAAAAAUHQ}
02268 \par
{\bkmkstart AAAAAAAUHR}{\bkmkend AAAAAAAUHR}
02269 {\cf20 // A dummy implementation of synchronization primitives (mutex, lock,}\par
{\bkmkstart AAAAAAAUHS}{\bkmkend AAAAAAAUHS}
02270 {\cf20 // and thread-local variable).  Necessary for compiling Google Test where}\par
{\bkmkstart AAAAAAAUHT}{\bkmkend AAAAAAAUHT}
02271 {\cf20 // mutex is not supported - using Google Test in multiple threads is not}\par
{\bkmkstart AAAAAAAUHU}{\bkmkend AAAAAAAUHU}
02272 {\cf20 // supported on such platforms.}\par
{\bkmkstart AAAAAAAUHV}{\bkmkend AAAAAAAUHV}
02273 \par
{\bkmkstart AAAAAAAUHW}{\bkmkend AAAAAAAUHW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUHX" }{}}{\fldrslt {\cs37\ul\cf2 02274}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUHX" }{}}{\fldrslt {\cs37\ul\cf2 Mutex}}}
 \{\par
{\bkmkstart AAAAAAAUHY}{\bkmkend AAAAAAAUHY}
02275  {\cf17 public}:\par
{\bkmkstart AAAAAAAUHZ}{\bkmkend AAAAAAAUHZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUBV" }{}}{\fldrslt {\cs37\ul\cf2 02276}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUBV" }{}}{\fldrslt {\cs37\ul\cf2 Mutex}}}
() \{\}\par
{\bkmkstart AAAAAAAUIA}{\bkmkend AAAAAAAUIA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIB" }{}}{\fldrslt {\cs37\ul\cf2 02277}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIB" }{}}{\fldrslt {\cs37\ul\cf2 Lock}}}
() \{\}\par
{\bkmkstart AAAAAAAUIC}{\bkmkend AAAAAAAUIC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUID" }{}}{\fldrslt {\cs37\ul\cf2 02278}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUID" }{}}{\fldrslt {\cs37\ul\cf2 Unlock}}}
() \{\}\par
{\bkmkstart AAAAAAAUIE}{\bkmkend AAAAAAAUIE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIF" }{}}{\fldrslt {\cs37\ul\cf2 02279}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIF" }{}}{\fldrslt {\cs37\ul\cf2 AssertHeld}}}
(){\cf17  const }\{\}\par
{\bkmkstart AAAAAAAUIG}{\bkmkend AAAAAAAUIG}
02280 \};\par
{\bkmkstart AAAAAAAUIH}{\bkmkend AAAAAAAUIH}
02281 \par
{\bkmkstart AAAAAAAUII}{\bkmkend AAAAAAAUII}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIJ" }{}}{\fldrslt {\cs37\ul\cf2 02282}}}
 {\cf21 # define GTEST_DECLARE_STATIC_MUTEX_(mutex) \\}\par
{\bkmkstart AAAAAAAUIK}{\bkmkend AAAAAAAUIK}
02283 {\cf21   extern ::testing::internal::Mutex mutex}\par
{\bkmkstart AAAAAAAUIL}{\bkmkend AAAAAAAUIL}
02284 \par
{\bkmkstart AAAAAAAUIM}{\bkmkend AAAAAAAUIM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIN" }{}}{\fldrslt {\cs37\ul\cf2 02285}}}
 {\cf21 # define GTEST_DEFINE_STATIC_MUTEX_(mutex) ::testing::internal::Mutex mutex}\par
{\bkmkstart AAAAAAAUIO}{\bkmkend AAAAAAAUIO}
02286 \par
{\bkmkstart AAAAAAAUIP}{\bkmkend AAAAAAAUIP}
02287 {\cf20 // We cannot name this class MutexLock because the ctor declaration would}\par
{\bkmkstart AAAAAAAUIQ}{\bkmkend AAAAAAAUIQ}
02288 {\cf20 // conflict with a macro named MutexLock, which is defined on some}\par
{\bkmkstart AAAAAAAUIR}{\bkmkend AAAAAAAUIR}
02289 {\cf20 // platforms. That macro is used as a defensive measure to prevent against}\par
{\bkmkstart AAAAAAAUIS}{\bkmkend AAAAAAAUIS}
02290 {\cf20 // inadvertent misuses of MutexLock like "MutexLock(&mu)" rather than}\par
{\bkmkstart AAAAAAAUIT}{\bkmkend AAAAAAAUIT}
02291 {\cf20 // "MutexLock l(&mu)".  Hence the typedef trick below.}\par
{\bkmkstart AAAAAAAUIU}{\bkmkend AAAAAAAUIU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIV" }{}}{\fldrslt {\cs37\ul\cf2 02292}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIV" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
 \{\par
{\bkmkstart AAAAAAAUIW}{\bkmkend AAAAAAAUIW}
02293  {\cf17 public}:\par
{\bkmkstart AAAAAAAUIX}{\bkmkend AAAAAAAUIX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 02294}}}
   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRF" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUHX" }{}}{\fldrslt {\cs37\ul\cf2 Mutex}}}
*) \{\}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAUIY}{\bkmkend AAAAAAAUIY}
02295 \};\par
{\bkmkstart AAAAAAAUIZ}{\bkmkend AAAAAAAUIZ}
02296 \par
{\bkmkstart AAAAAAAUJA}{\bkmkend AAAAAAAUJA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRR" }{}}{\fldrslt {\cs37\ul\cf2 02297}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUIV" }{}}{\fldrslt {\cs37\ul\cf2 GTestMutexLock}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATRR" }{}}{\fldrslt {\cs37\ul\cf2 MutexLock}}}
;\par
{\bkmkstart AAAAAAAUJB}{\bkmkend AAAAAAAUJB}
02298 \par
{\bkmkstart AAAAAAAUJC}{\bkmkend AAAAAAAUJC}
02299 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAUJD}{\bkmkend AAAAAAAUJD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJE" }{}}{\fldrslt {\cs37\ul\cf2 02300}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJE" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
 \{\par
{\bkmkstart AAAAAAAUJF}{\bkmkend AAAAAAAUJF}
02301  {\cf17 public}:\par
{\bkmkstart AAAAAAAUJG}{\bkmkend AAAAAAAUJG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWL" }{}}{\fldrslt {\cs37\ul\cf2 02302}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWL" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
() : value_() \{\}\par
{\bkmkstart AAAAAAAUJH}{\bkmkend AAAAAAAUJH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJI" }{}}{\fldrslt {\cs37\ul\cf2 02303}}}
   {\cf17 explicit} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJI" }{}}{\fldrslt {\cs37\ul\cf2 ThreadLocal}}}
({\cf17 const} T& value) : value_(value) \{\}\par
{\bkmkstart AAAAAAAUJJ}{\bkmkend AAAAAAAUJJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 02304}}}
   T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWS" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
() \{ {\cf19 return} &value_; \}\par
{\bkmkstart AAAAAAAUJK}{\bkmkend AAAAAAAUJK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJL" }{}}{\fldrslt {\cs37\ul\cf2 02305}}}
   {\cf17 const} T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJL" }{}}{\fldrslt {\cs37\ul\cf2 pointer}}}
(){\cf17  const }\{ {\cf19 return} &value_; \}\par
{\bkmkstart AAAAAAAUJM}{\bkmkend AAAAAAAUJM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWV" }{}}{\fldrslt {\cs37\ul\cf2 02306}}}
   {\cf17 const} T& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWV" }{}}{\fldrslt {\cs37\ul\cf2 get}}}
(){\cf17  const }\{ {\cf19 return} value_; \}\par
{\bkmkstart AAAAAAAUJN}{\bkmkend AAAAAAAUJN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWX" }{}}{\fldrslt {\cs37\ul\cf2 02307}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAATWX" }{}}{\fldrslt {\cs37\ul\cf2 set}}}
({\cf17 const} T& value) \{ value_ = value; \}\par
{\bkmkstart AAAAAAAUJO}{\bkmkend AAAAAAAUJO}
02308  {\cf17 private}:\par
{\bkmkstart AAAAAAAUJP}{\bkmkend AAAAAAAUJP}
02309   T value_;\par
{\bkmkstart AAAAAAAUJQ}{\bkmkend AAAAAAAUJQ}
02310 \};\par
{\bkmkstart AAAAAAAUJR}{\bkmkend AAAAAAAUJR}
02311 \par
{\bkmkstart AAAAAAAUJS}{\bkmkend AAAAAAAUJS}
02312 {\cf21 #endif  }{\cf20 // GTEST_IS_THREADSAFE}\par
{\bkmkstart AAAAAAAUJT}{\bkmkend AAAAAAAUJT}
02313 \par
{\bkmkstart AAAAAAAUJU}{\bkmkend AAAAAAAUJU}
02314 {\cf20 // Returns the number of threads running in the process, or 0 to indicate that}\par
{\bkmkstart AAAAAAAUJV}{\bkmkend AAAAAAAUJV}
02315 {\cf20 // we cannot detect it.}\par
{\bkmkstart AAAAAAAUJW}{\bkmkend AAAAAAAUJW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJX" }{}}{\fldrslt {\cs37\ul\cf2 02316}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 size_t} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUJX" }{}}{\fldrslt {\cs37\ul\cf2 GetThreadCount}}}
();\par
{\bkmkstart AAAAAAAUJY}{\bkmkend AAAAAAAUJY}
02317 \par
{\bkmkstart AAAAAAAUJZ}{\bkmkend AAAAAAAUJZ}
02318 {\cf20 // Passing non-POD classes through ellipsis (...) crashes the ARM}\par
{\bkmkstart AAAAAAAUKA}{\bkmkend AAAAAAAUKA}
02319 {\cf20 // compiler and generates a warning in Sun Studio before 12u4. The Nokia Symbian}\par
{\bkmkstart AAAAAAAUKB}{\bkmkend AAAAAAAUKB}
02320 {\cf20 // and the IBM XL C/C++ compiler try to instantiate a copy constructor}\par
{\bkmkstart AAAAAAAUKC}{\bkmkend AAAAAAAUKC}
02321 {\cf20 // for objects passed through ellipsis (...), failing for uncopyable}\par
{\bkmkstart AAAAAAAUKD}{\bkmkend AAAAAAAUKD}
02322 {\cf20 // objects.  We define this to ensure that only POD is passed through}\par
{\bkmkstart AAAAAAAUKE}{\bkmkend AAAAAAAUKE}
02323 {\cf20 // ellipsis on these systems.}\par
{\bkmkstart AAAAAAAUKF}{\bkmkend AAAAAAAUKF}
02324 {\cf21 #if defined(__SYMBIAN32__) || defined(__IBMCPP__) || \\}\par
{\bkmkstart AAAAAAAUKG}{\bkmkend AAAAAAAUKG}
02325 {\cf21      (defined(__SUNPRO_CC) && __SUNPRO_CC < 0x5130)}\par
{\bkmkstart AAAAAAAUKH}{\bkmkend AAAAAAAUKH}
02326 {\cf20 // We lose support for NULL detection where the compiler doesn't like}\par
{\bkmkstart AAAAAAAUKI}{\bkmkend AAAAAAAUKI}
02327 {\cf20 // passing non-POD classes through ellipsis (...).}\par
{\bkmkstart AAAAAAAUKJ}{\bkmkend AAAAAAAUKJ}
02328 {\cf21 # define GTEST_ELLIPSIS_NEEDS_POD_ 1}\par
{\bkmkstart AAAAAAAUKK}{\bkmkend AAAAAAAUKK}
02329 {\cf21 #else}\par
{\bkmkstart AAAAAAAUKL}{\bkmkend AAAAAAAUKL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUKM" }{}}{\fldrslt {\cs37\ul\cf2 02330}}}
 {\cf21 # define GTEST_CAN_COMPARE_NULL 1}\par
{\bkmkstart AAAAAAAUKN}{\bkmkend AAAAAAAUKN}
02331 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUKO}{\bkmkend AAAAAAAUKO}
02332 \par
{\bkmkstart AAAAAAAUKP}{\bkmkend AAAAAAAUKP}
02333 {\cf20 // The Nokia Symbian and IBM XL C/C++ compilers cannot decide between}\par
{\bkmkstart AAAAAAAUKQ}{\bkmkend AAAAAAAUKQ}
02334 {\cf20 // const T& and const T* in a function template.  These compilers}\par
{\bkmkstart AAAAAAAUKR}{\bkmkend AAAAAAAUKR}
02335 {\cf20 // _can_ decide between class template specializations for T and T*,}\par
{\bkmkstart AAAAAAAUKS}{\bkmkend AAAAAAAUKS}
02336 {\cf20 // so a tr1::type_traits-like is_pointer works.}\par
{\bkmkstart AAAAAAAUKT}{\bkmkend AAAAAAAUKT}
02337 {\cf21 #if defined(__SYMBIAN32__) || defined(__IBMCPP__)}\par
{\bkmkstart AAAAAAAUKU}{\bkmkend AAAAAAAUKU}
02338 {\cf21 # define GTEST_NEEDS_IS_POINTER_ 1}\par
{\bkmkstart AAAAAAAUKV}{\bkmkend AAAAAAAUKV}
02339 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUKW}{\bkmkend AAAAAAAUKW}
02340 \par
{\bkmkstart AAAAAAAUKX}{\bkmkend AAAAAAAUKX}
02341 {\cf17 template} <{\cf18 bool} {\cf18 bool}_value>\par
{\bkmkstart AAAAAAAUKY}{\bkmkend AAAAAAAUKY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 02342}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 bool_constant}}}
 \{\par
{\bkmkstart AAAAAAAUKZ}{\bkmkend AAAAAAAUKZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULA" }{}}{\fldrslt {\cs37\ul\cf2 02343}}}
   {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 bool_constant<bool_value>}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULA" }{}}{\fldrslt {\cs37\ul\cf2 type}}}
;\par
{\bkmkstart AAAAAAAULB}{\bkmkend AAAAAAAULB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJNO" }{}}{\fldrslt {\cs37\ul\cf2 02344}}}
   {\cf17 static} {\cf17 const} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJNO" }{}}{\fldrslt {\cs37\ul\cf2 value}}}
 = bool_value;\par
{\bkmkstart AAAAAAAULC}{\bkmkend AAAAAAAULC}
02345 \};\par
{\bkmkstart AAAAAAAULD}{\bkmkend AAAAAAAULD}
02346 {\cf17 template} <{\cf18 bool} {\cf18 bool}_value> {\cf17 const} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 bool_constant<bool_value>::value}}}
;\par
{\bkmkstart AAAAAAAULE}{\bkmkend AAAAAAAULE}
02347 \par
{\bkmkstart AAAAAAAULF}{\bkmkend AAAAAAAULF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUM" }{}}{\fldrslt {\cs37\ul\cf2 02348}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 bool_constant<false>}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGUM" }{}}{\fldrslt {\cs37\ul\cf2 false_type}}}
;\par
{\bkmkstart AAAAAAAULG}{\bkmkend AAAAAAAULG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULH" }{}}{\fldrslt {\cs37\ul\cf2 02349}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 bool_constant<true>}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULH" }{}}{\fldrslt {\cs37\ul\cf2 true_type}}}
;\par
{\bkmkstart AAAAAAAULI}{\bkmkend AAAAAAAULI}
02350 \par
{\bkmkstart AAAAAAAULJ}{\bkmkend AAAAAAAULJ}
02351 {\cf17 template} <{\cf17 typename} T, {\cf17 typename} U>\par
{\bkmkstart AAAAAAAULK}{\bkmkend AAAAAAAULK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULL" }{}}{\fldrslt {\cs37\ul\cf2 02352}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULL" }{}}{\fldrslt {\cs37\ul\cf2 is_same}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 false_type}}}
 \{\};\par
{\bkmkstart AAAAAAAULM}{\bkmkend AAAAAAAULM}
02353 \par
{\bkmkstart AAAAAAAULN}{\bkmkend AAAAAAAULN}
02354 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAULO}{\bkmkend AAAAAAAULO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULP" }{}}{\fldrslt {\cs37\ul\cf2 02355}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULL" }{}}{\fldrslt {\cs37\ul\cf2 is_same}}}
<T, T> : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 true_type}}}
 \{\};\par
{\bkmkstart AAAAAAAULQ}{\bkmkend AAAAAAAULQ}
02356 \par
{\bkmkstart AAAAAAAULR}{\bkmkend AAAAAAAULR}
02357 \par
{\bkmkstart AAAAAAAULS}{\bkmkend AAAAAAAULS}
02358 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAULT}{\bkmkend AAAAAAAULT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJZO" }{}}{\fldrslt {\cs37\ul\cf2 02359}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJZO" }{}}{\fldrslt {\cs37\ul\cf2 is_pointer}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 false_type}}}
 \{\};\par
{\bkmkstart AAAAAAAULU}{\bkmkend AAAAAAAULU}
02360 \par
{\bkmkstart AAAAAAAULV}{\bkmkend AAAAAAAULV}
02361 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAULW}{\bkmkend AAAAAAAULW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAULX" }{}}{\fldrslt {\cs37\ul\cf2 02362}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJZO" }{}}{\fldrslt {\cs37\ul\cf2 is_pointer}}}
<T*> : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQE" }{}}{\fldrslt {\cs37\ul\cf2 true_type}}}
 \{\};\par
{\bkmkstart AAAAAAAULY}{\bkmkend AAAAAAAULY}
02363 \par
{\bkmkstart AAAAAAAULZ}{\bkmkend AAAAAAAULZ}
02364 {\cf17 template} <{\cf17 typename} Iterator>\par
{\bkmkstart AAAAAAAUMA}{\bkmkend AAAAAAAUMA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMB" }{}}{\fldrslt {\cs37\ul\cf2 02365}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMB" }{}}{\fldrslt {\cs37\ul\cf2 IteratorTraits}}}
 \{\par
{\bkmkstart AAAAAAAUMC}{\bkmkend AAAAAAAUMC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMD" }{}}{\fldrslt {\cs37\ul\cf2 02366}}}
   {\cf17 typedef} {\cf17 typename} Iterator::value_type {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMD" }{}}{\fldrslt {\cs37\ul\cf2 value_type}}}
;\par
{\bkmkstart AAAAAAAUME}{\bkmkend AAAAAAAUME}
02367 \};\par
{\bkmkstart AAAAAAAUMF}{\bkmkend AAAAAAAUMF}
02368 \par
{\bkmkstart AAAAAAAUMG}{\bkmkend AAAAAAAUMG}
02369 \par
{\bkmkstart AAAAAAAUMH}{\bkmkend AAAAAAAUMH}
02370 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAUMI}{\bkmkend AAAAAAAUMI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMJ" }{}}{\fldrslt {\cs37\ul\cf2 02371}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMB" }{}}{\fldrslt {\cs37\ul\cf2 IteratorTraits}}}
<T*> \{\par
{\bkmkstart AAAAAAAUMK}{\bkmkend AAAAAAAUMK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUML" }{}}{\fldrslt {\cs37\ul\cf2 02372}}}
   {\cf17 typedef} T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUML" }{}}{\fldrslt {\cs37\ul\cf2 value_type}}}
;\par
{\bkmkstart AAAAAAAUMM}{\bkmkend AAAAAAAUMM}
02373 \};\par
{\bkmkstart AAAAAAAUMN}{\bkmkend AAAAAAAUMN}
02374 \par
{\bkmkstart AAAAAAAUMO}{\bkmkend AAAAAAAUMO}
02375 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAUMP}{\bkmkend AAAAAAAUMP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMQ" }{}}{\fldrslt {\cs37\ul\cf2 02376}}}
 {\cf17 struct }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMB" }{}}{\fldrslt {\cs37\ul\cf2 IteratorTraits}}}
<const T*> \{\par
{\bkmkstart AAAAAAAUMR}{\bkmkend AAAAAAAUMR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMS" }{}}{\fldrslt {\cs37\ul\cf2 02377}}}
   {\cf17 typedef} T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUMS" }{}}{\fldrslt {\cs37\ul\cf2 value_type}}}
;\par
{\bkmkstart AAAAAAAUMT}{\bkmkend AAAAAAAUMT}
02378 \};\par
{\bkmkstart AAAAAAAUMU}{\bkmkend AAAAAAAUMU}
02379 \par
{\bkmkstart AAAAAAAUMV}{\bkmkend AAAAAAAUMV}
02380 {\cf21 #if GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUMW}{\bkmkend AAAAAAAUMW}
02381 {\cf21 # define GTEST_PATH_SEP_ "\\\\"}\par
{\bkmkstart AAAAAAAUMX}{\bkmkend AAAAAAAUMX}
02382 {\cf21 # define GTEST_HAS_ALT_PATH_SEP_ 1}\par
{\bkmkstart AAAAAAAUMY}{\bkmkend AAAAAAAUMY}
02383 {\cf20 // The biggest signed integer type the compiler supports.}\par
{\bkmkstart AAAAAAAUMZ}{\bkmkend AAAAAAAUMZ}
02384 {\cf17 typedef} __int64 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
;\par
{\bkmkstart AAAAAAAUNA}{\bkmkend AAAAAAAUNA}
02385 {\cf21 #else}\par
{\bkmkstart AAAAAAAUNB}{\bkmkend AAAAAAAUNB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNC" }{}}{\fldrslt {\cs37\ul\cf2 02386}}}
 {\cf21 # define GTEST_PATH_SEP_ "/"}\par
{\bkmkstart AAAAAAAUND}{\bkmkend AAAAAAAUND}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNE" }{}}{\fldrslt {\cs37\ul\cf2 02387}}}
 {\cf21 # define GTEST_HAS_ALT_PATH_SEP_ 0}\par
{\bkmkstart AAAAAAAUNF}{\bkmkend AAAAAAAUNF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 02388}}}
 {\cf17 typedef} {\cf18 long} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
;  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAUNG}{\bkmkend AAAAAAAUNG}
02389 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUNH}{\bkmkend AAAAAAAUNH}
02390 \par
{\bkmkstart AAAAAAAUNI}{\bkmkend AAAAAAAUNI}
02391 {\cf20 // Utilities for char.}\par
{\bkmkstart AAAAAAAUNJ}{\bkmkend AAAAAAAUNJ}
02392 \par
{\bkmkstart AAAAAAAUNK}{\bkmkend AAAAAAAUNK}
02393 {\cf20 // isspace(int ch) and friends accept an unsigned char or EOF.  char}\par
{\bkmkstart AAAAAAAUNL}{\bkmkend AAAAAAAUNL}
02394 {\cf20 // may be signed, depending on the compiler (or compiler flags).}\par
{\bkmkstart AAAAAAAUNM}{\bkmkend AAAAAAAUNM}
02395 {\cf20 // Therefore we need to cast a char to unsigned char before calling}\par
{\bkmkstart AAAAAAAUNN}{\bkmkend AAAAAAAUNN}
02396 {\cf20 // isspace(), etc.}\par
{\bkmkstart AAAAAAAUNO}{\bkmkend AAAAAAAUNO}
02397 \par
{\bkmkstart AAAAAAAUNP}{\bkmkend AAAAAAAUNP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNQ" }{}}{\fldrslt {\cs37\ul\cf2 02398}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNQ" }{}}{\fldrslt {\cs37\ul\cf2 IsAlpha}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUNR}{\bkmkend AAAAAAAUNR}
02399   {\cf19 return} isalpha({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUNS}{\bkmkend AAAAAAAUNS}
02400 \}\par
{\bkmkstart AAAAAAAUNT}{\bkmkend AAAAAAAUNT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNU" }{}}{\fldrslt {\cs37\ul\cf2 02401}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNU" }{}}{\fldrslt {\cs37\ul\cf2 IsAlNum}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUNV}{\bkmkend AAAAAAAUNV}
02402   {\cf19 return} isalnum({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUNW}{\bkmkend AAAAAAAUNW}
02403 \}\par
{\bkmkstart AAAAAAAUNX}{\bkmkend AAAAAAAUNX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNY" }{}}{\fldrslt {\cs37\ul\cf2 02404}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUNY" }{}}{\fldrslt {\cs37\ul\cf2 IsDigit}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUNZ}{\bkmkend AAAAAAAUNZ}
02405   {\cf19 return} isdigit({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUOA}{\bkmkend AAAAAAAUOA}
02406 \}\par
{\bkmkstart AAAAAAAUOB}{\bkmkend AAAAAAAUOB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOC" }{}}{\fldrslt {\cs37\ul\cf2 02407}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOC" }{}}{\fldrslt {\cs37\ul\cf2 IsLower}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUOD}{\bkmkend AAAAAAAUOD}
02408   {\cf19 return} islower({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUOE}{\bkmkend AAAAAAAUOE}
02409 \}\par
{\bkmkstart AAAAAAAUOF}{\bkmkend AAAAAAAUOF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOG" }{}}{\fldrslt {\cs37\ul\cf2 02410}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOG" }{}}{\fldrslt {\cs37\ul\cf2 IsSpace}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUOH}{\bkmkend AAAAAAAUOH}
02411   {\cf19 return} isspace({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUOI}{\bkmkend AAAAAAAUOI}
02412 \}\par
{\bkmkstart AAAAAAAUOJ}{\bkmkend AAAAAAAUOJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOK" }{}}{\fldrslt {\cs37\ul\cf2 02413}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOK" }{}}{\fldrslt {\cs37\ul\cf2 IsUpper}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUOL}{\bkmkend AAAAAAAUOL}
02414   {\cf19 return} isupper({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUOM}{\bkmkend AAAAAAAUOM}
02415 \}\par
{\bkmkstart AAAAAAAUON}{\bkmkend AAAAAAAUON}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOO" }{}}{\fldrslt {\cs37\ul\cf2 02416}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOO" }{}}{\fldrslt {\cs37\ul\cf2 IsXDigit}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUOP}{\bkmkend AAAAAAAUOP}
02417   {\cf19 return} isxdigit({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)) != 0;\par
{\bkmkstart AAAAAAAUOQ}{\bkmkend AAAAAAAUOQ}
02418 \}\par
{\bkmkstart AAAAAAAUOR}{\bkmkend AAAAAAAUOR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOS" }{}}{\fldrslt {\cs37\ul\cf2 02419}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOO" }{}}{\fldrslt {\cs37\ul\cf2 IsXDigit}}}
({\cf18 wchar_t} ch) \{\par
{\bkmkstart AAAAAAAUOT}{\bkmkend AAAAAAAUOT}
02420   {\cf17 const} {\cf18 unsigned} {\cf18 char} low_byte = {\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch);\par
{\bkmkstart AAAAAAAUOU}{\bkmkend AAAAAAAUOU}
02421   {\cf19 return} ch == low_byte && isxdigit(low_byte) != 0;\par
{\bkmkstart AAAAAAAUOV}{\bkmkend AAAAAAAUOV}
02422 \}\par
{\bkmkstart AAAAAAAUOW}{\bkmkend AAAAAAAUOW}
02423 \par
{\bkmkstart AAAAAAAUOX}{\bkmkend AAAAAAAUOX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOY" }{}}{\fldrslt {\cs37\ul\cf2 02424}}}
 {\cf17 inline} {\cf18 char} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOY" }{}}{\fldrslt {\cs37\ul\cf2 ToLower}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUOZ}{\bkmkend AAAAAAAUOZ}
02425   {\cf19 return} {\cf17 static_cast<}{\cf18 char}{\cf17 >}(tolower({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)));\par
{\bkmkstart AAAAAAAUPA}{\bkmkend AAAAAAAUPA}
02426 \}\par
{\bkmkstart AAAAAAAUPB}{\bkmkend AAAAAAAUPB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUPC" }{}}{\fldrslt {\cs37\ul\cf2 02427}}}
 {\cf17 inline} {\cf18 char} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUPC" }{}}{\fldrslt {\cs37\ul\cf2 ToUpper}}}
({\cf18 char} ch) \{\par
{\bkmkstart AAAAAAAUPD}{\bkmkend AAAAAAAUPD}
02428   {\cf19 return} {\cf17 static_cast<}{\cf18 char}{\cf17 >}(toupper({\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(ch)));\par
{\bkmkstart AAAAAAAUPE}{\bkmkend AAAAAAAUPE}
02429 \}\par
{\bkmkstart AAAAAAAUPF}{\bkmkend AAAAAAAUPF}
02430 \par
{\bkmkstart AAAAAAAUPG}{\bkmkend AAAAAAAUPG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUPH" }{}}{\fldrslt {\cs37\ul\cf2 02431}}}
 {\cf17 inline} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUPH" }{}}{\fldrslt {\cs37\ul\cf2 StripTrailingSpaces}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 str) \{\par
{\bkmkstart AAAAAAAUPI}{\bkmkend AAAAAAAUPI}
02432   std::string::iterator it = str.end();\par
{\bkmkstart AAAAAAAUPJ}{\bkmkend AAAAAAAUPJ}
02433   {\cf19 while} (it != str.begin() && {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUOG" }{}}{\fldrslt {\cs37\ul\cf2 IsSpace}}}
(*--it))\par
{\bkmkstart AAAAAAAUPK}{\bkmkend AAAAAAAUPK}
02434     it = str.erase(it);\par
{\bkmkstart AAAAAAAUPL}{\bkmkend AAAAAAAUPL}
02435   {\cf19 return} str;\par
{\bkmkstart AAAAAAAUPM}{\bkmkend AAAAAAAUPM}
02436 \}\par
{\bkmkstart AAAAAAAUPN}{\bkmkend AAAAAAAUPN}
02437 \par
{\bkmkstart AAAAAAAUPO}{\bkmkend AAAAAAAUPO}
02438 {\cf20 // The testing::internal::posix namespace holds wrappers for common}\par
{\bkmkstart AAAAAAAUPP}{\bkmkend AAAAAAAUPP}
02439 {\cf20 // POSIX functions.  These wrappers hide the differences between}\par
{\bkmkstart AAAAAAAUPQ}{\bkmkend AAAAAAAUPQ}
02440 {\cf20 // Windows/MSVC and POSIX systems.  Since some compilers define these}\par
{\bkmkstart AAAAAAAUPR}{\bkmkend AAAAAAAUPR}
02441 {\cf20 // standard functions as macros, the wrapper cannot have the same name}\par
{\bkmkstart AAAAAAAUPS}{\bkmkend AAAAAAAUPS}
02442 {\cf20 // as the wrapped function.}\par
{\bkmkstart AAAAAAAUPT}{\bkmkend AAAAAAAUPT}
02443 \par
{\bkmkstart AAAAAAAUPU}{\bkmkend AAAAAAAUPU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUPV" }{}}{\fldrslt {\cs37\ul\cf2 02444}}}
 {\cf17 namespace }posix \{\par
{\bkmkstart AAAAAAAUPW}{\bkmkend AAAAAAAUPW}
02445 \par
{\bkmkstart AAAAAAAUPX}{\bkmkend AAAAAAAUPX}
02446 {\cf20 // Functions with a different name on Windows.}\par
{\bkmkstart AAAAAAAUPY}{\bkmkend AAAAAAAUPY}
02447 \par
{\bkmkstart AAAAAAAUPZ}{\bkmkend AAAAAAAUPZ}
02448 {\cf21 #if GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUQA}{\bkmkend AAAAAAAUQA}
02449 \par
{\bkmkstart AAAAAAAUQB}{\bkmkend AAAAAAAUQB}
02450 {\cf17 typedef} {\cf17 struct }_stat {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
;\par
{\bkmkstart AAAAAAAUQD}{\bkmkend AAAAAAAUQD}
02451 \par
{\bkmkstart AAAAAAAUQE}{\bkmkend AAAAAAAUQE}
02452 {\cf21 # ifdef __BORLANDC__}\par
{\bkmkstart AAAAAAAUQF}{\bkmkend AAAAAAAUQF}
02453 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQG" }{}}{\fldrslt {\cs37\ul\cf2 IsATTY}}}
({\cf18 int} fd) \{ {\cf19 return} isatty(fd); \}\par
{\bkmkstart AAAAAAAUQH}{\bkmkend AAAAAAAUQH}
02454 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQI" }{}}{\fldrslt {\cs37\ul\cf2 StrCaseCmp}}}
({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
{\bkmkstart AAAAAAAUQJ}{\bkmkend AAAAAAAUQJ}
02455   {\cf19 return} stricmp(s1, s2);\par
{\bkmkstart AAAAAAAUQK}{\bkmkend AAAAAAAUQK}
02456 \}\par
{\bkmkstart AAAAAAAUQL}{\bkmkend AAAAAAAUQL}
02457 {\cf17 inline} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQM" }{}}{\fldrslt {\cs37\ul\cf2 StrDup}}}
({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} strdup(src); \}\par
{\bkmkstart AAAAAAAUQN}{\bkmkend AAAAAAAUQN}
02458 {\cf21 # else  }{\cf20 // !__BORLANDC__}\par
{\bkmkstart AAAAAAAUQO}{\bkmkend AAAAAAAUQO}
02459 {\cf21 #  if GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUQP}{\bkmkend AAAAAAAUQP}
02460 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQG" }{}}{\fldrslt {\cs37\ul\cf2 IsATTY}}}
({\cf18 int} {\cf20 /* fd */}) \{ {\cf19 return} 0; \}\par
{\bkmkstart AAAAAAAUQQ}{\bkmkend AAAAAAAUQQ}
02461 {\cf21 #  else}\par
{\bkmkstart AAAAAAAUQR}{\bkmkend AAAAAAAUQR}
02462 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQG" }{}}{\fldrslt {\cs37\ul\cf2 IsATTY}}}
({\cf18 int} fd) \{ {\cf19 return} _isatty(fd); \}\par
{\bkmkstart AAAAAAAUQS}{\bkmkend AAAAAAAUQS}
02463 {\cf21 #  endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUQT}{\bkmkend AAAAAAAUQT}
02464 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQI" }{}}{\fldrslt {\cs37\ul\cf2 StrCaseCmp}}}
({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
{\bkmkstart AAAAAAAUQU}{\bkmkend AAAAAAAUQU}
02465   {\cf19 return} _stricmp(s1, s2);\par
{\bkmkstart AAAAAAAUQV}{\bkmkend AAAAAAAUQV}
02466 \}\par
{\bkmkstart AAAAAAAUQW}{\bkmkend AAAAAAAUQW}
02467 {\cf17 inline} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQM" }{}}{\fldrslt {\cs37\ul\cf2 StrDup}}}
({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} _strdup(src); \}\par
{\bkmkstart AAAAAAAUQX}{\bkmkend AAAAAAAUQX}
02468 {\cf21 # endif  }{\cf20 // __BORLANDC__}\par
{\bkmkstart AAAAAAAUQY}{\bkmkend AAAAAAAUQY}
02469 \par
{\bkmkstart AAAAAAAUQZ}{\bkmkend AAAAAAAUQZ}
02470 {\cf21 # if GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAURA}{\bkmkend AAAAAAAURA}
02471 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURB" }{}}{\fldrslt {\cs37\ul\cf2 FileNo}}}
(FILE* file) \{ {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 int}{\cf17 >}(_fileno(file)); \}\par
{\bkmkstart AAAAAAAURC}{\bkmkend AAAAAAAURC}
02472 {\cf20 // Stat(), RmDir(), and IsDir() are not needed on Windows CE at this}\par
{\bkmkstart AAAAAAAURD}{\bkmkend AAAAAAAURD}
02473 {\cf20 // time and thus not defined there.}\par
{\bkmkstart AAAAAAAURE}{\bkmkend AAAAAAAURE}
02474 {\cf21 # else}\par
{\bkmkstart AAAAAAAURF}{\bkmkend AAAAAAAURF}
02475 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURB" }{}}{\fldrslt {\cs37\ul\cf2 FileNo}}}
(FILE* file) \{ {\cf19 return} _fileno(file); \}\par
{\bkmkstart AAAAAAAURG}{\bkmkend AAAAAAAURG}
02476 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURH" }{}}{\fldrslt {\cs37\ul\cf2 Stat}}}
({\cf17 const} {\cf18 char}* path, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
* buf) \{ {\cf19 return} _stat(path, buf); \}\par
{\bkmkstart AAAAAAAURI}{\bkmkend AAAAAAAURI}
02477 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURJ" }{}}{\fldrslt {\cs37\ul\cf2 RmDir}}}
({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} _rmdir(dir); \}\par
{\bkmkstart AAAAAAAURK}{\bkmkend AAAAAAAURK}
02478 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURL" }{}}{\fldrslt {\cs37\ul\cf2 IsDir}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
& st) \{\par
{\bkmkstart AAAAAAAURM}{\bkmkend AAAAAAAURM}
02479   {\cf19 return} (_S_IFDIR & st.st_mode) != 0;\par
{\bkmkstart AAAAAAAURN}{\bkmkend AAAAAAAURN}
02480 \}\par
{\bkmkstart AAAAAAAURO}{\bkmkend AAAAAAAURO}
02481 {\cf21 # endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAURP}{\bkmkend AAAAAAAURP}
02482 \par
{\bkmkstart AAAAAAAURQ}{\bkmkend AAAAAAAURQ}
02483 {\cf21 #else}\par
{\bkmkstart AAAAAAAURR}{\bkmkend AAAAAAAURR}
02484 \par
{\bkmkstart AAAAAAAURS}{\bkmkend AAAAAAAURS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 02485}}}
 {\cf17 typedef} {\cf17 struct }stat {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
;\par
{\bkmkstart AAAAAAAURT}{\bkmkend AAAAAAAURT}
02486 \par
{\bkmkstart AAAAAAAURU}{\bkmkend AAAAAAAURU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURB" }{}}{\fldrslt {\cs37\ul\cf2 02487}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURB" }{}}{\fldrslt {\cs37\ul\cf2 FileNo}}}
(FILE* file) \{ {\cf19 return} fileno(file); \}\par
{\bkmkstart AAAAAAAURV}{\bkmkend AAAAAAAURV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQG" }{}}{\fldrslt {\cs37\ul\cf2 02488}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQG" }{}}{\fldrslt {\cs37\ul\cf2 IsATTY}}}
({\cf18 int} fd) \{ {\cf19 return} isatty(fd); \}\par
{\bkmkstart AAAAAAAURW}{\bkmkend AAAAAAAURW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURH" }{}}{\fldrslt {\cs37\ul\cf2 02489}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURH" }{}}{\fldrslt {\cs37\ul\cf2 Stat}}}
({\cf17 const} {\cf18 char}* path, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
* buf) \{ {\cf19 return} stat(path, buf); \}\par
{\bkmkstart AAAAAAAURX}{\bkmkend AAAAAAAURX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQI" }{}}{\fldrslt {\cs37\ul\cf2 02490}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQI" }{}}{\fldrslt {\cs37\ul\cf2 StrCaseCmp}}}
({\cf17 const} {\cf18 char}* s1, {\cf17 const} {\cf18 char}* s2) \{\par
{\bkmkstart AAAAAAAURY}{\bkmkend AAAAAAAURY}
02491   {\cf19 return} strcasecmp(s1, s2);\par
{\bkmkstart AAAAAAAURZ}{\bkmkend AAAAAAAURZ}
02492 \}\par
{\bkmkstart AAAAAAAUSA}{\bkmkend AAAAAAAUSA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQM" }{}}{\fldrslt {\cs37\ul\cf2 02493}}}
 {\cf17 inline} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQM" }{}}{\fldrslt {\cs37\ul\cf2 StrDup}}}
({\cf17 const} {\cf18 char}* src) \{ {\cf19 return} strdup(src); \}\par
{\bkmkstart AAAAAAAUSB}{\bkmkend AAAAAAAUSB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURJ" }{}}{\fldrslt {\cs37\ul\cf2 02494}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURJ" }{}}{\fldrslt {\cs37\ul\cf2 RmDir}}}
({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} rmdir(dir); \}\par
{\bkmkstart AAAAAAAUSC}{\bkmkend AAAAAAAUSC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURL" }{}}{\fldrslt {\cs37\ul\cf2 02495}}}
 {\cf17 inline} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAURL" }{}}{\fldrslt {\cs37\ul\cf2 IsDir}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUQC" }{}}{\fldrslt {\cs37\ul\cf2 StatStruct}}}
& st) \{ {\cf19 return} S_ISDIR(st.st_mode); \}\par
{\bkmkstart AAAAAAAUSD}{\bkmkend AAAAAAAUSD}
02496 \par
{\bkmkstart AAAAAAAUSE}{\bkmkend AAAAAAAUSE}
02497 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUSF}{\bkmkend AAAAAAAUSF}
02498 \par
{\bkmkstart AAAAAAAUSG}{\bkmkend AAAAAAAUSG}
02499 {\cf20 // Functions deprecated by MSVC 8.0.}\par
{\bkmkstart AAAAAAAUSH}{\bkmkend AAAAAAAUSH}
02500 \par
{\bkmkstart AAAAAAAUSI}{\bkmkend AAAAAAAUSI}
02501 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARHM" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_DEPRECATED_PUSH_}}}
()\par
{\bkmkstart AAAAAAAUSJ}{\bkmkend AAAAAAAUSJ}
02502 \par
{\bkmkstart AAAAAAAUSK}{\bkmkend AAAAAAAUSK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSL" }{}}{\fldrslt {\cs37\ul\cf2 02503}}}
 inline const {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSL" }{}}{\fldrslt {\cs37\ul\cf2 StrNCpy}}}
({\cf18 char}* dest, const {\cf18 char}* src, {\cf18 size_t} n) \{\par
{\bkmkstart AAAAAAAUSM}{\bkmkend AAAAAAAUSM}
02504   {\cf19 return} strncpy(dest, src, n);\par
{\bkmkstart AAAAAAAUSN}{\bkmkend AAAAAAAUSN}
02505 \}\par
{\bkmkstart AAAAAAAUSO}{\bkmkend AAAAAAAUSO}
02506 \par
{\bkmkstart AAAAAAAUSP}{\bkmkend AAAAAAAUSP}
02507 {\cf20 // ChDir(), FReopen(), FDOpen(), Read(), Write(), Close(), and}\par
{\bkmkstart AAAAAAAUSQ}{\bkmkend AAAAAAAUSQ}
02508 {\cf20 // StrError() aren't needed on Windows CE at this time and thus not}\par
{\bkmkstart AAAAAAAUSR}{\bkmkend AAAAAAAUSR}
02509 {\cf20 // defined there.}\par
{\bkmkstart AAAAAAAUSS}{\bkmkend AAAAAAAUSS}
02510 \par
{\bkmkstart AAAAAAAUST}{\bkmkend AAAAAAAUST}
02511 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT}\par
{\bkmkstart AAAAAAAUSU}{\bkmkend AAAAAAAUSU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSV" }{}}{\fldrslt {\cs37\ul\cf2 02512}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSV" }{}}{\fldrslt {\cs37\ul\cf2 ChDir}}}
({\cf17 const} {\cf18 char}* dir) \{ {\cf19 return} chdir(dir); \}\par
{\bkmkstart AAAAAAAUSW}{\bkmkend AAAAAAAUSW}
02513 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUSX}{\bkmkend AAAAAAAUSX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSY" }{}}{\fldrslt {\cs37\ul\cf2 02514}}}
 {\cf17 inline} FILE* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUSY" }{}}{\fldrslt {\cs37\ul\cf2 FOpen}}}
({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode) \{\par
{\bkmkstart AAAAAAAUSZ}{\bkmkend AAAAAAAUSZ}
02515   {\cf19 return} fopen(path, mode);\par
{\bkmkstart AAAAAAAUTA}{\bkmkend AAAAAAAUTA}
02516 \}\par
{\bkmkstart AAAAAAAUTB}{\bkmkend AAAAAAAUTB}
02517 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUTC}{\bkmkend AAAAAAAUTC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTD" }{}}{\fldrslt {\cs37\ul\cf2 02518}}}
 {\cf17 inline} FILE *{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTD" }{}}{\fldrslt {\cs37\ul\cf2 FReopen}}}
({\cf17 const} {\cf18 char}* path, {\cf17 const} {\cf18 char}* mode, FILE* stream) \{\par
{\bkmkstart AAAAAAAUTE}{\bkmkend AAAAAAAUTE}
02519   {\cf19 return} freopen(path, mode, stream);\par
{\bkmkstart AAAAAAAUTF}{\bkmkend AAAAAAAUTF}
02520 \}\par
{\bkmkstart AAAAAAAUTG}{\bkmkend AAAAAAAUTG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTH" }{}}{\fldrslt {\cs37\ul\cf2 02521}}}
 {\cf17 inline} FILE* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTH" }{}}{\fldrslt {\cs37\ul\cf2 FDOpen}}}
({\cf18 int} fd, {\cf17 const} {\cf18 char}* mode) \{ {\cf19 return} fdopen(fd, mode); \}\par
{\bkmkstart AAAAAAAUTI}{\bkmkend AAAAAAAUTI}
02522 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUTJ}{\bkmkend AAAAAAAUTJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTK" }{}}{\fldrslt {\cs37\ul\cf2 02523}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTK" }{}}{\fldrslt {\cs37\ul\cf2 FClose}}}
(FILE* fp) \{ {\cf19 return} fclose(fp); \}\par
{\bkmkstart AAAAAAAUTL}{\bkmkend AAAAAAAUTL}
02524 {\cf21 #if !GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUTM}{\bkmkend AAAAAAAUTM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTN" }{}}{\fldrslt {\cs37\ul\cf2 02525}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTN" }{}}{\fldrslt {\cs37\ul\cf2 Read}}}
({\cf18 int} fd, {\cf18 void}* buf, {\cf18 unsigned} {\cf18 int} count) \{\par
{\bkmkstart AAAAAAAUTO}{\bkmkend AAAAAAAUTO}
02526   {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(read(fd, buf, count));\par
{\bkmkstart AAAAAAAUTP}{\bkmkend AAAAAAAUTP}
02527 \}\par
{\bkmkstart AAAAAAAUTQ}{\bkmkend AAAAAAAUTQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTR" }{}}{\fldrslt {\cs37\ul\cf2 02528}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTR" }{}}{\fldrslt {\cs37\ul\cf2 Write}}}
({\cf18 int} fd, {\cf17 const} {\cf18 void}* buf, {\cf18 unsigned} {\cf18 int} count) \{\par
{\bkmkstart AAAAAAAUTS}{\bkmkend AAAAAAAUTS}
02529   {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(write(fd, buf, count));\par
{\bkmkstart AAAAAAAUTT}{\bkmkend AAAAAAAUTT}
02530 \}\par
{\bkmkstart AAAAAAAUTU}{\bkmkend AAAAAAAUTU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTV" }{}}{\fldrslt {\cs37\ul\cf2 02531}}}
 {\cf17 inline} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTV" }{}}{\fldrslt {\cs37\ul\cf2 Close}}}
({\cf18 int} fd) \{ {\cf19 return} close(fd); \}\par
{\bkmkstart AAAAAAAUTW}{\bkmkend AAAAAAAUTW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTX" }{}}{\fldrslt {\cs37\ul\cf2 02532}}}
 {\cf17 inline} {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUTX" }{}}{\fldrslt {\cs37\ul\cf2 StrError}}}
({\cf18 int} errnum) \{ {\cf19 return} strerror(errnum); \}\par
{\bkmkstart AAAAAAAUTY}{\bkmkend AAAAAAAUTY}
02533 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUTZ}{\bkmkend AAAAAAAUTZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUUA" }{}}{\fldrslt {\cs37\ul\cf2 02534}}}
 {\cf17 inline} {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUUA" }{}}{\fldrslt {\cs37\ul\cf2 GetEnv}}}
({\cf17 const} {\cf18 char}* name) \{\par
{\bkmkstart AAAAAAAUUB}{\bkmkend AAAAAAAUUB}
02535 {\cf21 #if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT}\par
{\bkmkstart AAAAAAAUUC}{\bkmkend AAAAAAAUUC}
02536   {\cf20 // We are on Windows CE, which has no environment variables.}\par
{\bkmkstart AAAAAAAUUD}{\bkmkend AAAAAAAUUD}
02537   {\cf17 static_cast<}{\cf18 void}{\cf17 >}(name);  {\cf20 // To prevent 'unused argument' warning.}\par
{\bkmkstart AAAAAAAUUE}{\bkmkend AAAAAAAUUE}
02538   {\cf19 return} NULL;\par
{\bkmkstart AAAAAAAUUF}{\bkmkend AAAAAAAUUF}
02539 {\cf21 #elif defined(__BORLANDC__) || defined(__SunOS_5_8) || defined(__SunOS_5_9)}\par
{\bkmkstart AAAAAAAUUG}{\bkmkend AAAAAAAUUG}
02540   {\cf20 // Environment variables which we programmatically clear will be set to the}\par
{\bkmkstart AAAAAAAUUH}{\bkmkend AAAAAAAUUH}
02541   {\cf20 // empty string rather than unset (NULL).  Handle that case.}\par
{\bkmkstart AAAAAAAUUI}{\bkmkend AAAAAAAUUI}
02542   {\cf17 const} {\cf18 char}* {\cf17 const} env = getenv(name);\par
{\bkmkstart AAAAAAAUUJ}{\bkmkend AAAAAAAUUJ}
02543   {\cf19 return} (env != NULL && env[0] != {\cf23 '\\0'}) ? env : NULL;\par
{\bkmkstart AAAAAAAUUK}{\bkmkend AAAAAAAUUK}
02544 {\cf21 #else}\par
{\bkmkstart AAAAAAAUUL}{\bkmkend AAAAAAAUUL}
02545   {\cf19 return} getenv(name);\par
{\bkmkstart AAAAAAAUUM}{\bkmkend AAAAAAAUUM}
02546 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUUN}{\bkmkend AAAAAAAUUN}
02547 \}\par
{\bkmkstart AAAAAAAUUO}{\bkmkend AAAAAAAUUO}
02548 \par
{\bkmkstart AAAAAAAUUP}{\bkmkend AAAAAAAUUP}
02549 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAARHP" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_DEPRECATED_POP_}}}
()\par
{\bkmkstart AAAAAAAUUQ}{\bkmkend AAAAAAAUUQ}
02550 \par
{\bkmkstart AAAAAAAUUR}{\bkmkend AAAAAAAUUR}
02551 {\cf21 #if GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUUS}{\bkmkend AAAAAAAUUS}
02552 {\cf20 // Windows CE has no C library. The abort() function is used in}\par
{\bkmkstart AAAAAAAUUT}{\bkmkend AAAAAAAUUT}
02553 {\cf20 // several places in Google Test. This implementation provides a reasonable}\par
{\bkmkstart AAAAAAAUUU}{\bkmkend AAAAAAAUUU}
02554 {\cf20 // imitation of standard behaviour.}\par
{\bkmkstart AAAAAAAUUV}{\bkmkend AAAAAAAUUV}
02555 {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUUW" }{}}{\fldrslt {\cs37\ul\cf2 Abort}}}
();\par
{\bkmkstart AAAAAAAUUX}{\bkmkend AAAAAAAUUX}
02556 {\cf21 #else}\par
{\bkmkstart AAAAAAAUUY}{\bkmkend AAAAAAAUUY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUUW" }{}}{\fldrslt {\cs37\ul\cf2 02557}}}
 {\cf17 inline} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUUW" }{}}{\fldrslt {\cs37\ul\cf2 Abort}}}
() \{ abort(); \}\par
{\bkmkstart AAAAAAAUUZ}{\bkmkend AAAAAAAUUZ}
02558 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUVA}{\bkmkend AAAAAAAUVA}
02559 \par
{\bkmkstart AAAAAAAUVB}{\bkmkend AAAAAAAUVB}
02560 \}  {\cf20 // namespace posix}\par
{\bkmkstart AAAAAAAUVC}{\bkmkend AAAAAAAUVC}
02561 \par
{\bkmkstart AAAAAAAUVD}{\bkmkend AAAAAAAUVD}
02562 {\cf20 // MSVC "deprecates" snprintf and issues warnings wherever it is used.  In}\par
{\bkmkstart AAAAAAAUVE}{\bkmkend AAAAAAAUVE}
02563 {\cf20 // order to avoid these warnings, we need to use _snprintf or _snprintf_s on}\par
{\bkmkstart AAAAAAAUVF}{\bkmkend AAAAAAAUVF}
02564 {\cf20 // MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate}\par
{\bkmkstart AAAAAAAUVG}{\bkmkend AAAAAAAUVG}
02565 {\cf20 // function in order to achieve that.  We use macro definition here because}\par
{\bkmkstart AAAAAAAUVH}{\bkmkend AAAAAAAUVH}
02566 {\cf20 // snprintf is a variadic function.}\par
{\bkmkstart AAAAAAAUVI}{\bkmkend AAAAAAAUVI}
02567 {\cf21 #if _MSC_VER >= 1400 && !GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAAAUVJ}{\bkmkend AAAAAAAUVJ}
02568 {\cf20 // MSVC 2005 and above support variadic macros.}\par
{\bkmkstart AAAAAAAUVK}{\bkmkend AAAAAAAUVK}
02569 {\cf21 # define GTEST_SNPRINTF_(buffer, size, format, ...) \\}\par
{\bkmkstart AAAAAAAUVL}{\bkmkend AAAAAAAUVL}
02570 {\cf21      _snprintf_s(buffer, size, size, format, __VA_ARGS__)}\par
{\bkmkstart AAAAAAAUVM}{\bkmkend AAAAAAAUVM}
02571 {\cf21 #elif defined(_MSC_VER)}\par
{\bkmkstart AAAAAAAUVN}{\bkmkend AAAAAAAUVN}
02572 {\cf20 // Windows CE does not define _snprintf_s and MSVC prior to 2005 doesn't}\par
{\bkmkstart AAAAAAAUVO}{\bkmkend AAAAAAAUVO}
02573 {\cf20 // complain about _snprintf.}\par
{\bkmkstart AAAAAAAUVP}{\bkmkend AAAAAAAUVP}
02574 {\cf21 # define GTEST_SNPRINTF_ _snprintf}\par
{\bkmkstart AAAAAAAUVQ}{\bkmkend AAAAAAAUVQ}
02575 {\cf21 #else}\par
{\bkmkstart AAAAAAAUVR}{\bkmkend AAAAAAAUVR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUVS" }{}}{\fldrslt {\cs37\ul\cf2 02576}}}
 {\cf21 # define GTEST_SNPRINTF_ snprintf}\par
{\bkmkstart AAAAAAAUVT}{\bkmkend AAAAAAAUVT}
02577 {\cf21 #endif}\par
{\bkmkstart AAAAAAAUVU}{\bkmkend AAAAAAAUVU}
02578 \par
{\bkmkstart AAAAAAAUVV}{\bkmkend AAAAAAAUVV}
02579 {\cf20 // The maximum number a BiggestInt can represent.  This definition}\par
{\bkmkstart AAAAAAAUVW}{\bkmkend AAAAAAAUVW}
02580 {\cf20 // works no matter BiggestInt is represented in one's complement or}\par
{\bkmkstart AAAAAAAUVX}{\bkmkend AAAAAAAUVX}
02581 {\cf20 // two's complement.}\par
{\bkmkstart AAAAAAAUVY}{\bkmkend AAAAAAAUVY}
02582 {\cf20 //}\par
{\bkmkstart AAAAAAAUVZ}{\bkmkend AAAAAAAUVZ}
02583 {\cf20 // We cannot rely on numeric_limits in STL, as __int64 and long long}\par
{\bkmkstart AAAAAAAUWA}{\bkmkend AAAAAAAUWA}
02584 {\cf20 // are not part of standard C++ and numeric_limits doesn't need to be}\par
{\bkmkstart AAAAAAAUWB}{\bkmkend AAAAAAAUWB}
02585 {\cf20 // defined for them.}\par
{\bkmkstart AAAAAAAUWC}{\bkmkend AAAAAAAUWC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUWD" }{}}{\fldrslt {\cs37\ul\cf2 02586}}}
 {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUWD" }{}}{\fldrslt {\cs37\ul\cf2 kMaxBiggestInt}}}
 =\par
{\bkmkstart AAAAAAAUWE}{\bkmkend AAAAAAAUWE}
02587     ~({\cf17 static_cast<}{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
{\cf17 >}(1) << (8*{\cf17 sizeof}({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
) - 1));\par
{\bkmkstart AAAAAAAUWF}{\bkmkend AAAAAAAUWF}
02588 \par
{\bkmkstart AAAAAAAUWG}{\bkmkend AAAAAAAUWG}
02589 {\cf20 // This template class serves as a compile-time function from size to}\par
{\bkmkstart AAAAAAAUWH}{\bkmkend AAAAAAAUWH}
02590 {\cf20 // type.  It maps a size in bytes to a primitive type with that}\par
{\bkmkstart AAAAAAAUWI}{\bkmkend AAAAAAAUWI}
02591 {\cf20 // size. e.g.}\par
{\bkmkstart AAAAAAAUWJ}{\bkmkend AAAAAAAUWJ}
02592 {\cf20 //}\par
{\bkmkstart AAAAAAAUWK}{\bkmkend AAAAAAAUWK}
02593 {\cf20 //   TypeWithSize<4>::UInt}\par
{\bkmkstart AAAAAAAUWL}{\bkmkend AAAAAAAUWL}
02594 {\cf20 //}\par
{\bkmkstart AAAAAAAUWM}{\bkmkend AAAAAAAUWM}
02595 {\cf20 // is typedef-ed to be unsigned int (unsigned integer made up of 4}\par
{\bkmkstart AAAAAAAUWN}{\bkmkend AAAAAAAUWN}
02596 {\cf20 // bytes).}\par
{\bkmkstart AAAAAAAUWO}{\bkmkend AAAAAAAUWO}
02597 {\cf20 //}\par
{\bkmkstart AAAAAAAUWP}{\bkmkend AAAAAAAUWP}
02598 {\cf20 // Such functionality should belong to STL, but I cannot find it}\par
{\bkmkstart AAAAAAAUWQ}{\bkmkend AAAAAAAUWQ}
02599 {\cf20 // there.}\par
{\bkmkstart AAAAAAAUWR}{\bkmkend AAAAAAAUWR}
02600 {\cf20 //}\par
{\bkmkstart AAAAAAAUWS}{\bkmkend AAAAAAAUWS}
02601 {\cf20 // Google Test uses this class in the implementation of floating-point}\par
{\bkmkstart AAAAAAAUWT}{\bkmkend AAAAAAAUWT}
02602 {\cf20 // comparison.}\par
{\bkmkstart AAAAAAAUWU}{\bkmkend AAAAAAAUWU}
02603 {\cf20 //}\par
{\bkmkstart AAAAAAAUWV}{\bkmkend AAAAAAAUWV}
02604 {\cf20 // For now it only handles UInt (unsigned int) as that's all Google Test}\par
{\bkmkstart AAAAAAAUWW}{\bkmkend AAAAAAAUWW}
02605 {\cf20 // needs.  Other types can be easily added in the future if need}\par
{\bkmkstart AAAAAAAUWX}{\bkmkend AAAAAAAUWX}
02606 {\cf20 // arises.}\par
{\bkmkstart AAAAAAAUWY}{\bkmkend AAAAAAAUWY}
02607 {\cf17 template} <{\cf18 size_t} size>\par
{\bkmkstart AAAAAAAUWZ}{\bkmkend AAAAAAAUWZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 02608}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize}}}
 \{\par
{\bkmkstart AAAAAAAUXB}{\bkmkend AAAAAAAUXB}
02609  {\cf17 public}:\par
{\bkmkstart AAAAAAAUXC}{\bkmkend AAAAAAAUXC}
02610   {\cf20 // This prevents the user from using TypeWithSize<N> with incorrect}\par
{\bkmkstart AAAAAAAUXD}{\bkmkend AAAAAAAUXD}
02611   {\cf20 // values of N.}\par
{\bkmkstart AAAAAAAUXE}{\bkmkend AAAAAAAUXE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXF" }{}}{\fldrslt {\cs37\ul\cf2 02612}}}
   {\cf17 typedef} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXF" }{}}{\fldrslt {\cs37\ul\cf2 UInt}}}
;\par
{\bkmkstart AAAAAAAUXG}{\bkmkend AAAAAAAUXG}
02613 \};\par
{\bkmkstart AAAAAAAUXH}{\bkmkend AAAAAAAUXH}
02614 \par
{\bkmkstart AAAAAAAUXI}{\bkmkend AAAAAAAUXI}
02615 {\cf20 // The specialization for size 4.}\par
{\bkmkstart AAAAAAAUXJ}{\bkmkend AAAAAAAUXJ}
02616 {\cf17 template} <>\par
{\bkmkstart AAAAAAAUXK}{\bkmkend AAAAAAAUXK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXL" }{}}{\fldrslt {\cs37\ul\cf2 02617}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize}}}
<4> \{\par
{\bkmkstart AAAAAAAUXM}{\bkmkend AAAAAAAUXM}
02618  {\cf17 public}:\par
{\bkmkstart AAAAAAAUXN}{\bkmkend AAAAAAAUXN}
02619   {\cf20 // unsigned int has size 4 in both gcc and MSVC.}\par
{\bkmkstart AAAAAAAUXO}{\bkmkend AAAAAAAUXO}
02620   {\cf20 //}\par
{\bkmkstart AAAAAAAUXP}{\bkmkend AAAAAAAUXP}
02621   {\cf20 // As base/basictypes.h doesn't compile on Windows, we cannot use}\par
{\bkmkstart AAAAAAAUXQ}{\bkmkend AAAAAAAUXQ}
02622   {\cf20 // uint32, uint64, and etc here.}\par
{\bkmkstart AAAAAAAUXR}{\bkmkend AAAAAAAUXR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXS" }{}}{\fldrslt {\cs37\ul\cf2 02623}}}
   {\cf17 typedef} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXS" }{}}{\fldrslt {\cs37\ul\cf2 Int}}}
;\par
{\bkmkstart AAAAAAAUXT}{\bkmkend AAAAAAAUXT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXU" }{}}{\fldrslt {\cs37\ul\cf2 02624}}}
   {\cf17 typedef} {\cf18 unsigned} {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXU" }{}}{\fldrslt {\cs37\ul\cf2 UInt}}}
;\par
{\bkmkstart AAAAAAAUXV}{\bkmkend AAAAAAAUXV}
02625 \};\par
{\bkmkstart AAAAAAAUXW}{\bkmkend AAAAAAAUXW}
02626 \par
{\bkmkstart AAAAAAAUXX}{\bkmkend AAAAAAAUXX}
02627 {\cf20 // The specialization for size 8.}\par
{\bkmkstart AAAAAAAUXY}{\bkmkend AAAAAAAUXY}
02628 {\cf17 template} <>\par
{\bkmkstart AAAAAAAUXZ}{\bkmkend AAAAAAAUXZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYA" }{}}{\fldrslt {\cs37\ul\cf2 02629}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize}}}
<8> \{\par
{\bkmkstart AAAAAAAUYB}{\bkmkend AAAAAAAUYB}
02630  {\cf17 public}:\par
{\bkmkstart AAAAAAAUYC}{\bkmkend AAAAAAAUYC}
02631 {\cf21 #if GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUYD}{\bkmkend AAAAAAAUYD}
02632   {\cf17 typedef} __int64 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYE" }{}}{\fldrslt {\cs37\ul\cf2 Int}}}
;\par
{\bkmkstart AAAAAAAUYF}{\bkmkend AAAAAAAUYF}
02633   {\cf17 typedef} {\cf18 unsigned} __int64 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXF" }{}}{\fldrslt {\cs37\ul\cf2 UInt}}}
;\par
{\bkmkstart AAAAAAAUYG}{\bkmkend AAAAAAAUYG}
02634 {\cf21 #else}\par
{\bkmkstart AAAAAAAUYH}{\bkmkend AAAAAAAUYH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYE" }{}}{\fldrslt {\cs37\ul\cf2 02635}}}
   {\cf17 typedef} {\cf18 long} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYE" }{}}{\fldrslt {\cs37\ul\cf2 Int}}}
;  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAUYI}{\bkmkend AAAAAAAUYI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYJ" }{}}{\fldrslt {\cs37\ul\cf2 02636}}}
   {\cf17 typedef} {\cf18 unsigned} {\cf18 long} {\cf18 long} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYJ" }{}}{\fldrslt {\cs37\ul\cf2 UInt}}}
;  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAUYK}{\bkmkend AAAAAAAUYK}
02637 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAUYL}{\bkmkend AAAAAAAUYL}
02638 \};\par
{\bkmkstart AAAAAAAUYM}{\bkmkend AAAAAAAUYM}
02639 \par
{\bkmkstart AAAAAAAUYN}{\bkmkend AAAAAAAUYN}
02640 {\cf20 // Integer types of known sizes.}\par
{\bkmkstart AAAAAAAUYO}{\bkmkend AAAAAAAUYO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYP" }{}}{\fldrslt {\cs37\ul\cf2 02641}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize<4>::Int}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYP" }{}}{\fldrslt {\cs37\ul\cf2 Int32}}}
;\par
{\bkmkstart AAAAAAAUYQ}{\bkmkend AAAAAAAUYQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYR" }{}}{\fldrslt {\cs37\ul\cf2 02642}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXF" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize<4>::UInt}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYR" }{}}{\fldrslt {\cs37\ul\cf2 UInt32}}}
;\par
{\bkmkstart AAAAAAAUYS}{\bkmkend AAAAAAAUYS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYT" }{}}{\fldrslt {\cs37\ul\cf2 02643}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize<8>::Int}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYT" }{}}{\fldrslt {\cs37\ul\cf2 Int64}}}
;\par
{\bkmkstart AAAAAAAUYU}{\bkmkend AAAAAAAUYU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYV" }{}}{\fldrslt {\cs37\ul\cf2 02644}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXF" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize<8>::UInt}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYV" }{}}{\fldrslt {\cs37\ul\cf2 UInt64}}}
;\par
{\bkmkstart AAAAAAAUYW}{\bkmkend AAAAAAAUYW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXC" }{}}{\fldrslt {\cs37\ul\cf2 02645}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUXA" }{}}{\fldrslt {\cs37\ul\cf2 TypeWithSize<8>::Int}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXC" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
;  {\cf20 // Represents time in milliseconds.}\par
{\bkmkstart AAAAAAAUYX}{\bkmkend AAAAAAAUYX}
02646 \par
{\bkmkstart AAAAAAAUYY}{\bkmkend AAAAAAAUYY}
02647 {\cf20 // Utilities for command line flags and environment variables.}\par
{\bkmkstart AAAAAAAUYZ}{\bkmkend AAAAAAAUYZ}
02648 \par
{\bkmkstart AAAAAAAUZA}{\bkmkend AAAAAAAUZA}
02649 {\cf20 // Macro for referencing flags.}\par
{\bkmkstart AAAAAAAUZB}{\bkmkend AAAAAAAUZB}
02650 {\cf21 #if !defined(GTEST_FLAG)}\par
{\bkmkstart AAAAAAAUZC}{\bkmkend AAAAAAAUZC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUZD" }{}}{\fldrslt {\cs37\ul\cf2 02651}}}
 {\cf21 # define GTEST_FLAG(name) FLAGS_gtest_##name}\par
{\bkmkstart AAAAAAAUZE}{\bkmkend AAAAAAAUZE}
02652 {\cf21 #endif  }{\cf20 // !defined(GTEST_FLAG)}\par
{\bkmkstart AAAAAAAUZF}{\bkmkend AAAAAAAUZF}
02653 \par
{\bkmkstart AAAAAAAUZG}{\bkmkend AAAAAAAUZG}
02654 {\cf21 #if !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)}\par
{\bkmkstart AAAAAAAUZH}{\bkmkend AAAAAAAUZH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUZI" }{}}{\fldrslt {\cs37\ul\cf2 02655}}}
 {\cf21 # define GTEST_USE_OWN_FLAGFILE_FLAG_ 1}\par
{\bkmkstart AAAAAAAUZJ}{\bkmkend AAAAAAAUZJ}
02656 {\cf21 #endif  }{\cf20 // !defined(GTEST_USE_OWN_FLAGFILE_FLAG_)}\par
{\bkmkstart AAAAAAAUZK}{\bkmkend AAAAAAAUZK}
02657 \par
{\bkmkstart AAAAAAAUZL}{\bkmkend AAAAAAAUZL}
02658 {\cf21 #if !defined(GTEST_DECLARE_bool_)}\par
{\bkmkstart AAAAAAAUZM}{\bkmkend AAAAAAAUZM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUZN" }{}}{\fldrslt {\cs37\ul\cf2 02659}}}
 {\cf21 # define GTEST_FLAG_SAVER_ ::testing::internal::GTestFlagSaver}\par
{\bkmkstart AAAAAAAUZO}{\bkmkend AAAAAAAUZO}
02660 \par
{\bkmkstart AAAAAAAUZP}{\bkmkend AAAAAAAUZP}
02661 {\cf20 // Macros for declaring flags.}\par
{\bkmkstart AAAAAAAUZQ}{\bkmkend AAAAAAAUZQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 02662}}}
 {\cf21 # define GTEST_DECLARE_bool_(name) GTEST_API_ extern bool GTEST_FLAG(name)}\par
{\bkmkstart AAAAAAAUZR}{\bkmkend AAAAAAAUZR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMHS" }{}}{\fldrslt {\cs37\ul\cf2 02663}}}
 {\cf21 # define GTEST_DECLARE_int32_(name) \\}\par
{\bkmkstart AAAAAAAUZS}{\bkmkend AAAAAAAUZS}
02664 {\cf21     GTEST_API_ extern ::testing::internal::Int32 GTEST_FLAG(name)}\par
{\bkmkstart AAAAAAAUZT}{\bkmkend AAAAAAAUZT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 02665}}}
 {\cf21 # define GTEST_DECLARE_string_(name) \\}\par
{\bkmkstart AAAAAAAUZU}{\bkmkend AAAAAAAUZU}
02666 {\cf21     GTEST_API_ extern ::std::string GTEST_FLAG(name)}\par
{\bkmkstart AAAAAAAUZV}{\bkmkend AAAAAAAUZV}
02667 \par
{\bkmkstart AAAAAAAUZW}{\bkmkend AAAAAAAUZW}
02668 {\cf20 // Macros for defining flags.}\par
{\bkmkstart AAAAAAAUZX}{\bkmkend AAAAAAAUZX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUZY" }{}}{\fldrslt {\cs37\ul\cf2 02669}}}
 {\cf21 # define GTEST_DEFINE_bool_(name, default_val, doc) \\}\par
{\bkmkstart AAAAAAAUZZ}{\bkmkend AAAAAAAUZZ}
02670 {\cf21     GTEST_API_ bool GTEST_FLAG(name) = (default_val)}\par
{\bkmkstart AAAAAAAVAA}{\bkmkend AAAAAAAVAA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVAB" }{}}{\fldrslt {\cs37\ul\cf2 02671}}}
 {\cf21 # define GTEST_DEFINE_int32_(name, default_val, doc) \\}\par
{\bkmkstart AAAAAAAVAC}{\bkmkend AAAAAAAVAC}
02672 {\cf21     GTEST_API_ ::testing::internal::Int32 GTEST_FLAG(name) = (default_val)}\par
{\bkmkstart AAAAAAAVAD}{\bkmkend AAAAAAAVAD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVAE" }{}}{\fldrslt {\cs37\ul\cf2 02673}}}
 {\cf21 # define GTEST_DEFINE_string_(name, default_val, doc) \\}\par
{\bkmkstart AAAAAAAVAF}{\bkmkend AAAAAAAVAF}
02674 {\cf21     GTEST_API_ ::std::string GTEST_FLAG(name) = (default_val)}\par
{\bkmkstart AAAAAAAVAG}{\bkmkend AAAAAAAVAG}
02675 \par
{\bkmkstart AAAAAAAVAH}{\bkmkend AAAAAAAVAH}
02676 {\cf21 #endif  }{\cf20 // !defined(GTEST_DECLARE_bool_)}\par
{\bkmkstart AAAAAAAVAI}{\bkmkend AAAAAAAVAI}
02677 \par
{\bkmkstart AAAAAAAVAJ}{\bkmkend AAAAAAAVAJ}
02678 {\cf20 // Thread annotations}\par
{\bkmkstart AAAAAAAVAK}{\bkmkend AAAAAAAVAK}
02679 {\cf21 #if !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)}\par
{\bkmkstart AAAAAAAVAL}{\bkmkend AAAAAAAVAL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVAM" }{}}{\fldrslt {\cs37\ul\cf2 02680}}}
 {\cf21 # define GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)}\par
{\bkmkstart AAAAAAAVAN}{\bkmkend AAAAAAAVAN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 02681}}}
 {\cf21 # define GTEST_LOCK_EXCLUDED_(locks)}\par
{\bkmkstart AAAAAAAVAO}{\bkmkend AAAAAAAVAO}
02682 {\cf21 #endif  }{\cf20 // !defined(GTEST_EXCLUSIVE_LOCK_REQUIRED_)}\par
{\bkmkstart AAAAAAAVAP}{\bkmkend AAAAAAAVAP}
02683 \par
{\bkmkstart AAAAAAAVAQ}{\bkmkend AAAAAAAVAQ}
02684 {\cf20 // Parses 'str' for a 32-bit signed integer.  If successful, writes the result}\par
{\bkmkstart AAAAAAAVAR}{\bkmkend AAAAAAAVAR}
02685 {\cf20 // to *value and returns true; otherwise leaves *value unchanged and returns}\par
{\bkmkstart AAAAAAAVAS}{\bkmkend AAAAAAAVAS}
02686 {\cf20 // false.}\par
{\bkmkstart AAAAAAAVAT}{\bkmkend AAAAAAAVAT}
02687 {\cf20 // FIXME: Find a better way to refactor flag and environment parsing}\par
{\bkmkstart AAAAAAAVAU}{\bkmkend AAAAAAAVAU}
02688 {\cf20 // out of both gtest-port.cc and gtest.cc to avoid exporting this utility}\par
{\bkmkstart AAAAAAAVAV}{\bkmkend AAAAAAAVAV}
02689 {\cf20 // function.}\par
{\bkmkstart AAAAAAAVAW}{\bkmkend AAAAAAAVAW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVAX" }{}}{\fldrslt {\cs37\ul\cf2 02690}}}
 {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVAX" }{}}{\fldrslt {\cs37\ul\cf2 ParseInt32}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPA" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
& src_text, {\cf17 const} {\cf18 char}* str, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYP" }{}}{\fldrslt {\cs37\ul\cf2 Int32}}}
* value);\par
{\bkmkstart AAAAAAAVAY}{\bkmkend AAAAAAAVAY}
02691 \par
{\bkmkstart AAAAAAAVAZ}{\bkmkend AAAAAAAVAZ}
02692 {\cf20 // Parses a bool/Int32/string from the environment variable}\par
{\bkmkstart AAAAAAAVBA}{\bkmkend AAAAAAAVBA}
02693 {\cf20 // corresponding to the given Google Test flag.}\par
{\bkmkstart AAAAAAAVBB}{\bkmkend AAAAAAAVBB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBC" }{}}{\fldrslt {\cs37\ul\cf2 02694}}}
 {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBC" }{}}{\fldrslt {\cs37\ul\cf2 BoolFromGTestEnv}}}
({\cf17 const} {\cf18 char}* flag, {\cf18 bool} default_val);\par
{\bkmkstart AAAAAAAVBD}{\bkmkend AAAAAAAVBD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBE" }{}}{\fldrslt {\cs37\ul\cf2 02695}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYP" }{}}{\fldrslt {\cs37\ul\cf2 Int32}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBE" }{}}{\fldrslt {\cs37\ul\cf2 Int32FromGTestEnv}}}
({\cf17 const} {\cf18 char}* flag, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAUYP" }{}}{\fldrslt {\cs37\ul\cf2 Int32}}}
 default_val);\par
{\bkmkstart AAAAAAAVBF}{\bkmkend AAAAAAAVBF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBG" }{}}{\fldrslt {\cs37\ul\cf2 02696}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBG" }{}}{\fldrslt {\cs37\ul\cf2 OutputFlagAlsoCheckEnvVar}}}
();\par
{\bkmkstart AAAAAAAVBH}{\bkmkend AAAAAAAVBH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBI" }{}}{\fldrslt {\cs37\ul\cf2 02697}}}
 {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAVBI" }{}}{\fldrslt {\cs37\ul\cf2 StringFromGTestEnv}}}
({\cf17 const} {\cf18 char}* flag, {\cf17 const} {\cf18 char}* default_val);\par
{\bkmkstart AAAAAAAVBJ}{\bkmkend AAAAAAAVBJ}
02698 \par
{\bkmkstart AAAAAAAVBK}{\bkmkend AAAAAAAVBK}
02699 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAAAVBL}{\bkmkend AAAAAAAVBL}
02700 \}  {\cf20 // namespace testing}\par
{\bkmkstart AAAAAAAVBM}{\bkmkend AAAAAAAVBM}
02701 \par
{\bkmkstart AAAAAAAVBN}{\bkmkend AAAAAAAVBN}
02702 {\cf21 #endif  }{\cf20 // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_}\par
}
}