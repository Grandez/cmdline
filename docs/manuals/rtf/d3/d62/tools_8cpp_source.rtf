{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tools.cpp\par \pard\plain 
{\tc\tcl2 \v tools.cpp}
{\xe \v tools.cpp}
{\bkmkstart AAAAAAADLW}
{\bkmkend AAAAAAADLW}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAADLX}{\bkmkend AAAAAAADLX}
00001 {\cf21 #define _CRT_SECURE_NO_WARNINGS}\par
{\bkmkstart AAAAAAADLY}{\bkmkend AAAAAAADLY}
00002 \par
{\bkmkstart AAAAAAADLZ}{\bkmkend AAAAAAADLZ}
00003 {\cf21 #include <regex>}\par
{\bkmkstart AAAAAAADMA}{\bkmkend AAAAAAADMA}
00004 {\cf21 #include <ctime>}\par
{\bkmkstart AAAAAAADMB}{\bkmkend AAAAAAADMB}
00005 {\cf21 #include <locale>}\par
{\bkmkstart AAAAAAADMC}{\bkmkend AAAAAAADMC}
00006 {\cf21 #include <cctype>}\par
{\bkmkstart AAAAAAADMD}{\bkmkend AAAAAAADMD}
00007 \par
{\bkmkstart AAAAAAADME}{\bkmkend AAAAAAADME}
00008 {\cf21 #include "tools.hpp"}\par
{\bkmkstart AAAAAAADMF}{\bkmkend AAAAAAADMF}
00009 {\cf21 #include "parameter_tree.hpp"}\par
{\bkmkstart AAAAAAADMG}{\bkmkend AAAAAAADMG}
00010 {\cf21 #include "cmdline_exceptions.hpp"}\par
{\bkmkstart AAAAAAADMH}{\bkmkend AAAAAAADMH}
00011 \par
{\bkmkstart AAAAAAADMI}{\bkmkend AAAAAAADMI}
00012 {\cf17 using namespace }std;\par
{\bkmkstart AAAAAAADMJ}{\bkmkend AAAAAAADMJ}
00013 {\cf17 using namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 cmdline}}}
;\par
{\bkmkstart AAAAAAADMK}{\bkmkend AAAAAAADMK}
00014 \par
{\bkmkstart AAAAAAADML}{\bkmkend AAAAAAADML}
00015 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 _cmdline}}}
 \{\par
{\bkmkstart AAAAAAADMM}{\bkmkend AAAAAAADMM}
00016     {\cf18 char} _upper[64] = {\cf22 ""};\par
{\bkmkstart AAAAAAADMN}{\bkmkend AAAAAAADMN}
00017     ParameterTree* createTree({\cf17 const} {\cf18 char}* word) \{\par
{\bkmkstart AAAAAAADMO}{\bkmkend AAAAAAADMO}
00018         ParameterTree* root = {\cf17 new} ParameterTree(word);\par
{\bkmkstart AAAAAAADMP}{\bkmkend AAAAAAADMP}
00019         ParameterTree* prev = root;\par
{\bkmkstart AAAAAAADMQ}{\bkmkend AAAAAAADMQ}
00020         ParameterTree* temp = NULL;\par
{\bkmkstart AAAAAAADMR}{\bkmkend AAAAAAADMR}
00021         {\cf19 for} ({\cf18 size_t} idx = 1; idx < strlen(word); idx++) \{\par
{\bkmkstart AAAAAAADMS}{\bkmkend AAAAAAADMS}
00022             temp = {\cf17 new} ParameterTree(&(word[idx]), prev);\par
{\bkmkstart AAAAAAADMT}{\bkmkend AAAAAAADMT}
00023             prev->addChild(temp);\par
{\bkmkstart AAAAAAADMU}{\bkmkend AAAAAAADMU}
00024             prev = temp;\par
{\bkmkstart AAAAAAADMV}{\bkmkend AAAAAAADMV}
00025         \}\par
{\bkmkstart AAAAAAADMW}{\bkmkend AAAAAAADMW}
00026         {\cf19 return} (root);\par
{\bkmkstart AAAAAAADMX}{\bkmkend AAAAAAADMX}
00027     \}\par
{\bkmkstart AAAAAAADMY}{\bkmkend AAAAAAADMY}
00028     ParameterTree *joinTree(ParameterTree* root, {\cf17 const} {\cf18 char}* word) \{\par
{\bkmkstart AAAAAAADMZ}{\bkmkend AAAAAAADMZ}
00029         {\cf18 int} idx = 1; {\cf20 // Here we know first word matches, so we check second letter}\par
{\bkmkstart AAAAAAADNA}{\bkmkend AAAAAAADNA}
00030         ParameterTree* last = root;\par
{\bkmkstart AAAAAAADNB}{\bkmkend AAAAAAADNB}
00031         ParameterTree* act = root->getNext();\par
{\bkmkstart AAAAAAADNC}{\bkmkend AAAAAAADNC}
00032         {\cf19 if} (act == {\cf17 nullptr}) \{\par
{\bkmkstart AAAAAAADND}{\bkmkend AAAAAAADND}
00033             last->addBranch(createTree(&(word[idx])));\par
{\bkmkstart AAAAAAADNE}{\bkmkend AAAAAAADNE}
00034             {\cf19 return} last;\par
{\bkmkstart AAAAAAADNF}{\bkmkend AAAAAAADNF}
00035         \}\par
{\bkmkstart AAAAAAADNG}{\bkmkend AAAAAAADNG}
00036         {\cf18 bool} done = {\cf17 false};\par
{\bkmkstart AAAAAAADNH}{\bkmkend AAAAAAADNH}
00037         {\cf19 while} (!done) \{\par
{\bkmkstart AAAAAAADNI}{\bkmkend AAAAAAADNI}
00038             {\cf19 if} (act == {\cf17 nullptr}) \{\par
{\bkmkstart AAAAAAADNJ}{\bkmkend AAAAAAADNJ}
00039                 last->addBranch(createTree(&(word[idx])));\par
{\bkmkstart AAAAAAADNK}{\bkmkend AAAAAAADNK}
00040                 done = {\cf17 true};\par
{\bkmkstart AAAAAAADNL}{\bkmkend AAAAAAADNL}
00041                 {\cf19 continue};\par
{\bkmkstart AAAAAAADNM}{\bkmkend AAAAAAADNM}
00042             \}\par
{\bkmkstart AAAAAAADNN}{\bkmkend AAAAAAADNN}
00043             {\cf19 if} (act->letter == word[idx]) \{\par
{\bkmkstart AAAAAAADNO}{\bkmkend AAAAAAADNO}
00044                 last = act;\par
{\bkmkstart AAAAAAADNP}{\bkmkend AAAAAAADNP}
00045                 act = act->getNext();\par
{\bkmkstart AAAAAAADNQ}{\bkmkend AAAAAAADNQ}
00046                 idx++;\par
{\bkmkstart AAAAAAADNR}{\bkmkend AAAAAAADNR}
00047                 {\cf19 continue};\par
{\bkmkstart AAAAAAADNS}{\bkmkend AAAAAAADNS}
00048             \}\par
{\bkmkstart AAAAAAADNT}{\bkmkend AAAAAAADNT}
00049             last->addBranch(createTree(&(word[idx])));\par
{\bkmkstart AAAAAAADNU}{\bkmkend AAAAAAADNU}
00050             done = {\cf17 true};\par
{\bkmkstart AAAAAAADNV}{\bkmkend AAAAAAADNV}
00051         \}\par
{\bkmkstart AAAAAAADNW}{\bkmkend AAAAAAADNW}
00052         {\cf19 return} last;\par
{\bkmkstart AAAAAAADNX}{\bkmkend AAAAAAADNX}
00053     \}\par
{\bkmkstart AAAAAAADNY}{\bkmkend AAAAAAADNY}
00054     {\cf18 void} add2tree(ParameterTree* root[], {\cf17 const} {\cf18 char}* word) \{\par
{\bkmkstart AAAAAAADNZ}{\bkmkend AAAAAAADNZ}
00055         ParameterTree* last   = {\cf17 nullptr};\par
{\bkmkstart AAAAAAADOA}{\bkmkend AAAAAAADOA}
00056         ParameterTree* parent = {\cf17 nullptr};\par
{\bkmkstart AAAAAAADOB}{\bkmkend AAAAAAADOB}
00057         {\cf18 int} pos = word[0] - {\cf23 ' '};\par
{\bkmkstart AAAAAAADOC}{\bkmkend AAAAAAADOC}
00058         {\cf19 if} (root[pos] == {\cf17 nullptr}) \{\par
{\bkmkstart AAAAAAADOD}{\bkmkend AAAAAAADOD}
00059             root[pos] = createTree(word);\par
{\bkmkstart AAAAAAADOE}{\bkmkend AAAAAAADOE}
00060         \}\par
{\bkmkstart AAAAAAADOF}{\bkmkend AAAAAAADOF}
00061         {\cf19 else} \{\par
{\bkmkstart AAAAAAADOG}{\bkmkend AAAAAAADOG}
00062             last = joinTree(root[pos], word);\par
{\bkmkstart AAAAAAADOH}{\bkmkend AAAAAAADOH}
00063             parent = last->parent;\par
{\bkmkstart AAAAAAADOI}{\bkmkend AAAAAAADOI}
00064             {\cf19 while} (parent) \{\par
{\bkmkstart AAAAAAADOJ}{\bkmkend AAAAAAADOJ}
00065                 parent->branchs = max(parent->branchs, last->branchs);\par
{\bkmkstart AAAAAAADOK}{\bkmkend AAAAAAADOK}
00066                 parent = parent->parent;\par
{\bkmkstart AAAAAAADOL}{\bkmkend AAAAAAADOL}
00067             \}\par
{\bkmkstart AAAAAAADOM}{\bkmkend AAAAAAADOM}
00068         \}\par
{\bkmkstart AAAAAAADON}{\bkmkend AAAAAAADON}
00069     \}\par
{\bkmkstart AAAAAAADOO}{\bkmkend AAAAAAADOO}
00070     {\cf18 char}* makeChar({\cf18 string} str) \{\par
{\bkmkstart AAAAAAADOP}{\bkmkend AAAAAAADOP}
00071         {\cf18 int} len = (int) str.length() + 1;\par
{\bkmkstart AAAAAAADOQ}{\bkmkend AAAAAAADOQ}
00072         {\cf18 char}* cstr = {\cf17 new} {\cf18 char}[len];\par
{\bkmkstart AAAAAAADOR}{\bkmkend AAAAAAADOR}
00073         strcpy_s(cstr, len, str.c_str());\par
{\bkmkstart AAAAAAADOS}{\bkmkend AAAAAAADOS}
00074         {\cf19 return} (cstr);\par
{\bkmkstart AAAAAAADOT}{\bkmkend AAAAAAADOT}
00075     \}\par
{\bkmkstart AAAAAAADOU}{\bkmkend AAAAAAADOU}
00076     {\cf18 bool} makeBoolean({\cf17 const} {\cf18 char}* value) \{\par
{\bkmkstart AAAAAAADOV}{\bkmkend AAAAAAADOV}
00077         {\cf18 string} str(strUpper(value));\par
{\bkmkstart AAAAAAADOW}{\bkmkend AAAAAAADOW}
00078         {\cf19 if} (str.compare({\cf22 "0"}) == 0)     {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADOX}{\bkmkend AAAAAAADOX}
00079         {\cf19 if} (str.compare({\cf22 "FALSE"}) == 0) {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADOY}{\bkmkend AAAAAAADOY}
00080         {\cf19 if} (str.compare({\cf22 "NO"}) == 0)    {\cf19 return} {\cf17 false};\par
{\bkmkstart AAAAAAADOZ}{\bkmkend AAAAAAADOZ}
00081         {\cf19 return} {\cf17 true};\par
{\bkmkstart AAAAAAADPA}{\bkmkend AAAAAAADPA}
00082     \}\par
{\bkmkstart AAAAAAADPB}{\bkmkend AAAAAAADPB}
00083     {\cf18 bool} makeBoolean({\cf18 string} value) \{ \par
{\bkmkstart AAAAAAADPC}{\bkmkend AAAAAAADPC}
00084         {\cf19 return} makeBoolean(value.c_str());\par
{\bkmkstart AAAAAAADPD}{\bkmkend AAAAAAADPD}
00085     \}\par
{\bkmkstart AAAAAAADPE}{\bkmkend AAAAAAADPE}
00086     {\cf18 char}* makeUpper({\cf17 const} {\cf18 char}* str) \{\par
{\bkmkstart AAAAAAADPF}{\bkmkend AAAAAAADPF}
00087         \par
{\bkmkstart AAAAAAADPG}{\bkmkend AAAAAAADPG}
00088         {\cf18 size_t} i;\par
{\bkmkstart AAAAAAADPH}{\bkmkend AAAAAAADPH}
00089         {\cf19 for} (i = 0; i < strlen(str); i++) _upper[i] = toupper(str[i]);\par
{\bkmkstart AAAAAAADPI}{\bkmkend AAAAAAADPI}
00090         _upper[i] = 0x0;\par
{\bkmkstart AAAAAAADPJ}{\bkmkend AAAAAAADPJ}
00091         {\cf19 return} _upper;\par
{\bkmkstart AAAAAAADPK}{\bkmkend AAAAAAADPK}
00092     \}\par
{\bkmkstart AAAAAAADPL}{\bkmkend AAAAAAADPL}
00093 \par
{\bkmkstart AAAAAAADPM}{\bkmkend AAAAAAADPM}
00094     vector<string> splitArgument({\cf17 const} {\cf18 char}* parm) \{\par
{\bkmkstart AAAAAAADPN}{\bkmkend AAAAAAADPN}
00095         {\cf18 char}* parse = strdup(parm);\par
{\bkmkstart AAAAAAADPO}{\bkmkend AAAAAAADPO}
00096         {\cf18 char}* next_token = NULL;\par
{\bkmkstart AAAAAAADPP}{\bkmkend AAAAAAADPP}
00097         {\cf18 char}* token = {\cf17 nullptr};\par
{\bkmkstart AAAAAAADPQ}{\bkmkend AAAAAAADPQ}
00098         {\cf18 char}* tmp = {\cf17 nullptr};;\par
{\bkmkstart AAAAAAADPR}{\bkmkend AAAAAAADPR}
00099         {\cf18 bool} quote = {\cf17 false};\par
{\bkmkstart AAAAAAADPS}{\bkmkend AAAAAAADPS}
00100         vector<char*> toks;\par
{\bkmkstart AAAAAAADPT}{\bkmkend AAAAAAADPT}
00101         vector<string> toks2;\par
{\bkmkstart AAAAAAADPU}{\bkmkend AAAAAAADPU}
00102 \par
{\bkmkstart AAAAAAADPV}{\bkmkend AAAAAAADPV}
00103         token = strtok_s(parse, {\cf22 ","}, &next_token);\par
{\bkmkstart AAAAAAADPW}{\bkmkend AAAAAAADPW}
00104         {\cf19 while} (token) \{\par
{\bkmkstart AAAAAAADPX}{\bkmkend AAAAAAADPX}
00105             toks.push_back(token);\par
{\bkmkstart AAAAAAADPY}{\bkmkend AAAAAAADPY}
00106             token = strtok_s(NULL, {\cf22 ","}, &next_token);\par
{\bkmkstart AAAAAAADPZ}{\bkmkend AAAAAAADPZ}
00107         \}\par
{\bkmkstart AAAAAAADQA}{\bkmkend AAAAAAADQA}
00108 \par
{\bkmkstart AAAAAAADQB}{\bkmkend AAAAAAADQB}
00109         {\cf19 for} ({\cf18 char}* t : toks) \{\par
{\bkmkstart AAAAAAADQC}{\bkmkend AAAAAAADQC}
00110             {\cf19 if} (t[0] == {\cf23 '"'}) \{\par
{\bkmkstart AAAAAAADQD}{\bkmkend AAAAAAADQD}
00111                 tmp = strdup(&(t[1]));\par
{\bkmkstart AAAAAAADQE}{\bkmkend AAAAAAADQE}
00112                 quote = (tmp[strlen(tmp) - 1] == {\cf23 '\\"'}) ? {\cf17 false} : {\cf17 true};\par
{\bkmkstart AAAAAAADQF}{\bkmkend AAAAAAADQF}
00113                 {\cf19 if} (tmp[strlen(tmp) - 1] == {\cf23 '\\"'}) tmp[strlen(tmp) - 1] = 0x0;\par
{\bkmkstart AAAAAAADQG}{\bkmkend AAAAAAADQG}
00114                 toks2.push_back(tmp);\par
{\bkmkstart AAAAAAADQH}{\bkmkend AAAAAAADQH}
00115             \}\par
{\bkmkstart AAAAAAADQI}{\bkmkend AAAAAAADQI}
00116             {\cf19 else} \{\par
{\bkmkstart AAAAAAADQJ}{\bkmkend AAAAAAADQJ}
00117                 {\cf19 if} (quote) \{\par
{\bkmkstart AAAAAAADQK}{\bkmkend AAAAAAADQK}
00118                     toks2[toks2.size()-1].append({\cf22 ","});\par
{\bkmkstart AAAAAAADQL}{\bkmkend AAAAAAADQL}
00119                     {\cf19 if} (t[strlen(t) - 1] == {\cf23 '"'}) \{\par
{\bkmkstart AAAAAAADQM}{\bkmkend AAAAAAADQM}
00120                         t[strlen(t) - 1] = 0x0;\par
{\bkmkstart AAAAAAADQN}{\bkmkend AAAAAAADQN}
00121                         quote = {\cf17 false};\par
{\bkmkstart AAAAAAADQO}{\bkmkend AAAAAAADQO}
00122                     \}\par
{\bkmkstart AAAAAAADQP}{\bkmkend AAAAAAADQP}
00123                     toks2[toks2.size() - 1].append(strdup(t));\par
{\bkmkstart AAAAAAADQQ}{\bkmkend AAAAAAADQQ}
00124                 \}\par
{\bkmkstart AAAAAAADQR}{\bkmkend AAAAAAADQR}
00125                 {\cf19 else} \{\par
{\bkmkstart AAAAAAADQS}{\bkmkend AAAAAAADQS}
00126                     toks2.push_back(strdup(t));\par
{\bkmkstart AAAAAAADQT}{\bkmkend AAAAAAADQT}
00127                 \}\par
{\bkmkstart AAAAAAADQU}{\bkmkend AAAAAAADQU}
00128             \}\par
{\bkmkstart AAAAAAADQV}{\bkmkend AAAAAAADQV}
00129         \}\par
{\bkmkstart AAAAAAADQW}{\bkmkend AAAAAAADQW}
00130         free(parse);\par
{\bkmkstart AAAAAAADQX}{\bkmkend AAAAAAADQX}
00131         {\cf19 if} (quote) \{\par
{\bkmkstart AAAAAAADQY}{\bkmkend AAAAAAADQY}
00132             {\cf19 throw} CmdLineException({\cf22 "Missing comma"});\par
{\bkmkstart AAAAAAADQZ}{\bkmkend AAAAAAADQZ}
00133         \}\par
{\bkmkstart AAAAAAADRA}{\bkmkend AAAAAAADRA}
00134         {\cf19 return} toks2;\par
{\bkmkstart AAAAAAADRB}{\bkmkend AAAAAAADRB}
00135     \}\par
{\bkmkstart AAAAAAADRC}{\bkmkend AAAAAAADRC}
00136     vector<string> tokenize({\cf17 const} {\cf18 char}* src, {\cf17 const} {\cf18 char}* pat) \{\par
{\bkmkstart AAAAAAADRD}{\bkmkend AAAAAAADRD}
00137         {\cf18 string} str(src);\par
{\bkmkstart AAAAAAADRE}{\bkmkend AAAAAAADRE}
00138         regex reg(pat);\par
{\bkmkstart AAAAAAADRF}{\bkmkend AAAAAAADRF}
00139 \par
{\bkmkstart AAAAAAADRG}{\bkmkend AAAAAAADRG}
00140         sregex_token_iterator iter(str.begin(), str.end(), reg, -1);\par
{\bkmkstart AAAAAAADRH}{\bkmkend AAAAAAADRH}
00141         sregex_token_iterator end;\par
{\bkmkstart AAAAAAADRI}{\bkmkend AAAAAAADRI}
00142         vector<string> vec(iter, end);\par
{\bkmkstart AAAAAAADRJ}{\bkmkend AAAAAAADRJ}
00143         {\cf19 return} vec;\par
{\bkmkstart AAAAAAADRK}{\bkmkend AAAAAAADRK}
00144     \}\par
{\bkmkstart AAAAAAADRL}{\bkmkend AAAAAAADRL}
00145     vector<int> tokenizeNumber({\cf17 const} {\cf18 char}* src, {\cf17 const} {\cf18 char}* pat) \{\par
{\bkmkstart AAAAAAADRM}{\bkmkend AAAAAAADRM}
00146         vector<int> res;\par
{\bkmkstart AAAAAAADRN}{\bkmkend AAAAAAADRN}
00147         vector<string> vec = tokenize(src, pat);\par
{\bkmkstart AAAAAAADRO}{\bkmkend AAAAAAADRO}
00148         {\cf19 for} ({\cf18 string} s : vec) res.push_back(stoi(s));\par
{\bkmkstart AAAAAAADRP}{\bkmkend AAAAAAADRP}
00149         {\cf19 return} res;\par
{\bkmkstart AAAAAAADRQ}{\bkmkend AAAAAAADRQ}
00150     \}\par
{\bkmkstart AAAAAAADRR}{\bkmkend AAAAAAADRR}
00151 \par
{\bkmkstart AAAAAAADRS}{\bkmkend AAAAAAADRS}
00152     {\cf18 char}* strUpper({\cf17 const} {\cf18 char}* str) \{\par
{\bkmkstart AAAAAAADRT}{\bkmkend AAAAAAADRT}
00153         {\cf18 char}* tmp = strdup(str);\par
{\bkmkstart AAAAAAADRU}{\bkmkend AAAAAAADRU}
00154         {\cf19 for} ({\cf18 size_t} i = 0; i < strlen(str); i++) tmp[i] = toupper(tmp[i]);\par
{\bkmkstart AAAAAAADRV}{\bkmkend AAAAAAADRV}
00155         {\cf19 return} tmp;\par
{\bkmkstart AAAAAAADRW}{\bkmkend AAAAAAADRW}
00156     \}\par
{\bkmkstart AAAAAAADRX}{\bkmkend AAAAAAADRX}
00157 \par
{\bkmkstart AAAAAAADRY}{\bkmkend AAAAAAADRY}
00158     {\cf20 // From http ://www.olivierlanglois.net/idioms_for_using_cpp_in_c_programs.html}\par
{\bkmkstart AAAAAAADRZ}{\bkmkend AAAAAAADRZ}
00159     {\cf20 // Variant #1}\par
{\bkmkstart AAAAAAADSA}{\bkmkend AAAAAAADSA}
00160     {\cf18 char}* myStrdup({\cf17 const} {\cf18 char}* s, {\cf18 int} size) \{\par
{\bkmkstart AAAAAAADSB}{\bkmkend AAAAAAADSB}
00161         ++size;\par
{\bkmkstart AAAAAAADSC}{\bkmkend AAAAAAADSC}
00162         {\cf18 char}* res = {\cf17 static_cast<}{\cf18 char}*{\cf17 >}(malloc(size));\par
{\bkmkstart AAAAAAADSD}{\bkmkend AAAAAAADSD}
00163         {\cf19 if} (!res) {\cf19 throw} runtime_error({\cf22 "No memory"});\par
{\bkmkstart AAAAAAADSE}{\bkmkend AAAAAAADSE}
00164         memcpy(res, s, size);\par
{\bkmkstart AAAAAAADSF}{\bkmkend AAAAAAADSF}
00165          {\cf19 return} res;\par
{\bkmkstart AAAAAAADSG}{\bkmkend AAAAAAADSG}
00166     \}\par
{\bkmkstart AAAAAAADSH}{\bkmkend AAAAAAADSH}
00167 \par
{\bkmkstart AAAAAAADSI}{\bkmkend AAAAAAADSI}
00168     {\cf20 // Variant #2}\par
{\bkmkstart AAAAAAADSJ}{\bkmkend AAAAAAADSJ}
00169     {\cf18 char}* myStrdup({\cf17 const} {\cf18 char}* s) \{\par
{\bkmkstart AAAAAAADSK}{\bkmkend AAAAAAADSK}
00170         {\cf19 return} myStrdup(s, ({\cf18 int}) strlen(s));\par
{\bkmkstart AAAAAAADSL}{\bkmkend AAAAAAADSL}
00171     \}\par
{\bkmkstart AAAAAAADSM}{\bkmkend AAAAAAADSM}
00172     {\cf18 void} defaultDate({\cf18 char} *aux) \{\par
{\bkmkstart AAAAAAADSN}{\bkmkend AAAAAAADSN}
00173         std::time_t t = std::time(0);\par
{\bkmkstart AAAAAAADSO}{\bkmkend AAAAAAADSO}
00174         std::tm* now = std::localtime(&t);\par
{\bkmkstart AAAAAAADSP}{\bkmkend AAAAAAADSP}
00175         time_base::dateorder d = use_facet<time_get<char>>(locale()).date_order();\par
{\bkmkstart AAAAAAADSQ}{\bkmkend AAAAAAADSQ}
00176         {\cf19 switch} (d) \{\par
{\bkmkstart AAAAAAADSR}{\bkmkend AAAAAAADSR}
00177                {\cf19 case} time_base::mdy: \par
{\bkmkstart AAAAAAADSS}{\bkmkend AAAAAAADSS}
00178                     sprintf(aux, {\cf22 "%02d/%02d/%04d"}, now->tm_mon, now->tm_mday + 1, now->tm_year + 1900);\par
{\bkmkstart AAAAAAADST}{\bkmkend AAAAAAADST}
00179                     {\cf19 break};\par
{\bkmkstart AAAAAAADSU}{\bkmkend AAAAAAADSU}
00180                {\cf19 case} time_base::ymd: \par
{\bkmkstart AAAAAAADSV}{\bkmkend AAAAAAADSV}
00181                     sprintf(aux, {\cf22 "%04d/%02d/%02d"}, now->tm_year, now->tm_mon + 1, now->tm_mday);\par
{\bkmkstart AAAAAAADSW}{\bkmkend AAAAAAADSW}
00182                     {\cf19 break};\par
{\bkmkstart AAAAAAADSX}{\bkmkend AAAAAAADSX}
00183                {\cf19 case} time_base::ydm: \par
{\bkmkstart AAAAAAADSY}{\bkmkend AAAAAAADSY}
00184                     sprintf(aux, {\cf22 "%04d/%02d/%02d"}, now->tm_year, now->tm_mday, now->tm_mon + 1);\par
{\bkmkstart AAAAAAADSZ}{\bkmkend AAAAAAADSZ}
00185                     {\cf19 break};\par
{\bkmkstart AAAAAAADTA}{\bkmkend AAAAAAADTA}
00186                {\cf19 default}:\par
{\bkmkstart AAAAAAADTB}{\bkmkend AAAAAAADTB}
00187                     sprintf(aux, {\cf22 "%02d/%02d/%04d"}, now->tm_mday, now->tm_mon + 1, now->tm_year + 1900);\par
{\bkmkstart AAAAAAADTC}{\bkmkend AAAAAAADTC}
00188         \}\par
{\bkmkstart AAAAAAADTD}{\bkmkend AAAAAAADTD}
00189     \}\par
{\bkmkstart AAAAAAADTE}{\bkmkend AAAAAAADTE}
00190 \}\par
}
}