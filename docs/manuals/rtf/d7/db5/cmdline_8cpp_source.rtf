{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cmdline.cpp\par \pard\plain 
{\tc\tcl2 \v cmdline.cpp}
{\xe \v cmdline.cpp}
{\bkmkstart AAAAAAABWQ}
{\bkmkend AAAAAAABWQ}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAABWR}{\bkmkend AAAAAAABWR}
00001 {\cf21 #include <iostream>}\par
{\bkmkstart AAAAAAABWS}{\bkmkend AAAAAAABWS}
00002 \par
{\bkmkstart AAAAAAABWT}{\bkmkend AAAAAAABWT}
00003 {\cf21 #include "cmdline.hpp"}\par
{\bkmkstart AAAAAAABWU}{\bkmkend AAAAAAABWU}
00004 {\cf21 #include "commandline.hpp"}\par
{\bkmkstart AAAAAAABWV}{\bkmkend AAAAAAABWV}
00005 {\cf21 #include "types.hpp"}\par
{\bkmkstart AAAAAAABWW}{\bkmkend AAAAAAABWW}
00006 {\cf21 #include "validations.hpp"}\par
{\bkmkstart AAAAAAABWX}{\bkmkend AAAAAAABWX}
00007 {\cf21 #include "tools.hpp"}\par
{\bkmkstart AAAAAAABWY}{\bkmkend AAAAAAABWY}
00008 \par
{\bkmkstart AAAAAAABWZ}{\bkmkend AAAAAAABWZ}
00009 {\cf17 using namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 _cmdline}}}
;\par
{\bkmkstart AAAAAAABXA}{\bkmkend AAAAAAABXA}
00010 \par
{\bkmkstart AAAAAAABXB}{\bkmkend AAAAAAABXB}
00011 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAJ" }{}}{\fldrslt {\cs37\ul\cf2 cmdline}}}
 \{\par
{\bkmkstart AAAAAAABXC}{\bkmkend AAAAAAABXC}
00012     CmdLine* singleton_ = {\cf17 nullptr};\par
{\bkmkstart AAAAAAABXD}{\bkmkend AAAAAAABXD}
00013     {\cf17 static} {\cf18 bool} instance = {\cf17 false};  {\cf20 // Allow constructor only in test}\par
{\bkmkstart AAAAAAABXE}{\bkmkend AAAAAAABXE}
00014     {\cf18 void} CmdLine::freeInstance() \{ singleton_ = {\cf17 nullptr}; \}\par
{\bkmkstart AAAAAAABXF}{\bkmkend AAAAAAABXF}
00015     _cmdline::CommandLine* _commandLine;\par
{\bkmkstart AAAAAAABXG}{\bkmkend AAAAAAABXG}
00016 \par
{\bkmkstart AAAAAAABXH}{\bkmkend AAAAAAABXH}
00017     CmdLine::CmdLine({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms) \{\par
{\bkmkstart AAAAAAABXI}{\bkmkend AAAAAAABXI}
00018         _commandLine = {\cf17 new} _cmdline::CommandLine(argc, argv, parms, {\cf17 false}, {\cf17 false});\par
{\bkmkstart AAAAAAABXJ}{\bkmkend AAAAAAABXJ}
00019     \}\par
{\bkmkstart AAAAAAABXK}{\bkmkend AAAAAAABXK}
00020     CmdLine::CmdLine({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms, {\cf18 bool} sensitive, {\cf18 bool} strict) \{\par
{\bkmkstart AAAAAAABXL}{\bkmkend AAAAAAABXL}
00021         _commandLine = {\cf17 new} _cmdline::CommandLine(argc, argv, parms, sensitive, strict);\par
{\bkmkstart AAAAAAABXM}{\bkmkend AAAAAAABXM}
00022     \}\par
{\bkmkstart AAAAAAABXN}{\bkmkend AAAAAAABXN}
00023     CmdLine::~CmdLine() \{\par
{\bkmkstart AAAAAAABXO}{\bkmkend AAAAAAABXO}
00024         std::cout << {\cf22 "Destruye\\n"};\par
{\bkmkstart AAAAAAABXP}{\bkmkend AAAAAAABXP}
00025     \}\par
{\bkmkstart AAAAAAABXQ}{\bkmkend AAAAAAABXQ}
00026     CmdLine* CmdLine::getInstance(Parameters parms, {\cf18 int} argc,  {\cf17 const} {\cf18 char}**  argv) \{\par
{\bkmkstart AAAAAAABXR}{\bkmkend AAAAAAABXR}
00027         cmdline::instance = {\cf17 true};\par
{\bkmkstart AAAAAAABXS}{\bkmkend AAAAAAABXS}
00028         {\cf19 if} (singleton_ == {\cf17 nullptr}) singleton_ = {\cf17 new} CmdLine(argc, argv, parms);\par
{\bkmkstart AAAAAAABXT}{\bkmkend AAAAAAABXT}
00029         {\cf19 return} singleton_;\par
{\bkmkstart AAAAAAABXU}{\bkmkend AAAAAAABXU}
00030     \}\par
{\bkmkstart AAAAAAABXV}{\bkmkend AAAAAAABXV}
00031     CmdLine* CmdLine::getInstance({\cf18 int} argc, {\cf17 const} {\cf18 char}** argv, Parameters parms) \{\par
{\bkmkstart AAAAAAABXW}{\bkmkend AAAAAAABXW}
00032         cmdline::instance = {\cf17 true};\par
{\bkmkstart AAAAAAABXX}{\bkmkend AAAAAAABXX}
00033         {\cf19 if} (singleton_ == {\cf17 nullptr}) singleton_ = {\cf17 new} CmdLine(argc, argv, parms);\par
{\bkmkstart AAAAAAABXY}{\bkmkend AAAAAAABXY}
00034         {\cf19 return} singleton_;\par
{\bkmkstart AAAAAAABXZ}{\bkmkend AAAAAAABXZ}
00035     \}\par
{\bkmkstart AAAAAAABYA}{\bkmkend AAAAAAABYA}
00036 {\cf20 //  CmdLine* CmdLine::getInstance(int argc, char** argv, Parameters parms) \{}\par
{\bkmkstart AAAAAAABYB}{\bkmkend AAAAAAABYB}
00037 {\cf20 //      return getInstance(argc, (const char**) argv, parms);}\par
{\bkmkstart AAAAAAABYC}{\bkmkend AAAAAAABYC}
00038 {\cf20 //  \}}\par
{\bkmkstart AAAAAAABYD}{\bkmkend AAAAAAABYD}
00039     CmdLine* CmdLine::getInstance({\cf18 int} argc, {\cf18 char}* argv[], Parameters parms) \{\par
{\bkmkstart AAAAAAABYE}{\bkmkend AAAAAAABYE}
00040         {\cf19 return} getInstance(argc, ({\cf17 const} {\cf18 char}**) argv, parms);\par
{\bkmkstart AAAAAAABYF}{\bkmkend AAAAAAABYF}
00041     \}\par
{\bkmkstart AAAAAAABYG}{\bkmkend AAAAAAABYG}
00042 {\cf20 //  CmdLine* CmdLine::getInstance(int argc, const char* argv[], Parameters parms) \{}\par
{\bkmkstart AAAAAAABYH}{\bkmkend AAAAAAABYH}
00043 {\cf20 //      return getInstance(argc, (const char**) argv, parms);}\par
{\bkmkstart AAAAAAABYI}{\bkmkend AAAAAAABYI}
00044 {\cf20 //  \}}\par
{\bkmkstart AAAAAAABYJ}{\bkmkend AAAAAAABYJ}
00045 \par
{\bkmkstart AAAAAAABYK}{\bkmkend AAAAAAABYK}
00046     CmdLine* CmdLine::pGetInstance({\cf18 int} argc,  {\cf17 const} {\cf18 char}**  argv, Parameters parms, {\cf18 bool} sensitive, {\cf18 bool} strict) \{\par
{\bkmkstart AAAAAAABYL}{\bkmkend AAAAAAABYL}
00047         cmdline::instance = {\cf17 true};\par
{\bkmkstart AAAAAAABYM}{\bkmkend AAAAAAABYM}
00048         {\cf19 if} (singleton_ == {\cf17 nullptr}) singleton_ = {\cf17 new} CmdLine(argc, argv, parms, sensitive, strict);\par
{\bkmkstart AAAAAAABYN}{\bkmkend AAAAAAABYN}
00049         {\cf19 return} singleton_;\par
{\bkmkstart AAAAAAABYO}{\bkmkend AAAAAAABYO}
00050     \}\par
{\bkmkstart AAAAAAABYP}{\bkmkend AAAAAAABYP}
00051 \par
{\bkmkstart AAAAAAABYQ}{\bkmkend AAAAAAABYQ}
00052     vector<const char*> CmdLine::args() \{ {\cf19 return} _commandLine->getArgs(); \}\par
{\bkmkstart AAAAAAABYR}{\bkmkend AAAAAAABYR}
00053 \par
{\bkmkstart AAAAAAABYS}{\bkmkend AAAAAAABYS}
00054     {\cf18 bool}  CmdLine::hasFlag({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->hasFlag(name); \};\par
{\bkmkstart AAAAAAABYT}{\bkmkend AAAAAAABYT}
00055     {\cf18 bool}  CmdLine::hasFlag({\cf18 string} name) \{ {\cf19 return} _commandLine->hasFlag(name.c_str()); \};\par
{\bkmkstart AAAAAAABYU}{\bkmkend AAAAAAABYU}
00056     Flags CmdLine::getDefaultFlags({\cf18 bool} all) \{ {\cf19 return} _commandLine->getDefaultFlags(all); \};\par
{\bkmkstart AAAAAAABYV}{\bkmkend AAAAAAABYV}
00057     Flags CmdLine::getCurrentFlags({\cf18 bool} all) \{ {\cf19 return} _commandLine->getCurrentFlags(all); \};\par
{\bkmkstart AAAAAAABYW}{\bkmkend AAAAAAABYW}
00058     Type            CmdLine::getType({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getType(name); \};\par
{\bkmkstart AAAAAAABYX}{\bkmkend AAAAAAABYX}
00059     {\cf18 bool}            CmdLine::hasOption({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->hasOption(name); \};\par
{\bkmkstart AAAAAAABYY}{\bkmkend AAAAAAABYY}
00060     {\cf18 bool}            CmdLine::hasOption({\cf18 string} name) \{ {\cf19 return} _commandLine->hasOption(name.c_str()); \};\par
{\bkmkstart AAAAAAABYZ}{\bkmkend AAAAAAABYZ}
00061     {\cf18 bool}            CmdLine::isOptionMultiple({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->isOptionMultiple(name); \};\par
{\bkmkstart AAAAAAABZA}{\bkmkend AAAAAAABZA}
00062     {\cf18 bool}            CmdLine::isOptionMultiple({\cf18 string} name) \{ {\cf19 return} _commandLine->isOptionMultiple(name.c_str()); \};\par
{\bkmkstart AAAAAAABZB}{\bkmkend AAAAAAABZB}
00063     {\cf17 const} {\cf18 char}* CmdLine::getOption({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getOption(name); \};\par
{\bkmkstart AAAAAAABZC}{\bkmkend AAAAAAABZC}
00064 \par
{\bkmkstart AAAAAAABZD}{\bkmkend AAAAAAABZD}
00065     vector<const char*>  CmdLine::getOptionValues({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getOptionValues(name); \};\par
{\bkmkstart AAAAAAABZE}{\bkmkend AAAAAAABZE}
00066     vector<const char*>  CmdLine::getOptionValues({\cf18 string} name) \{ {\cf19 return} getOptionValues(name.c_str()); \};\par
{\bkmkstart AAAAAAABZF}{\bkmkend AAAAAAABZF}
00067 \par
{\bkmkstart AAAAAAABZG}{\bkmkend AAAAAAABZG}
00068     {\cf18 int}         CmdLine::getOptionNumValues({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getOptionNumValues(name); \};\par
{\bkmkstart AAAAAAABZH}{\bkmkend AAAAAAABZH}
00069     {\cf18 int}         CmdLine::getOptionNumValues({\cf18 string} name) \{ {\cf19 return} getOptionNumValues(name.c_str()); \};\par
{\bkmkstart AAAAAAABZI}{\bkmkend AAAAAAABZI}
00070     unordered_map<string, string> CmdLine::getDefaultOptions() \{ {\cf19 return} _commandLine->getDefaultOptions(); \};\par
{\bkmkstart AAAAAAABZJ}{\bkmkend AAAAAAABZJ}
00071     Options     CmdLine::getCurrentOptions() \{ {\cf19 return} _commandLine->getCurrentOptions(); \};\par
{\bkmkstart AAAAAAABZK}{\bkmkend AAAAAAABZK}
00072 \par
{\bkmkstart AAAAAAABZL}{\bkmkend AAAAAAABZL}
00073     {\cf17 template} <{\cf17 typename} T> {\cf17 const} vector<T> getOptionValuesAs({\cf17 const} {\cf18 char}* name) \{\par
{\bkmkstart AAAAAAABZM}{\bkmkend AAAAAAABZM}
00074         vector<T> res;\par
{\bkmkstart AAAAAAABZN}{\bkmkend AAAAAAABZN}
00075         vector<const char*> str = _commandLine->getOptionValues(name);\par
{\bkmkstart AAAAAAABZO}{\bkmkend AAAAAAABZO}
00076         res.reserve(str.size);\par
{\bkmkstart AAAAAAABZP}{\bkmkend AAAAAAABZP}
00077         {\cf19 for} ({\cf17 const} {\cf18 char}* val : str) \{\par
{\bkmkstart AAAAAAABZQ}{\bkmkend AAAAAAABZQ}
00078             res.push_back(castValue<T>(val));\par
{\bkmkstart AAAAAAABZR}{\bkmkend AAAAAAABZR}
00079         \}\par
{\bkmkstart AAAAAAABZS}{\bkmkend AAAAAAABZS}
00080         {\cf19 return} res;\par
{\bkmkstart AAAAAAABZT}{\bkmkend AAAAAAABZT}
00081     \}\par
{\bkmkstart AAAAAAABZU}{\bkmkend AAAAAAABZU}
00082     {\cf18 bool}        CmdLine::hasDefinition({\cf17 const} {\cf18 char}* def) \{ {\cf19 return} _commandLine->hasDefinition(def); \}\par
{\bkmkstart AAAAAAABZV}{\bkmkend AAAAAAABZV}
00083     {\cf18 bool}        CmdLine::hasDefinition({\cf18 string} def) \{ {\cf19 return} hasDefinition(def.c_str()); \}\par
{\bkmkstart AAAAAAABZW}{\bkmkend AAAAAAABZW}
00084     {\cf18 bool}        CmdLine::isDefinitionMultiple({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->isDefinitionMultiple(name); \}\par
{\bkmkstart AAAAAAABZX}{\bkmkend AAAAAAABZX}
00085     {\cf18 bool}        CmdLine::isDefinitionMultiple({\cf18 string} name) \{ {\cf19 return} isDefinitionMultiple(name.c_str()); \}\par
{\bkmkstart AAAAAAABZY}{\bkmkend AAAAAAABZY}
00086     {\cf17 const} {\cf18 char}* CmdLine::getDefinition({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getDefinition(name); \}\par
{\bkmkstart AAAAAAABZZ}{\bkmkend AAAAAAABZZ}
00087     {\cf17 const} {\cf18 char}* CmdLine::getDefinition({\cf18 string} name) \{ {\cf19 return} getDefinition(name.c_str()); \}\par
{\bkmkstart AAAAAAACAA}{\bkmkend AAAAAAACAA}
00088     {\cf18 int}         CmdLine::getDefinitionNumValues({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getDefinitionNumValues(name); \}\par
{\bkmkstart AAAAAAACAB}{\bkmkend AAAAAAACAB}
00089     {\cf18 int}         CmdLine::getDefinitionNumValues({\cf18 string} name) \{ {\cf19 return} getDefinitionNumValues(name.c_str()); \}\par
{\bkmkstart AAAAAAACAC}{\bkmkend AAAAAAACAC}
00090     Options     CmdLine::getDefinitions() \{ {\cf19 return} _commandLine->getDefinitions(); \}\par
{\bkmkstart AAAAAAACAD}{\bkmkend AAAAAAACAD}
00091 \par
{\bkmkstart AAAAAAACAE}{\bkmkend AAAAAAACAE}
00092 \par
{\bkmkstart AAAAAAACAF}{\bkmkend AAAAAAACAF}
00093     vector<const char*>  CmdLine::getDefinitionValues({\cf17 const} {\cf18 char}* name) \{ {\cf19 return} _commandLine->getDefinitionValues(name); \}\par
{\bkmkstart AAAAAAACAG}{\bkmkend AAAAAAACAG}
00094     vector<const char*>  CmdLine::getDefinitionValues({\cf18 string} name) \{ {\cf19 return} getDefinitionValues(name.c_str()); \}\par
{\bkmkstart AAAAAAACAH}{\bkmkend AAAAAAACAH}
00095     {\cf20 /*}\par
{\bkmkstart AAAAAAACAI}{\bkmkend AAAAAAACAI}
00096 {\cf20     template <typename T> T CmdLine::castByNative(const char* value) \{}\par
{\bkmkstart AAAAAAACAJ}{\bkmkend AAAAAAACAJ}
00097 {\cf20         if constexpr (is_same<T, const char*>::value)      return value;}\par
{\bkmkstart AAAAAAACAK}{\bkmkend AAAAAAACAK}
00098 {\cf20         if constexpr (is_same<T, char*>::value)            return (char*)value;}\par
{\bkmkstart AAAAAAACAL}{\bkmkend AAAAAAACAL}
00099 {\cf20 }\par
{\bkmkstart AAAAAAACAM}{\bkmkend AAAAAAACAM}
00100 {\cf20         if constexpr (is_same<T, TYPE_STRING>::value)       return string(value);}\par
{\bkmkstart AAAAAAACAN}{\bkmkend AAAAAAACAN}
00101 {\cf20         if constexpr (is_same<T, TYPE_NUMBER>::value)       return _cmdline::validateNumber(value);}\par
{\bkmkstart AAAAAAACAO}{\bkmkend AAAAAAACAO}
00102 {\cf20         if constexpr (is_same<T, TYPE_LONG>::value)         return _cmdline::validateNumber(value);}\par
{\bkmkstart AAAAAAACAP}{\bkmkend AAAAAAACAP}
00103 {\cf20         if constexpr (is_same<T, TYPE_INT>::value)          return _cmdline::makeInteger(value);}\par
{\bkmkstart AAAAAAACAQ}{\bkmkend AAAAAAACAQ}
00104 {\cf20         if constexpr (is_same<T, TYPE_DECIMAL>::value)      return _cmdline::validateDecimal(value);}\par
{\bkmkstart AAAAAAACAR}{\bkmkend AAAAAAACAR}
00105 {\cf20         if constexpr (is_same<T, TYPE_FLOAT>::value)        return _cmdline::makeFloat(value);}\par
{\bkmkstart AAAAAAACAS}{\bkmkend AAAAAAACAS}
00106 {\cf20         if constexpr (is_same<T, TYPE_DOUBLE>::value)       return _cmdline::validateDecimal(value);}\par
{\bkmkstart AAAAAAACAT}{\bkmkend AAAAAAACAT}
00107 {\cf20         if constexpr (is_same<T, TYPE_DATE>::value)         return _cmdline::makeTm(value);}\par
{\bkmkstart AAAAAAACAU}{\bkmkend AAAAAAACAU}
00108 {\cf20         if constexpr (is_same<T, TYPE_TIME>::value)         return _cmdline::makeTm(value);}\par
{\bkmkstart AAAAAAACAV}{\bkmkend AAAAAAACAV}
00109 {\cf20         if constexpr (is_same<T, TYPE_DATETIME>::value)     return _cmdline::makeTm(value);}\par
{\bkmkstart AAAAAAACAW}{\bkmkend AAAAAAACAW}
00110 {\cf20         if constexpr (is_same<T, TYPE_TMS>::value)          return _cmdline::validateTimestamp(value);}\par
{\bkmkstart AAAAAAACAX}{\bkmkend AAAAAAACAX}
00111 {\cf20         if constexpr (is_same<T, TYPE_LONGNUMBER>::value)   return _cmdline::validateLongNumber(value);}\par
{\bkmkstart AAAAAAACAY}{\bkmkend AAAAAAACAY}
00112 {\cf20         if constexpr (is_same<T, TYPE_LONGDECIMAL>::value)  return _cmdline::validateLongDecimal(value);}\par
{\bkmkstart AAAAAAACAZ}{\bkmkend AAAAAAACAZ}
00113 {\cf20         if constexpr (is_same<T, TYPE_DIR>::value)          return _cmdline::validateFile(value);}\par
{\bkmkstart AAAAAAACBA}{\bkmkend AAAAAAACBA}
00114 {\cf20         if constexpr (is_same<T, TYPE_FILE>::value)         return _cmdline::validateDir(value);}\par
{\bkmkstart AAAAAAACBB}{\bkmkend AAAAAAACBB}
00115 {\cf20         if constexpr (is_same<T, TYPE_BOOL>::value) \{}\par
{\bkmkstart AAAAAAACBC}{\bkmkend AAAAAAACBC}
00116 {\cf20             if (value == 0x0) return false;}\par
{\bkmkstart AAAAAAACBD}{\bkmkend AAAAAAACBD}
00117 {\cf20             return _cmdline::makeBoolean(value);}\par
{\bkmkstart AAAAAAACBE}{\bkmkend AAAAAAACBE}
00118 {\cf20         \}}\par
{\bkmkstart AAAAAAACBF}{\bkmkend AAAAAAACBF}
00119 {\cf20         throw CmdLineInvalidTypeException(typeid(T).name());}\par
{\bkmkstart AAAAAAACBG}{\bkmkend AAAAAAACBG}
00120 {\cf20     \}}\par
{\bkmkstart AAAAAAACBH}{\bkmkend AAAAAAACBH}
00121 {\cf20     */}\par
{\bkmkstart AAAAAAACBI}{\bkmkend AAAAAAACBI}
00122 \}\par
}
}