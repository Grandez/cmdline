{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest-string.h\par \pard\plain 
{\tc\tcl2 \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-string.h}
{\xe \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/internal/gtest-string.h}
{\bkmkstart AAAAAABIDQ}
{\bkmkend AAAAAABIDQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALKQ" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAABIDR}{\bkmkend AAAAAABIDR}
00001 {\cf20 // Copyright 2005, Google Inc.}\par
{\bkmkstart AAAAAABIDS}{\bkmkend AAAAAABIDS}
00002 {\cf20 // All rights reserved.}\par
{\bkmkstart AAAAAABIDT}{\bkmkend AAAAAABIDT}
00003 {\cf20 //}\par
{\bkmkstart AAAAAABIDU}{\bkmkend AAAAAABIDU}
00004 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
{\bkmkstart AAAAAABIDV}{\bkmkend AAAAAABIDV}
00005 {\cf20 // modification, are permitted provided that the following conditions are}\par
{\bkmkstart AAAAAABIDW}{\bkmkend AAAAAABIDW}
00006 {\cf20 // met:}\par
{\bkmkstart AAAAAABIDX}{\bkmkend AAAAAABIDX}
00007 {\cf20 //}\par
{\bkmkstart AAAAAABIDY}{\bkmkend AAAAAABIDY}
00008 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
{\bkmkstart AAAAAABIDZ}{\bkmkend AAAAAABIDZ}
00009 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
{\bkmkstart AAAAAABIEA}{\bkmkend AAAAAABIEA}
00010 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
{\bkmkstart AAAAAABIEB}{\bkmkend AAAAAABIEB}
00011 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
{\bkmkstart AAAAAABIEC}{\bkmkend AAAAAABIEC}
00012 {\cf20 // in the documentation and/or other materials provided with the}\par
{\bkmkstart AAAAAABIED}{\bkmkend AAAAAABIED}
00013 {\cf20 // distribution.}\par
{\bkmkstart AAAAAABIEE}{\bkmkend AAAAAABIEE}
00014 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
{\bkmkstart AAAAAABIEF}{\bkmkend AAAAAABIEF}
00015 {\cf20 // contributors may be used to endorse or promote products derived from}\par
{\bkmkstart AAAAAABIEG}{\bkmkend AAAAAABIEG}
00016 {\cf20 // this software without specific prior written permission.}\par
{\bkmkstart AAAAAABIEH}{\bkmkend AAAAAABIEH}
00017 {\cf20 //}\par
{\bkmkstart AAAAAABIEI}{\bkmkend AAAAAABIEI}
00018 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
{\bkmkstart AAAAAABIEJ}{\bkmkend AAAAAABIEJ}
00019 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAABIEK}{\bkmkend AAAAAABIEK}
00020 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
{\bkmkstart AAAAAABIEL}{\bkmkend AAAAAABIEL}
00021 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
{\bkmkstart AAAAAABIEM}{\bkmkend AAAAAABIEM}
00022 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
{\bkmkstart AAAAAABIEN}{\bkmkend AAAAAABIEN}
00023 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAABIEO}{\bkmkend AAAAAABIEO}
00024 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
{\bkmkstart AAAAAABIEP}{\bkmkend AAAAAABIEP}
00025 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
{\bkmkstart AAAAAABIEQ}{\bkmkend AAAAAABIEQ}
00026 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
{\bkmkstart AAAAAABIER}{\bkmkend AAAAAABIER}
00027 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
{\bkmkstart AAAAAABIES}{\bkmkend AAAAAABIES}
00028 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
{\bkmkstart AAAAAABIET}{\bkmkend AAAAAABIET}
00029 {\cf20 //}\par
{\bkmkstart AAAAAABIEU}{\bkmkend AAAAAABIEU}
00030 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
{\bkmkstart AAAAAABIEV}{\bkmkend AAAAAABIEV}
00031 {\cf20 //}\par
{\bkmkstart AAAAAABIEW}{\bkmkend AAAAAABIEW}
00032 {\cf20 // This header file declares the String class and functions used internally by}\par
{\bkmkstart AAAAAABIEX}{\bkmkend AAAAAABIEX}
00033 {\cf20 // Google Test.  They are subject to change without notice. They should not used}\par
{\bkmkstart AAAAAABIEY}{\bkmkend AAAAAABIEY}
00034 {\cf20 // by code external to Google Test.}\par
{\bkmkstart AAAAAABIEZ}{\bkmkend AAAAAABIEZ}
00035 {\cf20 //}\par
{\bkmkstart AAAAAABIFA}{\bkmkend AAAAAABIFA}
00036 {\cf20 // This header file is #included by gtest-internal.h.}\par
{\bkmkstart AAAAAABIFB}{\bkmkend AAAAAABIFB}
00037 {\cf20 // It should not be #included by other files.}\par
{\bkmkstart AAAAAABIFC}{\bkmkend AAAAAABIFC}
00038 \par
{\bkmkstart AAAAAABIFD}{\bkmkend AAAAAABIFD}
00039 {\cf20 // GOOGLETEST_CM0001 DO NOT DELETE}\par
{\bkmkstart AAAAAABIFE}{\bkmkend AAAAAABIFE}
00040 \par
{\bkmkstart AAAAAABIFF}{\bkmkend AAAAAABIFF}
00041 {\cf21 #ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
{\bkmkstart AAAAAABIFG}{\bkmkend AAAAAABIFG}
00042 {\cf21 #define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
{\bkmkstart AAAAAABIFH}{\bkmkend AAAAAABIFH}
00043 \par
{\bkmkstart AAAAAABIFI}{\bkmkend AAAAAABIFI}
00044 {\cf21 #ifdef __BORLANDC__}\par
{\bkmkstart AAAAAABIFJ}{\bkmkend AAAAAABIFJ}
00045 {\cf20 // string.h is not guaranteed to provide strcpy on C++ Builder.}\par
{\bkmkstart AAAAAABIFK}{\bkmkend AAAAAABIFK}
00046 {\cf21 # include <mem.h>}\par
{\bkmkstart AAAAAABIFL}{\bkmkend AAAAAABIFL}
00047 {\cf21 #endif}\par
{\bkmkstart AAAAAABIFM}{\bkmkend AAAAAABIFM}
00048 \par
{\bkmkstart AAAAAABIFN}{\bkmkend AAAAAABIFN}
00049 {\cf21 #include <string.h>}\par
{\bkmkstart AAAAAABIFO}{\bkmkend AAAAAABIFO}
00050 {\cf21 #include <string>}\par
{\bkmkstart AAAAAABIFP}{\bkmkend AAAAAABIFP}
00051 \par
{\bkmkstart AAAAAABIFQ}{\bkmkend AAAAAABIFQ}
00052 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGNN" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-port.h}}}
"}\par
{\bkmkstart AAAAAABIFR}{\bkmkend AAAAAABIFR}
00053 \par
{\bkmkstart AAAAAABIFS}{\bkmkend AAAAAABIFS}
00054 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZQ" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
 \{\par
{\bkmkstart AAAAAABIFT}{\bkmkend AAAAAABIFT}
00055 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAABIFU}{\bkmkend AAAAAABIFU}
00056 \par
{\bkmkstart AAAAAABIFV}{\bkmkend AAAAAABIFV}
00057 {\cf20 // String - an abstract class holding static string utilities.}\par
{\bkmkstart AAAAAABIFW}{\bkmkend AAAAAABIFW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIFX" }{}}{\fldrslt {\cs37\ul\cf2 00058}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIFX" }{}}{\fldrslt {\cs37\ul\cf2 String}}}
 \{\par
{\bkmkstart AAAAAABIFY}{\bkmkend AAAAAABIFY}
00059  {\cf17 public}:\par
{\bkmkstart AAAAAABIFZ}{\bkmkend AAAAAABIFZ}
00060   {\cf20 // Static utility methods}\par
{\bkmkstart AAAAAABIGA}{\bkmkend AAAAAABIGA}
00061 \par
{\bkmkstart AAAAAABIGB}{\bkmkend AAAAAABIGB}
00062   {\cf20 // Clones a 0-terminated C string, allocating memory using new.  The}\par
{\bkmkstart AAAAAABIGC}{\bkmkend AAAAAABIGC}
00063   {\cf20 // caller is responsible for deleting the return value using}\par
{\bkmkstart AAAAAABIGD}{\bkmkend AAAAAABIGD}
00064   {\cf20 // delete[].  Returns the cloned string, or NULL if the input is}\par
{\bkmkstart AAAAAABIGE}{\bkmkend AAAAAABIGE}
00065   {\cf20 // NULL.}\par
{\bkmkstart AAAAAABIGF}{\bkmkend AAAAAABIGF}
00066   {\cf20 //}\par
{\bkmkstart AAAAAABIGG}{\bkmkend AAAAAABIGG}
00067   {\cf20 // This is different from strdup() in string.h, which allocates}\par
{\bkmkstart AAAAAABIGH}{\bkmkend AAAAAABIGH}
00068   {\cf20 // memory using malloc().}\par
{\bkmkstart AAAAAABIGI}{\bkmkend AAAAAABIGI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIGJ" }{}}{\fldrslt {\cs37\ul\cf2 00069}}}
   {\cf17 static} {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIGJ" }{}}{\fldrslt {\cs37\ul\cf2 CloneCString}}}
({\cf17 const} {\cf18 char}* c_str);\par
{\bkmkstart AAAAAABIGK}{\bkmkend AAAAAABIGK}
00070 \par
{\bkmkstart AAAAAABIGL}{\bkmkend AAAAAABIGL}
00071 {\cf21 #if GTEST_OS_WINDOWS_MOBILE}\par
{\bkmkstart AAAAAABIGM}{\bkmkend AAAAAABIGM}
00072   {\cf20 // Windows CE does not have the 'ANSI' versions of Win32 APIs. To be}\par
{\bkmkstart AAAAAABIGN}{\bkmkend AAAAAABIGN}
00073   {\cf20 // able to pass strings to Win32 APIs on CE we need to convert them}\par
{\bkmkstart AAAAAABIGO}{\bkmkend AAAAAABIGO}
00074   {\cf20 // to 'Unicode', UTF-16.}\par
{\bkmkstart AAAAAABIGP}{\bkmkend AAAAAABIGP}
00075 \par
{\bkmkstart AAAAAABIGQ}{\bkmkend AAAAAABIGQ}
00076   {\cf20 // Creates a UTF-16 wide string from the given ANSI string, allocating}\par
{\bkmkstart AAAAAABIGR}{\bkmkend AAAAAABIGR}
00077   {\cf20 // memory using new. The caller is responsible for deleting the return}\par
{\bkmkstart AAAAAABIGS}{\bkmkend AAAAAABIGS}
00078   {\cf20 // value using delete[]. Returns the wide string, or NULL if the}\par
{\bkmkstart AAAAAABIGT}{\bkmkend AAAAAABIGT}
00079   {\cf20 // input is NULL.}\par
{\bkmkstart AAAAAABIGU}{\bkmkend AAAAAABIGU}
00080   {\cf20 //}\par
{\bkmkstart AAAAAABIGV}{\bkmkend AAAAAABIGV}
00081   {\cf20 // The wide string is created using the ANSI codepage (CP_ACP) to}\par
{\bkmkstart AAAAAABIGW}{\bkmkend AAAAAABIGW}
00082   {\cf20 // match the behaviour of the ANSI versions of Win32 calls and the}\par
{\bkmkstart AAAAAABIGX}{\bkmkend AAAAAABIGX}
00083   {\cf20 // C runtime.}\par
{\bkmkstart AAAAAABIGY}{\bkmkend AAAAAABIGY}
00084   {\cf17 static} LPCWSTR AnsiToUtf16({\cf17 const} {\cf18 char}* c_str);\par
{\bkmkstart AAAAAABIGZ}{\bkmkend AAAAAABIGZ}
00085 \par
{\bkmkstart AAAAAABIHA}{\bkmkend AAAAAABIHA}
00086   {\cf20 // Creates an ANSI string from the given wide string, allocating}\par
{\bkmkstart AAAAAABIHB}{\bkmkend AAAAAABIHB}
00087   {\cf20 // memory using new. The caller is responsible for deleting the return}\par
{\bkmkstart AAAAAABIHC}{\bkmkend AAAAAABIHC}
00088   {\cf20 // value using delete[]. Returns the ANSI string, or NULL if the}\par
{\bkmkstart AAAAAABIHD}{\bkmkend AAAAAABIHD}
00089   {\cf20 // input is NULL.}\par
{\bkmkstart AAAAAABIHE}{\bkmkend AAAAAABIHE}
00090   {\cf20 //}\par
{\bkmkstart AAAAAABIHF}{\bkmkend AAAAAABIHF}
00091   {\cf20 // The returned string is created using the ANSI codepage (CP_ACP) to}\par
{\bkmkstart AAAAAABIHG}{\bkmkend AAAAAABIHG}
00092   {\cf20 // match the behaviour of the ANSI versions of Win32 calls and the}\par
{\bkmkstart AAAAAABIHH}{\bkmkend AAAAAABIHH}
00093   {\cf20 // C runtime.}\par
{\bkmkstart AAAAAABIHI}{\bkmkend AAAAAABIHI}
00094   {\cf17 static} {\cf17 const} {\cf18 char}* Utf16ToAnsi(LPCWSTR utf16_str);\par
{\bkmkstart AAAAAABIHJ}{\bkmkend AAAAAABIHJ}
00095 {\cf21 #endif}\par
{\bkmkstart AAAAAABIHK}{\bkmkend AAAAAABIHK}
00096 \par
{\bkmkstart AAAAAABIHL}{\bkmkend AAAAAABIHL}
00097   {\cf20 // Compares two C strings.  Returns true iff they have the same content.}\par
{\bkmkstart AAAAAABIHM}{\bkmkend AAAAAABIHM}
00098   {\cf20 //}\par
{\bkmkstart AAAAAABIHN}{\bkmkend AAAAAABIHN}
00099   {\cf20 // Unlike strcmp(), this function can handle NULL argument(s).  A}\par
{\bkmkstart AAAAAABIHO}{\bkmkend AAAAAABIHO}
00100   {\cf20 // NULL C string is considered different to any non-NULL C string,}\par
{\bkmkstart AAAAAABIHP}{\bkmkend AAAAAABIHP}
00101   {\cf20 // including the empty string.}\par
{\bkmkstart AAAAAABIHQ}{\bkmkend AAAAAABIHQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIHR" }{}}{\fldrslt {\cs37\ul\cf2 00102}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIHR" }{}}{\fldrslt {\cs37\ul\cf2 CStringEquals}}}
({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs);\par
{\bkmkstart AAAAAABIHS}{\bkmkend AAAAAABIHS}
00103 \par
{\bkmkstart AAAAAABIHT}{\bkmkend AAAAAABIHT}
00104   {\cf20 // Converts a wide C string to a String using the UTF-8 encoding.}\par
{\bkmkstart AAAAAABIHU}{\bkmkend AAAAAABIHU}
00105   {\cf20 // NULL will be converted to "(null)".  If an error occurred during}\par
{\bkmkstart AAAAAABIHV}{\bkmkend AAAAAABIHV}
00106   {\cf20 // the conversion, "(failed to convert from wide string)" is}\par
{\bkmkstart AAAAAABIHW}{\bkmkend AAAAAABIHW}
00107   {\cf20 // returned.}\par
{\bkmkstart AAAAAABIHX}{\bkmkend AAAAAABIHX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIHY" }{}}{\fldrslt {\cs37\ul\cf2 00108}}}
   {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIHY" }{}}{\fldrslt {\cs37\ul\cf2 ShowWideCString}}}
({\cf17 const} {\cf18 wchar_t}* wide_c_str);\par
{\bkmkstart AAAAAABIHZ}{\bkmkend AAAAAABIHZ}
00109 \par
{\bkmkstart AAAAAABIIA}{\bkmkend AAAAAABIIA}
00110   {\cf20 // Compares two wide C strings.  Returns true iff they have the same}\par
{\bkmkstart AAAAAABIIB}{\bkmkend AAAAAABIIB}
00111   {\cf20 // content.}\par
{\bkmkstart AAAAAABIIC}{\bkmkend AAAAAABIIC}
00112   {\cf20 //}\par
{\bkmkstart AAAAAABIID}{\bkmkend AAAAAABIID}
00113   {\cf20 // Unlike wcscmp(), this function can handle NULL argument(s).  A}\par
{\bkmkstart AAAAAABIIE}{\bkmkend AAAAAABIIE}
00114   {\cf20 // NULL C string is considered different to any non-NULL C string,}\par
{\bkmkstart AAAAAABIIF}{\bkmkend AAAAAABIIF}
00115   {\cf20 // including the empty string.}\par
{\bkmkstart AAAAAABIIG}{\bkmkend AAAAAABIIG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIIH" }{}}{\fldrslt {\cs37\ul\cf2 00116}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIIH" }{}}{\fldrslt {\cs37\ul\cf2 WideCStringEquals}}}
({\cf17 const} {\cf18 wchar_t}* lhs, {\cf17 const} {\cf18 wchar_t}* rhs);\par
{\bkmkstart AAAAAABIII}{\bkmkend AAAAAABIII}
00117 \par
{\bkmkstart AAAAAABIIJ}{\bkmkend AAAAAABIIJ}
00118   {\cf20 // Compares two C strings, ignoring case.  Returns true iff they}\par
{\bkmkstart AAAAAABIIK}{\bkmkend AAAAAABIIK}
00119   {\cf20 // have the same content.}\par
{\bkmkstart AAAAAABIIL}{\bkmkend AAAAAABIIL}
00120   {\cf20 //}\par
{\bkmkstart AAAAAABIIM}{\bkmkend AAAAAABIIM}
00121   {\cf20 // Unlike strcasecmp(), this function can handle NULL argument(s).}\par
{\bkmkstart AAAAAABIIN}{\bkmkend AAAAAABIIN}
00122   {\cf20 // A NULL C string is considered different to any non-NULL C string,}\par
{\bkmkstart AAAAAABIIO}{\bkmkend AAAAAABIIO}
00123   {\cf20 // including the empty string.}\par
{\bkmkstart AAAAAABIIP}{\bkmkend AAAAAABIIP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIIQ" }{}}{\fldrslt {\cs37\ul\cf2 00124}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIIQ" }{}}{\fldrslt {\cs37\ul\cf2 CaseInsensitiveCStringEquals}}}
({\cf17 const} {\cf18 char}* lhs,\par
{\bkmkstart AAAAAABIIR}{\bkmkend AAAAAABIIR}
00125                                            {\cf17 const} {\cf18 char}* rhs);\par
{\bkmkstart AAAAAABIIS}{\bkmkend AAAAAABIIS}
00126 \par
{\bkmkstart AAAAAABIIT}{\bkmkend AAAAAABIIT}
00127   {\cf20 // Compares two wide C strings, ignoring case.  Returns true iff they}\par
{\bkmkstart AAAAAABIIU}{\bkmkend AAAAAABIIU}
00128   {\cf20 // have the same content.}\par
{\bkmkstart AAAAAABIIV}{\bkmkend AAAAAABIIV}
00129   {\cf20 //}\par
{\bkmkstart AAAAAABIIW}{\bkmkend AAAAAABIIW}
00130   {\cf20 // Unlike wcscasecmp(), this function can handle NULL argument(s).}\par
{\bkmkstart AAAAAABIIX}{\bkmkend AAAAAABIIX}
00131   {\cf20 // A NULL C string is considered different to any non-NULL wide C string,}\par
{\bkmkstart AAAAAABIIY}{\bkmkend AAAAAABIIY}
00132   {\cf20 // including the empty string.}\par
{\bkmkstart AAAAAABIIZ}{\bkmkend AAAAAABIIZ}
00133   {\cf20 // NB: The implementations on different platforms slightly differ.}\par
{\bkmkstart AAAAAABIJA}{\bkmkend AAAAAABIJA}
00134   {\cf20 // On windows, this method uses _wcsicmp which compares according to LC_CTYPE}\par
{\bkmkstart AAAAAABIJB}{\bkmkend AAAAAABIJB}
00135   {\cf20 // environment variable. On GNU platform this method uses wcscasecmp}\par
{\bkmkstart AAAAAABIJC}{\bkmkend AAAAAABIJC}
00136   {\cf20 // which compares according to LC_CTYPE category of the current locale.}\par
{\bkmkstart AAAAAABIJD}{\bkmkend AAAAAABIJD}
00137   {\cf20 // On MacOS X, it uses towlower, which also uses LC_CTYPE category of the}\par
{\bkmkstart AAAAAABIJE}{\bkmkend AAAAAABIJE}
00138   {\cf20 // current locale.}\par
{\bkmkstart AAAAAABIJF}{\bkmkend AAAAAABIJF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJG" }{}}{\fldrslt {\cs37\ul\cf2 00139}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJG" }{}}{\fldrslt {\cs37\ul\cf2 CaseInsensitiveWideCStringEquals}}}
({\cf17 const} {\cf18 wchar_t}* lhs,\par
{\bkmkstart AAAAAABIJH}{\bkmkend AAAAAABIJH}
00140                                                {\cf17 const} {\cf18 wchar_t}* rhs);\par
{\bkmkstart AAAAAABIJI}{\bkmkend AAAAAABIJI}
00141 \par
{\bkmkstart AAAAAABIJJ}{\bkmkend AAAAAABIJJ}
00142   {\cf20 // Returns true iff the given string ends with the given suffix, ignoring}\par
{\bkmkstart AAAAAABIJK}{\bkmkend AAAAAABIJK}
00143   {\cf20 // case. Any string is considered to end with an empty suffix.}\par
{\bkmkstart AAAAAABIJL}{\bkmkend AAAAAABIJL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJM" }{}}{\fldrslt {\cs37\ul\cf2 00144}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJM" }{}}{\fldrslt {\cs37\ul\cf2 EndsWithCaseInsensitive}}}
(\par
{\bkmkstart AAAAAABIJN}{\bkmkend AAAAAABIJN}
00145       {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& str, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& suffix);\par
{\bkmkstart AAAAAABIJO}{\bkmkend AAAAAABIJO}
00146 \par
{\bkmkstart AAAAAABIJP}{\bkmkend AAAAAABIJP}
00147   {\cf20 // Formats an int value as "%02d".}\par
{\bkmkstart AAAAAABIJQ}{\bkmkend AAAAAABIJQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJR" }{}}{\fldrslt {\cs37\ul\cf2 00148}}}
   {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJR" }{}}{\fldrslt {\cs37\ul\cf2 FormatIntWidth2}}}
({\cf18 int} value);  {\cf20 // "%02d" for width == 2}\par
{\bkmkstart AAAAAABIJS}{\bkmkend AAAAAABIJS}
00149 \par
{\bkmkstart AAAAAABIJT}{\bkmkend AAAAAABIJT}
00150   {\cf20 // Formats an int value as "%X".}\par
{\bkmkstart AAAAAABIJU}{\bkmkend AAAAAABIJU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJV" }{}}{\fldrslt {\cs37\ul\cf2 00151}}}
   {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJV" }{}}{\fldrslt {\cs37\ul\cf2 FormatHexInt}}}
({\cf18 int} value);\par
{\bkmkstart AAAAAABIJW}{\bkmkend AAAAAABIJW}
00152 \par
{\bkmkstart AAAAAABIJX}{\bkmkend AAAAAABIJX}
00153   {\cf20 // Formats a byte as "%02X".}\par
{\bkmkstart AAAAAABIJY}{\bkmkend AAAAAABIJY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJZ" }{}}{\fldrslt {\cs37\ul\cf2 00154}}}
   {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIJZ" }{}}{\fldrslt {\cs37\ul\cf2 FormatByte}}}
({\cf18 unsigned} {\cf18 char} value);\par
{\bkmkstart AAAAAABIKA}{\bkmkend AAAAAABIKA}
00155 \par
{\bkmkstart AAAAAABIKB}{\bkmkend AAAAAABIKB}
00156  {\cf17 private}:\par
{\bkmkstart AAAAAABIKC}{\bkmkend AAAAAABIKC}
00157   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAABIFX" }{}}{\fldrslt {\cs37\ul\cf2 String}}}
();  {\cf20 // Not meant to be instantiated.}\par
{\bkmkstart AAAAAABIKD}{\bkmkend AAAAAABIKD}
00158 \};  {\cf20 // class String}\par
{\bkmkstart AAAAAABIKE}{\bkmkend AAAAAABIKE}
00159 \par
{\bkmkstart AAAAAABIKF}{\bkmkend AAAAAABIKF}
00160 {\cf20 // Gets the content of the stringstream's buffer as an std::string.  Each '\\0'}\par
{\bkmkstart AAAAAABIKG}{\bkmkend AAAAAABIKG}
00161 {\cf20 // character in the buffer is replaced with "\\\\0".}\par
{\bkmkstart AAAAAABIKH}{\bkmkend AAAAAABIKH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOXU" }{}}{\fldrslt {\cs37\ul\cf2 00162}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOXU" }{}}{\fldrslt {\cs37\ul\cf2 StringStreamToString}}}
(::std::stringstream* stream);\par
{\bkmkstart AAAAAABIKI}{\bkmkend AAAAAABIKI}
00163 \par
{\bkmkstart AAAAAABIKJ}{\bkmkend AAAAAABIKJ}
00164 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAABIKK}{\bkmkend AAAAAABIKK}
00165 \}  {\cf20 // namespace testing}\par
{\bkmkstart AAAAAABIKL}{\bkmkend AAAAAABIKL}
00166 \par
{\bkmkstart AAAAAABIKM}{\bkmkend AAAAAABIKM}
00167 {\cf21 #endif  }{\cf20 // GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_}\par
}
}