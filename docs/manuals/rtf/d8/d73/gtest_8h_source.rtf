{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest.h\par \pard\plain 
{\tc\tcl2 \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/gtest.h}
{\xe \v packages/Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.4/build/native/include/gtest/gtest.h}
{\bkmkstart AAAAAAAMCE}
{\bkmkend AAAAAAAMCE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALBJ" }{}}{\fldrslt {\cs37\ul\cf2 Go to the documentation of this file.}}}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid {\bkmkstart AAAAAAAMCF}{\bkmkend AAAAAAAMCF}
00001 {\cf20 // Copyright 2005, Google Inc.}\par
{\bkmkstart AAAAAAAMCG}{\bkmkend AAAAAAAMCG}
00002 {\cf20 // All rights reserved.}\par
{\bkmkstart AAAAAAAMCH}{\bkmkend AAAAAAAMCH}
00003 {\cf20 //}\par
{\bkmkstart AAAAAAAMCI}{\bkmkend AAAAAAAMCI}
00004 {\cf20 // Redistribution and use in source and binary forms, with or without}\par
{\bkmkstart AAAAAAAMCJ}{\bkmkend AAAAAAAMCJ}
00005 {\cf20 // modification, are permitted provided that the following conditions are}\par
{\bkmkstart AAAAAAAMCK}{\bkmkend AAAAAAAMCK}
00006 {\cf20 // met:}\par
{\bkmkstart AAAAAAAMCL}{\bkmkend AAAAAAAMCL}
00007 {\cf20 //}\par
{\bkmkstart AAAAAAAMCM}{\bkmkend AAAAAAAMCM}
00008 {\cf20 //     * Redistributions of source code must retain the above copyright}\par
{\bkmkstart AAAAAAAMCN}{\bkmkend AAAAAAAMCN}
00009 {\cf20 // notice, this list of conditions and the following disclaimer.}\par
{\bkmkstart AAAAAAAMCO}{\bkmkend AAAAAAAMCO}
00010 {\cf20 //     * Redistributions in binary form must reproduce the above}\par
{\bkmkstart AAAAAAAMCP}{\bkmkend AAAAAAAMCP}
00011 {\cf20 // copyright notice, this list of conditions and the following disclaimer}\par
{\bkmkstart AAAAAAAMCQ}{\bkmkend AAAAAAAMCQ}
00012 {\cf20 // in the documentation and/or other materials provided with the}\par
{\bkmkstart AAAAAAAMCR}{\bkmkend AAAAAAAMCR}
00013 {\cf20 // distribution.}\par
{\bkmkstart AAAAAAAMCS}{\bkmkend AAAAAAAMCS}
00014 {\cf20 //     * Neither the name of Google Inc. nor the names of its}\par
{\bkmkstart AAAAAAAMCT}{\bkmkend AAAAAAAMCT}
00015 {\cf20 // contributors may be used to endorse or promote products derived from}\par
{\bkmkstart AAAAAAAMCU}{\bkmkend AAAAAAAMCU}
00016 {\cf20 // this software without specific prior written permission.}\par
{\bkmkstart AAAAAAAMCV}{\bkmkend AAAAAAAMCV}
00017 {\cf20 //}\par
{\bkmkstart AAAAAAAMCW}{\bkmkend AAAAAAAMCW}
00018 {\cf20 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS}\par
{\bkmkstart AAAAAAAMCX}{\bkmkend AAAAAAAMCX}
00019 {\cf20 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAMCY}{\bkmkend AAAAAAAMCY}
00020 {\cf20 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR}\par
{\bkmkstart AAAAAAAMCZ}{\bkmkend AAAAAAAMCZ}
00021 {\cf20 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT}\par
{\bkmkstart AAAAAAAMDA}{\bkmkend AAAAAAAMDA}
00022 {\cf20 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,}\par
{\bkmkstart AAAAAAAMDB}{\bkmkend AAAAAAAMDB}
00023 {\cf20 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT}\par
{\bkmkstart AAAAAAAMDC}{\bkmkend AAAAAAAMDC}
00024 {\cf20 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,}\par
{\bkmkstart AAAAAAAMDD}{\bkmkend AAAAAAAMDD}
00025 {\cf20 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY}\par
{\bkmkstart AAAAAAAMDE}{\bkmkend AAAAAAAMDE}
00026 {\cf20 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT}\par
{\bkmkstart AAAAAAAMDF}{\bkmkend AAAAAAAMDF}
00027 {\cf20 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE}\par
{\bkmkstart AAAAAAAMDG}{\bkmkend AAAAAAAMDG}
00028 {\cf20 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.}\par
{\bkmkstart AAAAAAAMDH}{\bkmkend AAAAAAAMDH}
00029 \par
{\bkmkstart AAAAAAAMDI}{\bkmkend AAAAAAAMDI}
00030 {\cf20 //}\par
{\bkmkstart AAAAAAAMDJ}{\bkmkend AAAAAAAMDJ}
00031 {\cf20 // The Google C++ Testing and Mocking Framework (Google Test)}\par
{\bkmkstart AAAAAAAMDK}{\bkmkend AAAAAAAMDK}
00032 {\cf20 //}\par
{\bkmkstart AAAAAAAMDL}{\bkmkend AAAAAAAMDL}
00033 {\cf20 // This header file defines the public API for Google Test.  It should be}\par
{\bkmkstart AAAAAAAMDM}{\bkmkend AAAAAAAMDM}
00034 {\cf20 // included by any test program that uses Google Test.}\par
{\bkmkstart AAAAAAAMDN}{\bkmkend AAAAAAAMDN}
00035 {\cf20 //}\par
{\bkmkstart AAAAAAAMDO}{\bkmkend AAAAAAAMDO}
00036 {\cf20 // IMPORTANT NOTE: Due to limitation of the C++ language, we have to}\par
{\bkmkstart AAAAAAAMDP}{\bkmkend AAAAAAAMDP}
00037 {\cf20 // leave some internal implementation details in this header file.}\par
{\bkmkstart AAAAAAAMDQ}{\bkmkend AAAAAAAMDQ}
00038 {\cf20 // They are clearly marked by comments like this:}\par
{\bkmkstart AAAAAAAMDR}{\bkmkend AAAAAAAMDR}
00039 {\cf20 //}\par
{\bkmkstart AAAAAAAMDS}{\bkmkend AAAAAAAMDS}
00040 {\cf20 //   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAMDT}{\bkmkend AAAAAAAMDT}
00041 {\cf20 //}\par
{\bkmkstart AAAAAAAMDU}{\bkmkend AAAAAAAMDU}
00042 {\cf20 // Such code is NOT meant to be used by a user directly, and is subject}\par
{\bkmkstart AAAAAAAMDV}{\bkmkend AAAAAAAMDV}
00043 {\cf20 // to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user}\par
{\bkmkstart AAAAAAAMDW}{\bkmkend AAAAAAAMDW}
00044 {\cf20 // program!}\par
{\bkmkstart AAAAAAAMDX}{\bkmkend AAAAAAAMDX}
00045 {\cf20 //}\par
{\bkmkstart AAAAAAAMDY}{\bkmkend AAAAAAAMDY}
00046 {\cf20 // Acknowledgment: Google Test borrowed the idea of automatic test}\par
{\bkmkstart AAAAAAAMDZ}{\bkmkend AAAAAAAMDZ}
00047 {\cf20 // registration from Barthelemy Dagenais' (barthelemy@prologique.com)}\par
{\bkmkstart AAAAAAAMEA}{\bkmkend AAAAAAAMEA}
00048 {\cf20 // easyUnit framework.}\par
{\bkmkstart AAAAAAAMEB}{\bkmkend AAAAAAAMEB}
00049 \par
{\bkmkstart AAAAAAAMEC}{\bkmkend AAAAAAAMEC}
00050 {\cf20 // GOOGLETEST_CM0001 DO NOT DELETE}\par
{\bkmkstart AAAAAAAMED}{\bkmkend AAAAAAAMED}
00051 \par
{\bkmkstart AAAAAAAMEE}{\bkmkend AAAAAAAMEE}
00052 {\cf21 #ifndef GTEST_INCLUDE_GTEST_GTEST_H_}\par
{\bkmkstart AAAAAAAMEF}{\bkmkend AAAAAAAMEF}
00053 {\cf21 #define GTEST_INCLUDE_GTEST_GTEST_H_}\par
{\bkmkstart AAAAAAAMEG}{\bkmkend AAAAAAAMEG}
00054 \par
{\bkmkstart AAAAAAAMEH}{\bkmkend AAAAAAAMEH}
00055 {\cf21 #include <limits>}\par
{\bkmkstart AAAAAAAMEI}{\bkmkend AAAAAAAMEI}
00056 {\cf21 #include <ostream>}\par
{\bkmkstart AAAAAAAMEJ}{\bkmkend AAAAAAAMEJ}
00057 {\cf21 #include <vector>}\par
{\bkmkstart AAAAAAAMEK}{\bkmkend AAAAAAAMEK}
00058 \par
{\bkmkstart AAAAAAAMEL}{\bkmkend AAAAAAAMEL}
00059 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHDS" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-internal.h}}}
"}\par
{\bkmkstart AAAAAAAMEM}{\bkmkend AAAAAAAMEM}
00060 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALKQ" }{}}{\fldrslt {\cs37\ul\cf2 gtest/internal/gtest-string.h}}}
"}\par
{\bkmkstart AAAAAAAMEN}{\bkmkend AAAAAAAMEN}
00061 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFXX" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-death-test.h}}}
"}\par
{\bkmkstart AAAAAAAMEO}{\bkmkend AAAAAAAMEO}
00062 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGLM" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-message.h}}}
"}\par
{\bkmkstart AAAAAAAMEP}{\bkmkend AAAAAAAMEP}
00063 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGWD" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-param-test.h}}}
"}\par
{\bkmkstart AAAAAAAMEQ}{\bkmkend AAAAAAAMEQ}
00064 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJDY" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-printers.h}}}
"}\par
{\bkmkstart AAAAAAAMER}{\bkmkend AAAAAAAMER}
00065 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMES" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest_prod.h}}}
"}\par
{\bkmkstart AAAAAAAMET}{\bkmkend AAAAAAAMET}
00066 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALJD" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-test-part.h}}}
"}\par
{\bkmkstart AAAAAAAMEU}{\bkmkend AAAAAAAMEU}
00067 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALQI" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest-typed-test.h}}}
"}\par
{\bkmkstart AAAAAAAMEV}{\bkmkend AAAAAAAMEV}
00068 \par
{\bkmkstart AAAAAAAMEW}{\bkmkend AAAAAAAMEW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMEX" }{}}{\fldrslt {\cs37\ul\cf2 00069}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMEX" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_PUSH_}}}
(4251 \\\par
{\bkmkstart AAAAAAAMEY}{\bkmkend AAAAAAAMEY}
00070 {\cf20 /* class A needs to have dll-interface to be used by clients of class B */})\par
{\bkmkstart AAAAAAAMEZ}{\bkmkend AAAAAAAMEZ}
00071 \par
{\bkmkstart AAAAAAAMFA}{\bkmkend AAAAAAAMFA}
00072 {\cf20 // Depending on the platform, different string classes are available.}\par
{\bkmkstart AAAAAAAMFB}{\bkmkend AAAAAAAMFB}
00073 {\cf20 // On Linux, in addition to ::std::string, Google also makes use of}\par
{\bkmkstart AAAAAAAMFC}{\bkmkend AAAAAAAMFC}
00074 {\cf20 // class ::string, which has the same interface as ::std::string, but}\par
{\bkmkstart AAAAAAAMFD}{\bkmkend AAAAAAAMFD}
00075 {\cf20 // has a different implementation.}\par
{\bkmkstart AAAAAAAMFE}{\bkmkend AAAAAAAMFE}
00076 {\cf20 //}\par
{\bkmkstart AAAAAAAMFF}{\bkmkend AAAAAAAMFF}
00077 {\cf20 // You can define GTEST_HAS_GLOBAL_STRING to 1 to indicate that}\par
{\bkmkstart AAAAAAAMFG}{\bkmkend AAAAAAAMFG}
00078 {\cf20 // ::string is available AND is a distinct type to ::std::string, or}\par
{\bkmkstart AAAAAAAMFH}{\bkmkend AAAAAAAMFH}
00079 {\cf20 // define it to 0 to indicate otherwise.}\par
{\bkmkstart AAAAAAAMFI}{\bkmkend AAAAAAAMFI}
00080 {\cf20 //}\par
{\bkmkstart AAAAAAAMFJ}{\bkmkend AAAAAAAMFJ}
00081 {\cf20 // If ::std::string and ::string are the same class on your platform}\par
{\bkmkstart AAAAAAAMFK}{\bkmkend AAAAAAAMFK}
00082 {\cf20 // due to aliasing, you should define GTEST_HAS_GLOBAL_STRING to 0.}\par
{\bkmkstart AAAAAAAMFL}{\bkmkend AAAAAAAMFL}
00083 {\cf20 //}\par
{\bkmkstart AAAAAAAMFM}{\bkmkend AAAAAAAMFM}
00084 {\cf20 // If you do not define GTEST_HAS_GLOBAL_STRING, it is defined}\par
{\bkmkstart AAAAAAAMFN}{\bkmkend AAAAAAAMFN}
00085 {\cf20 // heuristically.}\par
{\bkmkstart AAAAAAAMFO}{\bkmkend AAAAAAAMFO}
00086 \par
{\bkmkstart AAAAAAAMFP}{\bkmkend AAAAAAAMFP}
00087 namespace {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZQ" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
 \{\par
{\bkmkstart AAAAAAAMFQ}{\bkmkend AAAAAAAMFQ}
00088 \par
{\bkmkstart AAAAAAAMFR}{\bkmkend AAAAAAAMFR}
00089 {\cf20 // Silence C4100 (unreferenced formal parameter) and 4805}\par
{\bkmkstart AAAAAAAMFS}{\bkmkend AAAAAAAMFS}
00090 {\cf20 // unsafe mix of type 'const int' and type 'const bool'}\par
{\bkmkstart AAAAAAAMFT}{\bkmkend AAAAAAAMFT}
00091 {\cf21 #ifdef _MSC_VER}\par
{\bkmkstart AAAAAAAMFU}{\bkmkend AAAAAAAMFU}
00092 {\cf21 # pragma warning(push)}\par
{\bkmkstart AAAAAAAMFV}{\bkmkend AAAAAAAMFV}
00093 {\cf21 # pragma warning(disable:4805)}\par
{\bkmkstart AAAAAAAMFW}{\bkmkend AAAAAAAMFW}
00094 {\cf21 # pragma warning(disable:4100)}\par
{\bkmkstart AAAAAAAMFX}{\bkmkend AAAAAAAMFX}
00095 {\cf21 #endif}\par
{\bkmkstart AAAAAAAMFY}{\bkmkend AAAAAAAMFY}
00096 \par
{\bkmkstart AAAAAAAMFZ}{\bkmkend AAAAAAAMFZ}
00097 \par
{\bkmkstart AAAAAAAMGA}{\bkmkend AAAAAAAMGA}
00098 {\cf20 // Declares the flags.}\par
{\bkmkstart AAAAAAAMGB}{\bkmkend AAAAAAAMGB}
00099 \par
{\bkmkstart AAAAAAAMGC}{\bkmkend AAAAAAAMGC}
00100 {\cf20 // This flag temporary enables the disabled tests.}\par
{\bkmkstart AAAAAAAMGD}{\bkmkend AAAAAAAMGD}
00101 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(also_run_disabled_tests);\par
{\bkmkstart AAAAAAAMGF}{\bkmkend AAAAAAAMGF}
00102 \par
{\bkmkstart AAAAAAAMGG}{\bkmkend AAAAAAAMGG}
00103 {\cf20 // This flag brings the debugger on an assertion failure.}\par
{\bkmkstart AAAAAAAMGH}{\bkmkend AAAAAAAMGH}
00104 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(break_on_failure);\par
{\bkmkstart AAAAAAAMGI}{\bkmkend AAAAAAAMGI}
00105 \par
{\bkmkstart AAAAAAAMGJ}{\bkmkend AAAAAAAMGJ}
00106 {\cf20 // This flag controls whether Google Test catches all test-thrown exceptions}\par
{\bkmkstart AAAAAAAMGK}{\bkmkend AAAAAAAMGK}
00107 {\cf20 // and logs them as failures.}\par
{\bkmkstart AAAAAAAMGL}{\bkmkend AAAAAAAMGL}
00108 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(catch_exceptions);\par
{\bkmkstart AAAAAAAMGM}{\bkmkend AAAAAAAMGM}
00109 \par
{\bkmkstart AAAAAAAMGN}{\bkmkend AAAAAAAMGN}
00110 {\cf20 // This flag enables using colors in terminal output. Available values are}\par
{\bkmkstart AAAAAAAMGO}{\bkmkend AAAAAAAMGO}
00111 {\cf20 // "yes" to enable colors, "no" (disable colors), or "auto" (the default)}\par
{\bkmkstart AAAAAAAMGP}{\bkmkend AAAAAAAMGP}
00112 {\cf20 // to let Google Test decide.}\par
{\bkmkstart AAAAAAAMGQ}{\bkmkend AAAAAAAMGQ}
00113 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_string_}}}
(color);\par
{\bkmkstart AAAAAAAMGS}{\bkmkend AAAAAAAMGS}
00114 \par
{\bkmkstart AAAAAAAMGT}{\bkmkend AAAAAAAMGT}
00115 {\cf20 // This flag sets up the filter to select by name using a glob pattern}\par
{\bkmkstart AAAAAAAMGU}{\bkmkend AAAAAAAMGU}
00116 {\cf20 // the tests to run. If the filter is not given all tests are executed.}\par
{\bkmkstart AAAAAAAMGV}{\bkmkend AAAAAAAMGV}
00117 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_string_}}}
(filter);\par
{\bkmkstart AAAAAAAMGW}{\bkmkend AAAAAAAMGW}
00118 \par
{\bkmkstart AAAAAAAMGX}{\bkmkend AAAAAAAMGX}
00119 {\cf20 // This flag controls whether Google Test installs a signal handler that dumps}\par
{\bkmkstart AAAAAAAMGY}{\bkmkend AAAAAAAMGY}
00120 {\cf20 // debugging information when fatal signals are raised.}\par
{\bkmkstart AAAAAAAMGZ}{\bkmkend AAAAAAAMGZ}
00121 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(install_failure_signal_handler);\par
{\bkmkstart AAAAAAAMHA}{\bkmkend AAAAAAAMHA}
00122 \par
{\bkmkstart AAAAAAAMHB}{\bkmkend AAAAAAAMHB}
00123 {\cf20 // This flag causes the Google Test to list tests. None of the tests listed}\par
{\bkmkstart AAAAAAAMHC}{\bkmkend AAAAAAAMHC}
00124 {\cf20 // are actually run if the flag is provided.}\par
{\bkmkstart AAAAAAAMHD}{\bkmkend AAAAAAAMHD}
00125 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(list_tests);\par
{\bkmkstart AAAAAAAMHE}{\bkmkend AAAAAAAMHE}
00126 \par
{\bkmkstart AAAAAAAMHF}{\bkmkend AAAAAAAMHF}
00127 {\cf20 // This flag controls whether Google Test emits a detailed XML report to a file}\par
{\bkmkstart AAAAAAAMHG}{\bkmkend AAAAAAAMHG}
00128 {\cf20 // in addition to its normal textual output.}\par
{\bkmkstart AAAAAAAMHH}{\bkmkend AAAAAAAMHH}
00129 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_string_}}}
(output);\par
{\bkmkstart AAAAAAAMHI}{\bkmkend AAAAAAAMHI}
00130 \par
{\bkmkstart AAAAAAAMHJ}{\bkmkend AAAAAAAMHJ}
00131 {\cf20 // This flags control whether Google Test prints the elapsed time for each}\par
{\bkmkstart AAAAAAAMHK}{\bkmkend AAAAAAAMHK}
00132 {\cf20 // test.}\par
{\bkmkstart AAAAAAAMHL}{\bkmkend AAAAAAAMHL}
00133 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(print_time);\par
{\bkmkstart AAAAAAAMHM}{\bkmkend AAAAAAAMHM}
00134 \par
{\bkmkstart AAAAAAAMHN}{\bkmkend AAAAAAAMHN}
00135 {\cf20 // This flags control whether Google Test prints UTF8 characters as text.}\par
{\bkmkstart AAAAAAAMHO}{\bkmkend AAAAAAAMHO}
00136 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(print_utf8);\par
{\bkmkstart AAAAAAAMHP}{\bkmkend AAAAAAAMHP}
00137 \par
{\bkmkstart AAAAAAAMHQ}{\bkmkend AAAAAAAMHQ}
00138 {\cf20 // This flag specifies the random number seed.}\par
{\bkmkstart AAAAAAAMHR}{\bkmkend AAAAAAAMHR}
00139 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMHS" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_int32_}}}
(random_seed);\par
{\bkmkstart AAAAAAAMHT}{\bkmkend AAAAAAAMHT}
00140 \par
{\bkmkstart AAAAAAAMHU}{\bkmkend AAAAAAAMHU}
00141 {\cf20 // This flag sets how many times the tests are repeated. The default value}\par
{\bkmkstart AAAAAAAMHV}{\bkmkend AAAAAAAMHV}
00142 {\cf20 // is 1. If the value is -1 the tests are repeating forever.}\par
{\bkmkstart AAAAAAAMHW}{\bkmkend AAAAAAAMHW}
00143 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMHS" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_int32_}}}
(repeat);\par
{\bkmkstart AAAAAAAMHX}{\bkmkend AAAAAAAMHX}
00144 \par
{\bkmkstart AAAAAAAMHY}{\bkmkend AAAAAAAMHY}
00145 {\cf20 // This flag controls whether Google Test includes Google Test internal}\par
{\bkmkstart AAAAAAAMHZ}{\bkmkend AAAAAAAMHZ}
00146 {\cf20 // stack frames in failure stack traces.}\par
{\bkmkstart AAAAAAAMIA}{\bkmkend AAAAAAAMIA}
00147 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(show_internal_stack_frames);\par
{\bkmkstart AAAAAAAMIB}{\bkmkend AAAAAAAMIB}
00148 \par
{\bkmkstart AAAAAAAMIC}{\bkmkend AAAAAAAMIC}
00149 {\cf20 // When this flag is specified, tests' order is randomized on every iteration.}\par
{\bkmkstart AAAAAAAMID}{\bkmkend AAAAAAAMID}
00150 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(shuffle);\par
{\bkmkstart AAAAAAAMIE}{\bkmkend AAAAAAAMIE}
00151 \par
{\bkmkstart AAAAAAAMIF}{\bkmkend AAAAAAAMIF}
00152 {\cf20 // This flag specifies the maximum number of stack frames to be}\par
{\bkmkstart AAAAAAAMIG}{\bkmkend AAAAAAAMIG}
00153 {\cf20 // printed in a failure message.}\par
{\bkmkstart AAAAAAAMIH}{\bkmkend AAAAAAAMIH}
00154 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMHS" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_int32_}}}
(stack_trace_depth);\par
{\bkmkstart AAAAAAAMII}{\bkmkend AAAAAAAMII}
00155 \par
{\bkmkstart AAAAAAAMIJ}{\bkmkend AAAAAAAMIJ}
00156 {\cf20 // When this flag is specified, a failed assertion will throw an}\par
{\bkmkstart AAAAAAAMIK}{\bkmkend AAAAAAAMIK}
00157 {\cf20 // exception if exceptions are enabled, or exit the program with a}\par
{\bkmkstart AAAAAAAMIL}{\bkmkend AAAAAAAMIL}
00158 {\cf20 // non-zero code otherwise. For use with an external test framework.}\par
{\bkmkstart AAAAAAAMIM}{\bkmkend AAAAAAAMIM}
00159 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGE" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_bool_}}}
(throw_on_failure);\par
{\bkmkstart AAAAAAAMIN}{\bkmkend AAAAAAAMIN}
00160 \par
{\bkmkstart AAAAAAAMIO}{\bkmkend AAAAAAAMIO}
00161 {\cf20 // When this flag is set with a "host:port" string, on supported}\par
{\bkmkstart AAAAAAAMIP}{\bkmkend AAAAAAAMIP}
00162 {\cf20 // platforms test results are streamed to the specified port on}\par
{\bkmkstart AAAAAAAMIQ}{\bkmkend AAAAAAAMIQ}
00163 {\cf20 // the specified host machine.}\par
{\bkmkstart AAAAAAAMIR}{\bkmkend AAAAAAAMIR}
00164 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_string_}}}
(stream_result_to);\par
{\bkmkstart AAAAAAAMIS}{\bkmkend AAAAAAAMIS}
00165 \par
{\bkmkstart AAAAAAAMIT}{\bkmkend AAAAAAAMIT}
00166 {\cf21 #if GTEST_USE_OWN_FLAGFILE_FLAG_}\par
{\bkmkstart AAAAAAAMIU}{\bkmkend AAAAAAAMIU}
00167 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMGR" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DECLARE_string_}}}
(flagfile);\par
{\bkmkstart AAAAAAAMIV}{\bkmkend AAAAAAAMIV}
00168 {\cf21 #endif  }{\cf20 // GTEST_USE_OWN_FLAGFILE_FLAG_}\par
{\bkmkstart AAAAAAAMIW}{\bkmkend AAAAAAAMIW}
00169 \par
{\bkmkstart AAAAAAAMIX}{\bkmkend AAAAAAAMIX}
00170 {\cf20 // The upper limit for valid stack trace depths.}\par
{\bkmkstart AAAAAAAMIY}{\bkmkend AAAAAAAMIY}
00171 {\cf17 const} {\cf18 int} kMaxStackTraceDepth = 100;\par
{\bkmkstart AAAAAAAMIZ}{\bkmkend AAAAAAAMIZ}
00172 \par
{\bkmkstart AAAAAAAMJA}{\bkmkend AAAAAAAMJA}
00173 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAAAMJB}{\bkmkend AAAAAAAMJB}
00174 \par
{\bkmkstart AAAAAAAMJC}{\bkmkend AAAAAAAMJC}
00175 {\cf17 class }AssertHelper;\par
{\bkmkstart AAAAAAAMJD}{\bkmkend AAAAAAAMJD}
00176 {\cf17 class }DefaultGlobalTestPartResultReporter;\par
{\bkmkstart AAAAAAAMJE}{\bkmkend AAAAAAAMJE}
00177 {\cf17 class }ExecDeathTest;\par
{\bkmkstart AAAAAAAMJF}{\bkmkend AAAAAAAMJF}
00178 {\cf17 class }NoExecDeathTest;\par
{\bkmkstart AAAAAAAMJG}{\bkmkend AAAAAAAMJG}
00179 {\cf17 class }FinalSuccessChecker;\par
{\bkmkstart AAAAAAAMJH}{\bkmkend AAAAAAAMJH}
00180 {\cf17 class }GTestFlagSaver;\par
{\bkmkstart AAAAAAAMJI}{\bkmkend AAAAAAAMJI}
00181 {\cf17 class }StreamingListenerTest;\par
{\bkmkstart AAAAAAAMJJ}{\bkmkend AAAAAAAMJJ}
00182 {\cf17 class }TestResultAccessor;\par
{\bkmkstart AAAAAAAMJK}{\bkmkend AAAAAAAMJK}
00183 {\cf17 class }TestEventListenersAccessor;\par
{\bkmkstart AAAAAAAMJL}{\bkmkend AAAAAAAMJL}
00184 {\cf17 class }TestEventRepeater;\par
{\bkmkstart AAAAAAAMJM}{\bkmkend AAAAAAAMJM}
00185 {\cf17 class }UnitTestRecordPropertyTestHelper;\par
{\bkmkstart AAAAAAAMJN}{\bkmkend AAAAAAAMJN}
00186 {\cf17 class }WindowsDeathTest;\par
{\bkmkstart AAAAAAAMJO}{\bkmkend AAAAAAAMJO}
00187 {\cf17 class }FuchsiaDeathTest;\par
{\bkmkstart AAAAAAAMJP}{\bkmkend AAAAAAAMJP}
00188 {\cf17 class }UnitTestImpl* GetUnitTestImpl();\par
{\bkmkstart AAAAAAAMJQ}{\bkmkend AAAAAAAMJQ}
00189 {\cf18 void} ReportFailureInUnknownLocation({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 TestPartResult::Type}}}
 result_type,\par
{\bkmkstart AAAAAAAMJR}{\bkmkend AAAAAAAMJR}
00190                                     {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& message);\par
{\bkmkstart AAAAAAAMJS}{\bkmkend AAAAAAAMJS}
00191 \par
{\bkmkstart AAAAAAAMJT}{\bkmkend AAAAAAAMJT}
00192 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAAAMJU}{\bkmkend AAAAAAAMJU}
00193 \par
{\bkmkstart AAAAAAAMJV}{\bkmkend AAAAAAAMJV}
00194 {\cf20 // The friend relationship of some of these classes is cyclic.}\par
{\bkmkstart AAAAAAAMJW}{\bkmkend AAAAAAAMJW}
00195 {\cf20 // If we don't forward declare them the compiler might confuse the classes}\par
{\bkmkstart AAAAAAAMJX}{\bkmkend AAAAAAAMJX}
00196 {\cf20 // in friendship clauses with same named classes on the scope.}\par
{\bkmkstart AAAAAAAMJY}{\bkmkend AAAAAAAMJY}
00197 {\cf17 class }Test;\par
{\bkmkstart AAAAAAAMJZ}{\bkmkend AAAAAAAMJZ}
00198 {\cf17 class }TestCase;\par
{\bkmkstart AAAAAAAMKA}{\bkmkend AAAAAAAMKA}
00199 {\cf17 class }TestInfo;\par
{\bkmkstart AAAAAAAMKB}{\bkmkend AAAAAAAMKB}
00200 {\cf17 class }UnitTest;\par
{\bkmkstart AAAAAAAMKC}{\bkmkend AAAAAAAMKC}
00201 \par
{\bkmkstart AAAAAAAMKD}{\bkmkend AAAAAAAMKD}
00202 {\cf20 // A class for indicating whether an assertion was successful.  When}\par
{\bkmkstart AAAAAAAMKE}{\bkmkend AAAAAAAMKE}
00203 {\cf20 // the assertion wasn't successful, the AssertionResult object}\par
{\bkmkstart AAAAAAAMKF}{\bkmkend AAAAAAAMKF}
00204 {\cf20 // remembers a non-empty message that describes how it failed.}\par
{\bkmkstart AAAAAAAMKG}{\bkmkend AAAAAAAMKG}
00205 {\cf20 //}\par
{\bkmkstart AAAAAAAMKH}{\bkmkend AAAAAAAMKH}
00206 {\cf20 // To create an instance of this class, use one of the factory functions}\par
{\bkmkstart AAAAAAAMKI}{\bkmkend AAAAAAAMKI}
00207 {\cf20 // (AssertionSuccess() and AssertionFailure()).}\par
{\bkmkstart AAAAAAAMKJ}{\bkmkend AAAAAAAMKJ}
00208 {\cf20 //}\par
{\bkmkstart AAAAAAAMKK}{\bkmkend AAAAAAAMKK}
00209 {\cf20 // This class is useful for two purposes:}\par
{\bkmkstart AAAAAAAMKL}{\bkmkend AAAAAAAMKL}
00210 {\cf20 //   1. Defining predicate functions to be used with Boolean test assertions}\par
{\bkmkstart AAAAAAAMKM}{\bkmkend AAAAAAAMKM}
00211 {\cf20 //      EXPECT_TRUE/EXPECT_FALSE and their ASSERT_ counterparts}\par
{\bkmkstart AAAAAAAMKN}{\bkmkend AAAAAAAMKN}
00212 {\cf20 //   2. Defining predicate-format functions to be}\par
{\bkmkstart AAAAAAAMKO}{\bkmkend AAAAAAAMKO}
00213 {\cf20 //      used with predicate assertions (ASSERT_PRED_FORMAT*, etc).}\par
{\bkmkstart AAAAAAAMKP}{\bkmkend AAAAAAAMKP}
00214 {\cf20 //}\par
{\bkmkstart AAAAAAAMKQ}{\bkmkend AAAAAAAMKQ}
00215 {\cf20 // For example, if you define IsEven predicate:}\par
{\bkmkstart AAAAAAAMKR}{\bkmkend AAAAAAAMKR}
00216 {\cf20 //}\par
{\bkmkstart AAAAAAAMKS}{\bkmkend AAAAAAAMKS}
00217 {\cf20 //   testing::AssertionResult IsEven(int n) \{}\par
{\bkmkstart AAAAAAAMKT}{\bkmkend AAAAAAAMKT}
00218 {\cf20 //     if ((n % 2) == 0)}\par
{\bkmkstart AAAAAAAMKU}{\bkmkend AAAAAAAMKU}
00219 {\cf20 //       return testing::AssertionSuccess();}\par
{\bkmkstart AAAAAAAMKV}{\bkmkend AAAAAAAMKV}
00220 {\cf20 //     else}\par
{\bkmkstart AAAAAAAMKW}{\bkmkend AAAAAAAMKW}
00221 {\cf20 //       return testing::AssertionFailure() << n << " is odd";}\par
{\bkmkstart AAAAAAAMKX}{\bkmkend AAAAAAAMKX}
00222 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAMKY}{\bkmkend AAAAAAAMKY}
00223 {\cf20 //}\par
{\bkmkstart AAAAAAAMKZ}{\bkmkend AAAAAAAMKZ}
00224 {\cf20 // Then the failed expectation EXPECT_TRUE(IsEven(Fib(5)))}\par
{\bkmkstart AAAAAAAMLA}{\bkmkend AAAAAAAMLA}
00225 {\cf20 // will print the message}\par
{\bkmkstart AAAAAAAMLB}{\bkmkend AAAAAAAMLB}
00226 {\cf20 //}\par
{\bkmkstart AAAAAAAMLC}{\bkmkend AAAAAAAMLC}
00227 {\cf20 //   Value of: IsEven(Fib(5))}\par
{\bkmkstart AAAAAAAMLD}{\bkmkend AAAAAAAMLD}
00228 {\cf20 //     Actual: false (5 is odd)}\par
{\bkmkstart AAAAAAAMLE}{\bkmkend AAAAAAAMLE}
00229 {\cf20 //   Expected: true}\par
{\bkmkstart AAAAAAAMLF}{\bkmkend AAAAAAAMLF}
00230 {\cf20 //}\par
{\bkmkstart AAAAAAAMLG}{\bkmkend AAAAAAAMLG}
00231 {\cf20 // instead of a more opaque}\par
{\bkmkstart AAAAAAAMLH}{\bkmkend AAAAAAAMLH}
00232 {\cf20 //}\par
{\bkmkstart AAAAAAAMLI}{\bkmkend AAAAAAAMLI}
00233 {\cf20 //   Value of: IsEven(Fib(5))}\par
{\bkmkstart AAAAAAAMLJ}{\bkmkend AAAAAAAMLJ}
00234 {\cf20 //     Actual: false}\par
{\bkmkstart AAAAAAAMLK}{\bkmkend AAAAAAAMLK}
00235 {\cf20 //   Expected: true}\par
{\bkmkstart AAAAAAAMLL}{\bkmkend AAAAAAAMLL}
00236 {\cf20 //}\par
{\bkmkstart AAAAAAAMLM}{\bkmkend AAAAAAAMLM}
00237 {\cf20 // in case IsEven is a simple Boolean predicate.}\par
{\bkmkstart AAAAAAAMLN}{\bkmkend AAAAAAAMLN}
00238 {\cf20 //}\par
{\bkmkstart AAAAAAAMLO}{\bkmkend AAAAAAAMLO}
00239 {\cf20 // If you expect your predicate to be reused and want to support informative}\par
{\bkmkstart AAAAAAAMLP}{\bkmkend AAAAAAAMLP}
00240 {\cf20 // messages in EXPECT_FALSE and ASSERT_FALSE (negative assertions show up}\par
{\bkmkstart AAAAAAAMLQ}{\bkmkend AAAAAAAMLQ}
00241 {\cf20 // about half as often as positive ones in our tests), supply messages for}\par
{\bkmkstart AAAAAAAMLR}{\bkmkend AAAAAAAMLR}
00242 {\cf20 // both success and failure cases:}\par
{\bkmkstart AAAAAAAMLS}{\bkmkend AAAAAAAMLS}
00243 {\cf20 //}\par
{\bkmkstart AAAAAAAMLT}{\bkmkend AAAAAAAMLT}
00244 {\cf20 //   testing::AssertionResult IsEven(int n) \{}\par
{\bkmkstart AAAAAAAMLU}{\bkmkend AAAAAAAMLU}
00245 {\cf20 //     if ((n % 2) == 0)}\par
{\bkmkstart AAAAAAAMLV}{\bkmkend AAAAAAAMLV}
00246 {\cf20 //       return testing::AssertionSuccess() << n << " is even";}\par
{\bkmkstart AAAAAAAMLW}{\bkmkend AAAAAAAMLW}
00247 {\cf20 //     else}\par
{\bkmkstart AAAAAAAMLX}{\bkmkend AAAAAAAMLX}
00248 {\cf20 //       return testing::AssertionFailure() << n << " is odd";}\par
{\bkmkstart AAAAAAAMLY}{\bkmkend AAAAAAAMLY}
00249 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAMLZ}{\bkmkend AAAAAAAMLZ}
00250 {\cf20 //}\par
{\bkmkstart AAAAAAAMMA}{\bkmkend AAAAAAAMMA}
00251 {\cf20 // Then a statement EXPECT_FALSE(IsEven(Fib(6))) will print}\par
{\bkmkstart AAAAAAAMMB}{\bkmkend AAAAAAAMMB}
00252 {\cf20 //}\par
{\bkmkstart AAAAAAAMMC}{\bkmkend AAAAAAAMMC}
00253 {\cf20 //   Value of: IsEven(Fib(6))}\par
{\bkmkstart AAAAAAAMMD}{\bkmkend AAAAAAAMMD}
00254 {\cf20 //     Actual: true (8 is even)}\par
{\bkmkstart AAAAAAAMME}{\bkmkend AAAAAAAMME}
00255 {\cf20 //   Expected: false}\par
{\bkmkstart AAAAAAAMMF}{\bkmkend AAAAAAAMMF}
00256 {\cf20 //}\par
{\bkmkstart AAAAAAAMMG}{\bkmkend AAAAAAAMMG}
00257 {\cf20 // NB: Predicates that support negative Boolean assertions have reduced}\par
{\bkmkstart AAAAAAAMMH}{\bkmkend AAAAAAAMMH}
00258 {\cf20 // performance in positive ones so be careful not to use them in tests}\par
{\bkmkstart AAAAAAAMMI}{\bkmkend AAAAAAAMMI}
00259 {\cf20 // that have lots (tens of thousands) of positive Boolean assertions.}\par
{\bkmkstart AAAAAAAMMJ}{\bkmkend AAAAAAAMMJ}
00260 {\cf20 //}\par
{\bkmkstart AAAAAAAMMK}{\bkmkend AAAAAAAMMK}
00261 {\cf20 // To use this class with EXPECT_PRED_FORMAT assertions such as:}\par
{\bkmkstart AAAAAAAMML}{\bkmkend AAAAAAAMML}
00262 {\cf20 //}\par
{\bkmkstart AAAAAAAMMM}{\bkmkend AAAAAAAMMM}
00263 {\cf20 //   // Verifies that Foo() returns an even number.}\par
{\bkmkstart AAAAAAAMMN}{\bkmkend AAAAAAAMMN}
00264 {\cf20 //   EXPECT_PRED_FORMAT1(IsEven, Foo());}\par
{\bkmkstart AAAAAAAMMO}{\bkmkend AAAAAAAMMO}
00265 {\cf20 //}\par
{\bkmkstart AAAAAAAMMP}{\bkmkend AAAAAAAMMP}
00266 {\cf20 // you need to define:}\par
{\bkmkstart AAAAAAAMMQ}{\bkmkend AAAAAAAMMQ}
00267 {\cf20 //}\par
{\bkmkstart AAAAAAAMMR}{\bkmkend AAAAAAAMMR}
00268 {\cf20 //   testing::AssertionResult IsEven(const char* expr, int n) \{}\par
{\bkmkstart AAAAAAAMMS}{\bkmkend AAAAAAAMMS}
00269 {\cf20 //     if ((n % 2) == 0)}\par
{\bkmkstart AAAAAAAMMT}{\bkmkend AAAAAAAMMT}
00270 {\cf20 //       return testing::AssertionSuccess();}\par
{\bkmkstart AAAAAAAMMU}{\bkmkend AAAAAAAMMU}
00271 {\cf20 //     else}\par
{\bkmkstart AAAAAAAMMV}{\bkmkend AAAAAAAMMV}
00272 {\cf20 //       return testing::AssertionFailure()}\par
{\bkmkstart AAAAAAAMMW}{\bkmkend AAAAAAAMMW}
00273 {\cf20 //         << "Expected: " << expr << " is even\\n  Actual: it's " << n;}\par
{\bkmkstart AAAAAAAMMX}{\bkmkend AAAAAAAMMX}
00274 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAMMY}{\bkmkend AAAAAAAMMY}
00275 {\cf20 //}\par
{\bkmkstart AAAAAAAMMZ}{\bkmkend AAAAAAAMMZ}
00276 {\cf20 // If Foo() returns 5, you will see the following message:}\par
{\bkmkstart AAAAAAAMNA}{\bkmkend AAAAAAAMNA}
00277 {\cf20 //}\par
{\bkmkstart AAAAAAAMNB}{\bkmkend AAAAAAAMNB}
00278 {\cf20 //   Expected: Foo() is even}\par
{\bkmkstart AAAAAAAMNC}{\bkmkend AAAAAAAMNC}
00279 {\cf20 //     Actual: it's 5}\par
{\bkmkstart AAAAAAAMND}{\bkmkend AAAAAAAMND}
00280 {\cf20 //}\par
{\bkmkstart AAAAAAAMNE}{\bkmkend AAAAAAAMNE}
00281 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult \{\par
{\bkmkstart AAAAAAAMNF}{\bkmkend AAAAAAAMNF}
00282  {\cf17 public}:\par
{\bkmkstart AAAAAAAMNG}{\bkmkend AAAAAAAMNG}
00283   {\cf20 // Copy constructor.}\par
{\bkmkstart AAAAAAAMNH}{\bkmkend AAAAAAAMNH}
00284   {\cf20 // Used in EXPECT_TRUE/FALSE(assertion_result).}\par
{\bkmkstart AAAAAAAMNI}{\bkmkend AAAAAAAMNI}
00285   AssertionResult({\cf17 const} AssertionResult& other);\par
{\bkmkstart AAAAAAAMNJ}{\bkmkend AAAAAAAMNJ}
00286 \par
{\bkmkstart AAAAAAAMNK}{\bkmkend AAAAAAAMNK}
00287 {\cf21 #if defined(_MSC_VER) && _MSC_VER < 1910}\par
{\bkmkstart AAAAAAAMNL}{\bkmkend AAAAAAAMNL}
00288   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMEX" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_PUSH_}}}
(4800 {\cf20 /* forcing value to bool */})\par
{\bkmkstart AAAAAAAMNM}{\bkmkend AAAAAAAMNM}
00289 {\cf21 #endif}\par
{\bkmkstart AAAAAAAMNN}{\bkmkend AAAAAAAMNN}
00290 \par
{\bkmkstart AAAAAAAMNO}{\bkmkend AAAAAAAMNO}
00291   {\cf20 // Used in the EXPECT_TRUE/FALSE(bool_expression).}\par
{\bkmkstart AAAAAAAMNP}{\bkmkend AAAAAAAMNP}
00292   {\cf20 //}\par
{\bkmkstart AAAAAAAMNQ}{\bkmkend AAAAAAAMNQ}
00293   {\cf20 // T must be contextually convertible to bool.}\par
{\bkmkstart AAAAAAAMNR}{\bkmkend AAAAAAAMNR}
00294   {\cf20 //}\par
{\bkmkstart AAAAAAAMNS}{\bkmkend AAAAAAAMNS}
00295   {\cf20 // The second parameter prevents this overload from being considered if}\par
{\bkmkstart AAAAAAAMNT}{\bkmkend AAAAAAAMNT}
00296   {\cf20 // the argument is implicitly convertible to AssertionResult. In that case}\par
{\bkmkstart AAAAAAAMNU}{\bkmkend AAAAAAAMNU}
00297   {\cf20 // we want AssertionResult's copy constructor to be used.}\par
{\bkmkstart AAAAAAAMNV}{\bkmkend AAAAAAAMNV}
00298   {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAMNW}{\bkmkend AAAAAAAMNW}
00299   {\cf17 explicit} AssertionResult(\par
{\bkmkstart AAAAAAAMNX}{\bkmkend AAAAAAAMNX}
00300       {\cf17 const} T& success,\par
{\bkmkstart AAAAAAAMNY}{\bkmkend AAAAAAAMNY}
00301       {\cf17 typename} internal::EnableIf<\par
{\bkmkstart AAAAAAAMNZ}{\bkmkend AAAAAAAMNZ}
00302           !internal::ImplicitlyConvertible<T, AssertionResult>::value>::type*\par
{\bkmkstart AAAAAAAMOA}{\bkmkend AAAAAAAMOA}
00303           {\cf20 /*enabler*/} = NULL)\par
{\bkmkstart AAAAAAAMOB}{\bkmkend AAAAAAAMOB}
00304       : success_(success) \{\}\par
{\bkmkstart AAAAAAAMOC}{\bkmkend AAAAAAAMOC}
00305 \par
{\bkmkstart AAAAAAAMOD}{\bkmkend AAAAAAAMOD}
00306 {\cf21 #if defined(_MSC_VER) && _MSC_VER < 1910}\par
{\bkmkstart AAAAAAAMOE}{\bkmkend AAAAAAAMOE}
00307   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_POP_}}}
()\par
{\bkmkstart AAAAAAAMOF}{\bkmkend AAAAAAAMOF}
00308 {\cf21 #endif}\par
{\bkmkstart AAAAAAAMOG}{\bkmkend AAAAAAAMOG}
00309 \par
{\bkmkstart AAAAAAAMOH}{\bkmkend AAAAAAAMOH}
00310   {\cf20 // Assignment operator.}\par
{\bkmkstart AAAAAAAMOI}{\bkmkend AAAAAAAMOI}
00311   AssertionResult& operator=(AssertionResult other) \{\par
{\bkmkstart AAAAAAAMOJ}{\bkmkend AAAAAAAMOJ}
00312     swap(other);\par
{\bkmkstart AAAAAAAMOK}{\bkmkend AAAAAAAMOK}
00313     {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAMOL}{\bkmkend AAAAAAAMOL}
00314   \}\par
{\bkmkstart AAAAAAAMOM}{\bkmkend AAAAAAAMOM}
00315 \par
{\bkmkstart AAAAAAAMON}{\bkmkend AAAAAAAMON}
00316   {\cf20 // Returns true iff the assertion succeeded.}\par
{\bkmkstart AAAAAAAMOO}{\bkmkend AAAAAAAMOO}
00317   {\cf17 operator} bool(){\cf17  const }\{ {\cf19 return} success_; \}  {\cf20 // NOLINT}\par
{\bkmkstart AAAAAAAMOP}{\bkmkend AAAAAAAMOP}
00318 \par
{\bkmkstart AAAAAAAMOQ}{\bkmkend AAAAAAAMOQ}
00319   {\cf20 // Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.}\par
{\bkmkstart AAAAAAAMOR}{\bkmkend AAAAAAAMOR}
00320   AssertionResult operator!() {\cf17 const};\par
{\bkmkstart AAAAAAAMOS}{\bkmkend AAAAAAAMOS}
00321 \par
{\bkmkstart AAAAAAAMOT}{\bkmkend AAAAAAAMOT}
00322   {\cf20 // Returns the text streamed into this AssertionResult. Test assertions}\par
{\bkmkstart AAAAAAAMOU}{\bkmkend AAAAAAAMOU}
00323   {\cf20 // use it when they fail (i.e., the predicate's outcome doesn't match the}\par
{\bkmkstart AAAAAAAMOV}{\bkmkend AAAAAAAMOV}
00324   {\cf20 // assertion's expectation). When nothing has been streamed into the}\par
{\bkmkstart AAAAAAAMOW}{\bkmkend AAAAAAAMOW}
00325   {\cf20 // object, returns an empty string.}\par
{\bkmkstart AAAAAAAMOX}{\bkmkend AAAAAAAMOX}
00326   {\cf17 const} {\cf18 char}* message(){\cf17  const }\{\par
{\bkmkstart AAAAAAAMOY}{\bkmkend AAAAAAAMOY}
00327     {\cf19 return} message_.get() != NULL ?  message_->c_str() : {\cf22 ""};\par
{\bkmkstart AAAAAAAMOZ}{\bkmkend AAAAAAAMOZ}
00328   \}\par
{\bkmkstart AAAAAAAMPA}{\bkmkend AAAAAAAMPA}
00329   {\cf20 // FIXME: Remove this after making sure no clients use it.}\par
{\bkmkstart AAAAAAAMPB}{\bkmkend AAAAAAAMPB}
00330   {\cf20 // Deprecated; please use message() instead.}\par
{\bkmkstart AAAAAAAMPC}{\bkmkend AAAAAAAMPC}
00331   {\cf17 const} {\cf18 char}* failure_message(){\cf17  const }\{ {\cf19 return} message(); \}\par
{\bkmkstart AAAAAAAMPD}{\bkmkend AAAAAAAMPD}
00332 \par
{\bkmkstart AAAAAAAMPE}{\bkmkend AAAAAAAMPE}
00333   {\cf20 // Streams a custom failure message into this object.}\par
{\bkmkstart AAAAAAAMPF}{\bkmkend AAAAAAAMPF}
00334   {\cf17 template} <{\cf17 typename} T> AssertionResult& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
({\cf17 const} T& value) \{\par
{\bkmkstart AAAAAAAMPG}{\bkmkend AAAAAAAMPG}
00335     AppendMessage(Message() << value);\par
{\bkmkstart AAAAAAAMPH}{\bkmkend AAAAAAAMPH}
00336     {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAMPI}{\bkmkend AAAAAAAMPI}
00337   \}\par
{\bkmkstart AAAAAAAMPJ}{\bkmkend AAAAAAAMPJ}
00338 \par
{\bkmkstart AAAAAAAMPK}{\bkmkend AAAAAAAMPK}
00339   {\cf20 // Allows streaming basic output manipulators such as endl or flush into}\par
{\bkmkstart AAAAAAAMPL}{\bkmkend AAAAAAAMPL}
00340   {\cf20 // this object.}\par
{\bkmkstart AAAAAAAMPM}{\bkmkend AAAAAAAMPM}
00341   AssertionResult& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGQC" }{}}{\fldrslt {\cs37\ul\cf2 operator<<}}}
(\par
{\bkmkstart AAAAAAAMPN}{\bkmkend AAAAAAAMPN}
00342       ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) \{\par
{\bkmkstart AAAAAAAMPO}{\bkmkend AAAAAAAMPO}
00343     AppendMessage(Message() << basic_manipulator);\par
{\bkmkstart AAAAAAAMPP}{\bkmkend AAAAAAAMPP}
00344     {\cf19 return} *{\cf17 this};\par
{\bkmkstart AAAAAAAMPQ}{\bkmkend AAAAAAAMPQ}
00345   \}\par
{\bkmkstart AAAAAAAMPR}{\bkmkend AAAAAAAMPR}
00346 \par
{\bkmkstart AAAAAAAMPS}{\bkmkend AAAAAAAMPS}
00347  {\cf17 private}:\par
{\bkmkstart AAAAAAAMPT}{\bkmkend AAAAAAAMPT}
00348   {\cf20 // Appends the contents of message to message_.}\par
{\bkmkstart AAAAAAAMPU}{\bkmkend AAAAAAAMPU}
00349   {\cf18 void} AppendMessage({\cf17 const} Message& a_message) \{\par
{\bkmkstart AAAAAAAMPV}{\bkmkend AAAAAAAMPV}
00350     {\cf19 if} (message_.get() == NULL)\par
{\bkmkstart AAAAAAAMPW}{\bkmkend AAAAAAAMPW}
00351       message_.reset({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 new ::std::string}}}
);\par
{\bkmkstart AAAAAAAMPX}{\bkmkend AAAAAAAMPX}
00352     message_->append(a_message.GetString().c_str());\par
{\bkmkstart AAAAAAAMPY}{\bkmkend AAAAAAAMPY}
00353   \}\par
{\bkmkstart AAAAAAAMPZ}{\bkmkend AAAAAAAMPZ}
00354 \par
{\bkmkstart AAAAAAAMQA}{\bkmkend AAAAAAAMQA}
00355   {\cf20 // Swap the contents of this AssertionResult with other.}\par
{\bkmkstart AAAAAAAMQB}{\bkmkend AAAAAAAMQB}
00356   {\cf18 void} swap(AssertionResult& other);\par
{\bkmkstart AAAAAAAMQC}{\bkmkend AAAAAAAMQC}
00357 \par
{\bkmkstart AAAAAAAMQD}{\bkmkend AAAAAAAMQD}
00358   {\cf20 // Stores result of the assertion predicate.}\par
{\bkmkstart AAAAAAAMQE}{\bkmkend AAAAAAAMQE}
00359   {\cf18 bool} success_;\par
{\bkmkstart AAAAAAAMQF}{\bkmkend AAAAAAAMQF}
00360   {\cf20 // Stores the message describing the condition in case the expectation}\par
{\bkmkstart AAAAAAAMQG}{\bkmkend AAAAAAAMQG}
00361   {\cf20 // construct is not satisfied with the predicate's outcome.}\par
{\bkmkstart AAAAAAAMQH}{\bkmkend AAAAAAAMQH}
00362   {\cf20 // Referenced via a pointer to avoid taking too much stack frame space}\par
{\bkmkstart AAAAAAAMQI}{\bkmkend AAAAAAAMQI}
00363   {\cf20 // with test assertions.}\par
{\bkmkstart AAAAAAAMQJ}{\bkmkend AAAAAAAMQJ}
00364   internal::scoped_ptr< ::std::string> message_;\par
{\bkmkstart AAAAAAAMQK}{\bkmkend AAAAAAAMQK}
00365 \};\par
{\bkmkstart AAAAAAAMQL}{\bkmkend AAAAAAAMQL}
00366 \par
{\bkmkstart AAAAAAAMQM}{\bkmkend AAAAAAAMQM}
00367 {\cf20 // Makes a successful assertion result.}\par
{\bkmkstart AAAAAAAMQN}{\bkmkend AAAAAAAMQN}
00368 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult AssertionSuccess();\par
{\bkmkstart AAAAAAAMQO}{\bkmkend AAAAAAAMQO}
00369 \par
{\bkmkstart AAAAAAAMQP}{\bkmkend AAAAAAAMQP}
00370 {\cf20 // Makes a failed assertion result.}\par
{\bkmkstart AAAAAAAMQQ}{\bkmkend AAAAAAAMQQ}
00371 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult AssertionFailure();\par
{\bkmkstart AAAAAAAMQR}{\bkmkend AAAAAAAMQR}
00372 \par
{\bkmkstart AAAAAAAMQS}{\bkmkend AAAAAAAMQS}
00373 {\cf20 // Makes a failed assertion result with the given failure message.}\par
{\bkmkstart AAAAAAAMQT}{\bkmkend AAAAAAAMQT}
00374 {\cf20 // Deprecated; use AssertionFailure() << msg.}\par
{\bkmkstart AAAAAAAMQU}{\bkmkend AAAAAAAMQU}
00375 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult AssertionFailure({\cf17 const} Message& msg);\par
{\bkmkstart AAAAAAAMQV}{\bkmkend AAAAAAAMQV}
00376 \par
{\bkmkstart AAAAAAAMQW}{\bkmkend AAAAAAAMQW}
00377 \}  {\cf20 // namespace testing}\par
{\bkmkstart AAAAAAAMQX}{\bkmkend AAAAAAAMQX}
00378 \par
{\bkmkstart AAAAAAAMQY}{\bkmkend AAAAAAAMQY}
00379 {\cf20 // Includes the auto-generated header that implements a family of generic}\par
{\bkmkstart AAAAAAAMQZ}{\bkmkend AAAAAAAMQZ}
00380 {\cf20 // predicate assertion macros. This include comes late because it relies on}\par
{\bkmkstart AAAAAAAMRA}{\bkmkend AAAAAAAMRA}
00381 {\cf20 // APIs declared above.}\par
{\bkmkstart AAAAAAAMRB}{\bkmkend AAAAAAAMRB}
00382 {\cf21 #include "{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMRC" }{}}{\fldrslt {\cs37\ul\cf2 gtest/gtest_pred_impl.h}}}
"}\par
{\bkmkstart AAAAAAAMRD}{\bkmkend AAAAAAAMRD}
00383 \par
{\bkmkstart AAAAAAAMRE}{\bkmkend AAAAAAAMRE}
00384 {\cf17 namespace }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAFZQ" }{}}{\fldrslt {\cs37\ul\cf2 testing}}}
 \{\par
{\bkmkstart AAAAAAAMRF}{\bkmkend AAAAAAAMRF}
00385 \par
{\bkmkstart AAAAAAAMRG}{\bkmkend AAAAAAAMRG}
00386 {\cf20 // The abstract class that all tests inherit from.}\par
{\bkmkstart AAAAAAAMRH}{\bkmkend AAAAAAAMRH}
00387 {\cf20 //}\par
{\bkmkstart AAAAAAAMRI}{\bkmkend AAAAAAAMRI}
00388 {\cf20 // In Google Test, a unit test program contains one or many TestCases, and}\par
{\bkmkstart AAAAAAAMRJ}{\bkmkend AAAAAAAMRJ}
00389 {\cf20 // each TestCase contains one or many Tests.}\par
{\bkmkstart AAAAAAAMRK}{\bkmkend AAAAAAAMRK}
00390 {\cf20 //}\par
{\bkmkstart AAAAAAAMRL}{\bkmkend AAAAAAAMRL}
00391 {\cf20 // When you define a test using the TEST macro, you don't need to}\par
{\bkmkstart AAAAAAAMRM}{\bkmkend AAAAAAAMRM}
00392 {\cf20 // explicitly derive from Test - the TEST macro automatically does}\par
{\bkmkstart AAAAAAAMRN}{\bkmkend AAAAAAAMRN}
00393 {\cf20 // this for you.}\par
{\bkmkstart AAAAAAAMRO}{\bkmkend AAAAAAAMRO}
00394 {\cf20 //}\par
{\bkmkstart AAAAAAAMRP}{\bkmkend AAAAAAAMRP}
00395 {\cf20 // The only time you derive from Test is when defining a test fixture}\par
{\bkmkstart AAAAAAAMRQ}{\bkmkend AAAAAAAMRQ}
00396 {\cf20 // to be used in a TEST_F.  For example:}\par
{\bkmkstart AAAAAAAMRR}{\bkmkend AAAAAAAMRR}
00397 {\cf20 //}\par
{\bkmkstart AAAAAAAMRS}{\bkmkend AAAAAAAMRS}
00398 {\cf20 //   class FooTest : public testing::Test \{}\par
{\bkmkstart AAAAAAAMRT}{\bkmkend AAAAAAAMRT}
00399 {\cf20 //    protected:}\par
{\bkmkstart AAAAAAAMRU}{\bkmkend AAAAAAAMRU}
00400 {\cf20 //     void SetUp() override \{ ... \}}\par
{\bkmkstart AAAAAAAMRV}{\bkmkend AAAAAAAMRV}
00401 {\cf20 //     void TearDown() override \{ ... \}}\par
{\bkmkstart AAAAAAAMRW}{\bkmkend AAAAAAAMRW}
00402 {\cf20 //     ...}\par
{\bkmkstart AAAAAAAMRX}{\bkmkend AAAAAAAMRX}
00403 {\cf20 //   \};}\par
{\bkmkstart AAAAAAAMRY}{\bkmkend AAAAAAAMRY}
00404 {\cf20 //}\par
{\bkmkstart AAAAAAAMRZ}{\bkmkend AAAAAAAMRZ}
00405 {\cf20 //   TEST_F(FooTest, Bar) \{ ... \}}\par
{\bkmkstart AAAAAAAMSA}{\bkmkend AAAAAAAMSA}
00406 {\cf20 //   TEST_F(FooTest, Baz) \{ ... \}}\par
{\bkmkstart AAAAAAAMSB}{\bkmkend AAAAAAAMSB}
00407 {\cf20 //}\par
{\bkmkstart AAAAAAAMSC}{\bkmkend AAAAAAAMSC}
00408 {\cf20 // Test is not copyable.}\par
{\bkmkstart AAAAAAAMSD}{\bkmkend AAAAAAAMSD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 00409}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
 \{\par
{\bkmkstart AAAAAAAMSE}{\bkmkend AAAAAAAMSE}
00410  {\cf17 public}:\par
{\bkmkstart AAAAAAAMSF}{\bkmkend AAAAAAAMSF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSG" }{}}{\fldrslt {\cs37\ul\cf2 00411}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
;\par
{\bkmkstart AAAAAAAMSI}{\bkmkend AAAAAAAMSI}
00412 \par
{\bkmkstart AAAAAAAMSJ}{\bkmkend AAAAAAAMSJ}
00413   {\cf20 // Defines types for pointers to functions that set up and tear down}\par
{\bkmkstart AAAAAAAMSK}{\bkmkend AAAAAAAMSK}
00414   {\cf20 // a test case.}\par
{\bkmkstart AAAAAAAMSL}{\bkmkend AAAAAAAMSL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSM" }{}}{\fldrslt {\cs37\ul\cf2 00415}}}
   {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSN" }{}}{\fldrslt {\cs37\ul\cf2 internal::SetUpTestCaseFunc}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSM" }{}}{\fldrslt {\cs37\ul\cf2 SetUpTestCaseFunc}}}
;\par
{\bkmkstart AAAAAAAMSO}{\bkmkend AAAAAAAMSO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSP" }{}}{\fldrslt {\cs37\ul\cf2 00416}}}
   {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSQ" }{}}{\fldrslt {\cs37\ul\cf2 internal::TearDownTestCaseFunc}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSP" }{}}{\fldrslt {\cs37\ul\cf2 TearDownTestCaseFunc}}}
;\par
{\bkmkstart AAAAAAAMSR}{\bkmkend AAAAAAAMSR}
00417 \par
{\bkmkstart AAAAAAAMSS}{\bkmkend AAAAAAAMSS}
00418   {\cf20 // The d'tor is virtual as we intend to inherit from Test.}\par
{\bkmkstart AAAAAAAMST}{\bkmkend AAAAAAAMST}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSU" }{}}{\fldrslt {\cs37\ul\cf2 00419}}}
   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSU" }{}}{\fldrslt {\cs37\ul\cf2 ~Test}}}
();\par
{\bkmkstart AAAAAAAMSV}{\bkmkend AAAAAAAMSV}
00420 \par
{\bkmkstart AAAAAAAMSW}{\bkmkend AAAAAAAMSW}
00421   {\cf20 // Sets up the stuff shared by all tests in this test case.}\par
{\bkmkstart AAAAAAAMSX}{\bkmkend AAAAAAAMSX}
00422   {\cf20 //}\par
{\bkmkstart AAAAAAAMSY}{\bkmkend AAAAAAAMSY}
00423   {\cf20 // Google Test will call Foo::SetUpTestCase() before running the first}\par
{\bkmkstart AAAAAAAMSZ}{\bkmkend AAAAAAAMSZ}
00424   {\cf20 // test in test case Foo.  Hence a sub-class can define its own}\par
{\bkmkstart AAAAAAAMTA}{\bkmkend AAAAAAAMTA}
00425   {\cf20 // SetUpTestCase() method to shadow the one defined in the super}\par
{\bkmkstart AAAAAAAMTB}{\bkmkend AAAAAAAMTB}
00426   {\cf20 // class.}\par
{\bkmkstart AAAAAAAMTC}{\bkmkend AAAAAAAMTC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTD" }{}}{\fldrslt {\cs37\ul\cf2 00427}}}
   {\cf17 static} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTD" }{}}{\fldrslt {\cs37\ul\cf2 SetUpTestCase}}}
() \{\}\par
{\bkmkstart AAAAAAAMTE}{\bkmkend AAAAAAAMTE}
00428 \par
{\bkmkstart AAAAAAAMTF}{\bkmkend AAAAAAAMTF}
00429   {\cf20 // Tears down the stuff shared by all tests in this test case.}\par
{\bkmkstart AAAAAAAMTG}{\bkmkend AAAAAAAMTG}
00430   {\cf20 //}\par
{\bkmkstart AAAAAAAMTH}{\bkmkend AAAAAAAMTH}
00431   {\cf20 // Google Test will call Foo::TearDownTestCase() after running the last}\par
{\bkmkstart AAAAAAAMTI}{\bkmkend AAAAAAAMTI}
00432   {\cf20 // test in test case Foo.  Hence a sub-class can define its own}\par
{\bkmkstart AAAAAAAMTJ}{\bkmkend AAAAAAAMTJ}
00433   {\cf20 // TearDownTestCase() method to shadow the one defined in the super}\par
{\bkmkstart AAAAAAAMTK}{\bkmkend AAAAAAAMTK}
00434   {\cf20 // class.}\par
{\bkmkstart AAAAAAAMTL}{\bkmkend AAAAAAAMTL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTM" }{}}{\fldrslt {\cs37\ul\cf2 00435}}}
   {\cf17 static} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTM" }{}}{\fldrslt {\cs37\ul\cf2 TearDownTestCase}}}
() \{\}\par
{\bkmkstart AAAAAAAMTN}{\bkmkend AAAAAAAMTN}
00436 \par
{\bkmkstart AAAAAAAMTO}{\bkmkend AAAAAAAMTO}
00437   {\cf20 // Returns true iff the current test has a fatal failure.}\par
{\bkmkstart AAAAAAAMTP}{\bkmkend AAAAAAAMTP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTQ" }{}}{\fldrslt {\cs37\ul\cf2 00438}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTQ" }{}}{\fldrslt {\cs37\ul\cf2 HasFatalFailure}}}
();\par
{\bkmkstart AAAAAAAMTR}{\bkmkend AAAAAAAMTR}
00439 \par
{\bkmkstart AAAAAAAMTS}{\bkmkend AAAAAAAMTS}
00440   {\cf20 // Returns true iff the current test has a non-fatal failure.}\par
{\bkmkstart AAAAAAAMTT}{\bkmkend AAAAAAAMTT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTU" }{}}{\fldrslt {\cs37\ul\cf2 00441}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTU" }{}}{\fldrslt {\cs37\ul\cf2 HasNonfatalFailure}}}
();\par
{\bkmkstart AAAAAAAMTV}{\bkmkend AAAAAAAMTV}
00442 \par
{\bkmkstart AAAAAAAMTW}{\bkmkend AAAAAAAMTW}
00443   {\cf20 // Returns true iff the current test has a (either fatal or}\par
{\bkmkstart AAAAAAAMTX}{\bkmkend AAAAAAAMTX}
00444   {\cf20 // non-fatal) failure.}\par
{\bkmkstart AAAAAAAMTY}{\bkmkend AAAAAAAMTY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTZ" }{}}{\fldrslt {\cs37\ul\cf2 00445}}}
   {\cf17 static} {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMTZ" }{}}{\fldrslt {\cs37\ul\cf2 HasFailure}}}
() \{ {\cf19 return} HasFatalFailure() || HasNonfatalFailure(); \}\par
{\bkmkstart AAAAAAAMUA}{\bkmkend AAAAAAAMUA}
00446 \par
{\bkmkstart AAAAAAAMUB}{\bkmkend AAAAAAAMUB}
00447   {\cf20 // Logs a property for the current test, test case, or for the entire}\par
{\bkmkstart AAAAAAAMUC}{\bkmkend AAAAAAAMUC}
00448   {\cf20 // invocation of the test program when used outside of the context of a}\par
{\bkmkstart AAAAAAAMUD}{\bkmkend AAAAAAAMUD}
00449   {\cf20 // test case.  Only the last value for a given key is remembered.  These}\par
{\bkmkstart AAAAAAAMUE}{\bkmkend AAAAAAAMUE}
00450   {\cf20 // are public static so they can be called from utility functions that are}\par
{\bkmkstart AAAAAAAMUF}{\bkmkend AAAAAAAMUF}
00451   {\cf20 // not members of the test fixture.  Calls to RecordProperty made during}\par
{\bkmkstart AAAAAAAMUG}{\bkmkend AAAAAAAMUG}
00452   {\cf20 // lifespan of the test (from the moment its constructor starts to the}\par
{\bkmkstart AAAAAAAMUH}{\bkmkend AAAAAAAMUH}
00453   {\cf20 // moment its destructor finishes) will be output in XML as attributes of}\par
{\bkmkstart AAAAAAAMUI}{\bkmkend AAAAAAAMUI}
00454   {\cf20 // the <testcase> element.  Properties recorded from fixture's}\par
{\bkmkstart AAAAAAAMUJ}{\bkmkend AAAAAAAMUJ}
00455   {\cf20 // SetUpTestCase or TearDownTestCase are logged as attributes of the}\par
{\bkmkstart AAAAAAAMUK}{\bkmkend AAAAAAAMUK}
00456   {\cf20 // corresponding <testsuite> element.  Calls to RecordProperty made in the}\par
{\bkmkstart AAAAAAAMUL}{\bkmkend AAAAAAAMUL}
00457   {\cf20 // global context (before or after invocation of RUN_ALL_TESTS and from}\par
{\bkmkstart AAAAAAAMUM}{\bkmkend AAAAAAAMUM}
00458   {\cf20 // SetUp/TearDown method of Environment objects registered with Google}\par
{\bkmkstart AAAAAAAMUN}{\bkmkend AAAAAAAMUN}
00459   {\cf20 // Test) will be output as attributes of the <testsuites> element.}\par
{\bkmkstart AAAAAAAMUO}{\bkmkend AAAAAAAMUO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUP" }{}}{\fldrslt {\cs37\ul\cf2 00460}}}
   {\cf17 static} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUP" }{}}{\fldrslt {\cs37\ul\cf2 RecordProperty}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& key, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& value);\par
{\bkmkstart AAAAAAAMUQ}{\bkmkend AAAAAAAMUQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUR" }{}}{\fldrslt {\cs37\ul\cf2 00461}}}
   {\cf17 static} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUR" }{}}{\fldrslt {\cs37\ul\cf2 RecordProperty}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& key, {\cf18 int} value);\par
{\bkmkstart AAAAAAAMUS}{\bkmkend AAAAAAAMUS}
00462 \par
{\bkmkstart AAAAAAAMUT}{\bkmkend AAAAAAAMUT}
00463  {\cf17 protected}:\par
{\bkmkstart AAAAAAAMUU}{\bkmkend AAAAAAAMUU}
00464   {\cf20 // Creates a Test object.}\par
{\bkmkstart AAAAAAAMUV}{\bkmkend AAAAAAAMUV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUW" }{}}{\fldrslt {\cs37\ul\cf2 00465}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMUW" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
();\par
{\bkmkstart AAAAAAAMUX}{\bkmkend AAAAAAAMUX}
00466 \par
{\bkmkstart AAAAAAAMUY}{\bkmkend AAAAAAAMUY}
00467   {\cf20 // Sets up the test fixture.}\par
{\bkmkstart AAAAAAAMUZ}{\bkmkend AAAAAAAMUZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMVA" }{}}{\fldrslt {\cs37\ul\cf2 00468}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMVA" }{}}{\fldrslt {\cs37\ul\cf2 SetUp}}}
();\par
{\bkmkstart AAAAAAAMVB}{\bkmkend AAAAAAAMVB}
00469 \par
{\bkmkstart AAAAAAAMVC}{\bkmkend AAAAAAAMVC}
00470   {\cf20 // Tears down the test fixture.}\par
{\bkmkstart AAAAAAAMVD}{\bkmkend AAAAAAAMVD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMVE" }{}}{\fldrslt {\cs37\ul\cf2 00471}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMVE" }{}}{\fldrslt {\cs37\ul\cf2 TearDown}}}
();\par
{\bkmkstart AAAAAAAMVF}{\bkmkend AAAAAAAMVF}
00472 \par
{\bkmkstart AAAAAAAMVG}{\bkmkend AAAAAAAMVG}
00473  {\cf17 private}:\par
{\bkmkstart AAAAAAAMVH}{\bkmkend AAAAAAAMVH}
00474   {\cf20 // Returns true iff the current test has the same fixture class as}\par
{\bkmkstart AAAAAAAMVI}{\bkmkend AAAAAAAMVI}
00475   {\cf20 // the first test in the current test case.}\par
{\bkmkstart AAAAAAAMVJ}{\bkmkend AAAAAAAMVJ}
00476   {\cf17 static} {\cf18 bool} HasSameFixtureClass();\par
{\bkmkstart AAAAAAAMVK}{\bkmkend AAAAAAAMVK}
00477 \par
{\bkmkstart AAAAAAAMVL}{\bkmkend AAAAAAAMVL}
00478   {\cf20 // Runs the test after the test fixture has been set up.}\par
{\bkmkstart AAAAAAAMVM}{\bkmkend AAAAAAAMVM}
00479   {\cf20 //}\par
{\bkmkstart AAAAAAAMVN}{\bkmkend AAAAAAAMVN}
00480   {\cf20 // A sub-class must implement this to define the test logic.}\par
{\bkmkstart AAAAAAAMVO}{\bkmkend AAAAAAAMVO}
00481   {\cf20 //}\par
{\bkmkstart AAAAAAAMVP}{\bkmkend AAAAAAAMVP}
00482   {\cf20 // DO NOT OVERRIDE THIS FUNCTION DIRECTLY IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAMVQ}{\bkmkend AAAAAAAMVQ}
00483   {\cf20 // Instead, use the TEST or TEST_F macro.}\par
{\bkmkstart AAAAAAAMVR}{\bkmkend AAAAAAAMVR}
00484   {\cf17 virtual} {\cf18 void} TestBody() = 0;\par
{\bkmkstart AAAAAAAMVS}{\bkmkend AAAAAAAMVS}
00485 \par
{\bkmkstart AAAAAAAMVT}{\bkmkend AAAAAAAMVT}
00486   {\cf20 // Sets up, executes, and tears down the test.}\par
{\bkmkstart AAAAAAAMVU}{\bkmkend AAAAAAAMVU}
00487   {\cf18 void} Run();\par
{\bkmkstart AAAAAAAMVV}{\bkmkend AAAAAAAMVV}
00488 \par
{\bkmkstart AAAAAAAMVW}{\bkmkend AAAAAAAMVW}
00489   {\cf20 // Deletes self.  We deliberately pick an unusual name for this}\par
{\bkmkstart AAAAAAAMVX}{\bkmkend AAAAAAAMVX}
00490   {\cf20 // internal method to avoid clashing with names used in user TESTs.}\par
{\bkmkstart AAAAAAAMVY}{\bkmkend AAAAAAAMVY}
00491   {\cf18 void} DeleteSelf_() \{ {\cf17 delete} {\cf17 this}; \}\par
{\bkmkstart AAAAAAAMVZ}{\bkmkend AAAAAAAMVZ}
00492 \par
{\bkmkstart AAAAAAAMWA}{\bkmkend AAAAAAAMWA}
00493   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMWB" }{}}{\fldrslt {\cs37\ul\cf2 internal::scoped_ptr< GTEST_FLAG_SAVER_ >}}}
 gtest_flag_saver_;\par
{\bkmkstart AAAAAAAMWC}{\bkmkend AAAAAAAMWC}
00494 \par
{\bkmkstart AAAAAAAMWD}{\bkmkend AAAAAAAMWD}
00495   {\cf20 // Often a user misspells SetUp() as Setup() and spends a long time}\par
{\bkmkstart AAAAAAAMWE}{\bkmkend AAAAAAAMWE}
00496   {\cf20 // wondering why it is never called by Google Test.  The declaration of}\par
{\bkmkstart AAAAAAAMWF}{\bkmkend AAAAAAAMWF}
00497   {\cf20 // the following method is solely for catching such an error at}\par
{\bkmkstart AAAAAAAMWG}{\bkmkend AAAAAAAMWG}
00498   {\cf20 // compile time:}\par
{\bkmkstart AAAAAAAMWH}{\bkmkend AAAAAAAMWH}
00499   {\cf20 //}\par
{\bkmkstart AAAAAAAMWI}{\bkmkend AAAAAAAMWI}
00500   {\cf20 //   - The return type is deliberately chosen to be not void, so it}\par
{\bkmkstart AAAAAAAMWJ}{\bkmkend AAAAAAAMWJ}
00501   {\cf20 //   will be a conflict if void Setup() is declared in the user's}\par
{\bkmkstart AAAAAAAMWK}{\bkmkend AAAAAAAMWK}
00502   {\cf20 //   test fixture.}\par
{\bkmkstart AAAAAAAMWL}{\bkmkend AAAAAAAMWL}
00503   {\cf20 //}\par
{\bkmkstart AAAAAAAMWM}{\bkmkend AAAAAAAMWM}
00504   {\cf20 //   - This method is private, so it will be another compiler error}\par
{\bkmkstart AAAAAAAMWN}{\bkmkend AAAAAAAMWN}
00505   {\cf20 //   if the method is called from the user's test fixture.}\par
{\bkmkstart AAAAAAAMWO}{\bkmkend AAAAAAAMWO}
00506   {\cf20 //}\par
{\bkmkstart AAAAAAAMWP}{\bkmkend AAAAAAAMWP}
00507   {\cf20 // DO NOT OVERRIDE THIS FUNCTION.}\par
{\bkmkstart AAAAAAAMWQ}{\bkmkend AAAAAAAMWQ}
00508   {\cf20 //}\par
{\bkmkstart AAAAAAAMWR}{\bkmkend AAAAAAAMWR}
00509   {\cf20 // If you see an error about overriding the following function or}\par
{\bkmkstart AAAAAAAMWS}{\bkmkend AAAAAAAMWS}
00510   {\cf20 // about it being private, you have mis-spelled SetUp() as Setup().}\par
{\bkmkstart AAAAAAAMWT}{\bkmkend AAAAAAAMWT}
00511   {\cf17 struct }Setup_should_be_spelled_SetUp \{\};\par
{\bkmkstart AAAAAAAMWU}{\bkmkend AAAAAAAMWU}
00512   {\cf17 virtual} Setup_should_be_spelled_SetUp* Setup() \{ {\cf19 return} NULL; \}\par
{\bkmkstart AAAAAAAMWV}{\bkmkend AAAAAAAMWV}
00513 \par
{\bkmkstart AAAAAAAMWW}{\bkmkend AAAAAAAMWW}
00514   {\cf20 // We disallow copying Tests.}\par
{\bkmkstart AAAAAAAMWX}{\bkmkend AAAAAAAMWX}
00515   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(Test);\par
{\bkmkstart AAAAAAAMWY}{\bkmkend AAAAAAAMWY}
00516 \};\par
{\bkmkstart AAAAAAAMWZ}{\bkmkend AAAAAAAMWZ}
00517 \par
{\bkmkstart AAAAAAAMXA}{\bkmkend AAAAAAAMXA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 00518}}}
 {\cf17 typedef} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXC" }{}}{\fldrslt {\cs37\ul\cf2 internal::TimeInMillis}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
;\par
{\bkmkstart AAAAAAAMXD}{\bkmkend AAAAAAAMXD}
00519 \par
{\bkmkstart AAAAAAAMXE}{\bkmkend AAAAAAAMXE}
00520 {\cf20 // A copyable object representing a user specified test property which can be}\par
{\bkmkstart AAAAAAAMXF}{\bkmkend AAAAAAAMXF}
00521 {\cf20 // output as a key/value string pair.}\par
{\bkmkstart AAAAAAAMXG}{\bkmkend AAAAAAAMXG}
00522 {\cf20 //}\par
{\bkmkstart AAAAAAAMXH}{\bkmkend AAAAAAAMXH}
00523 {\cf20 // Don't inherit from TestProperty as its destructor is not virtual.}\par
{\bkmkstart AAAAAAAMXI}{\bkmkend AAAAAAAMXI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXJ" }{}}{\fldrslt {\cs37\ul\cf2 00524}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXJ" }{}}{\fldrslt {\cs37\ul\cf2 TestProperty}}}
 \{\par
{\bkmkstart AAAAAAAMXK}{\bkmkend AAAAAAAMXK}
00525  {\cf17 public}:\par
{\bkmkstart AAAAAAAMXL}{\bkmkend AAAAAAAMXL}
00526   {\cf20 // C'tor.  TestProperty does NOT have a default constructor.}\par
{\bkmkstart AAAAAAAMXM}{\bkmkend AAAAAAAMXM}
00527   {\cf20 // Always use this constructor (with parameters) to create a}\par
{\bkmkstart AAAAAAAMXN}{\bkmkend AAAAAAAMXN}
00528   {\cf20 // TestProperty object.}\par
{\bkmkstart AAAAAAAMXO}{\bkmkend AAAAAAAMXO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXP" }{}}{\fldrslt {\cs37\ul\cf2 00529}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXP" }{}}{\fldrslt {\cs37\ul\cf2 TestProperty}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& a_key, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& a_value) :\par
{\bkmkstart AAAAAAAMXQ}{\bkmkend AAAAAAAMXQ}
00530     key_(a_key), value_(a_value) \{\par
{\bkmkstart AAAAAAAMXR}{\bkmkend AAAAAAAMXR}
00531   \}\par
{\bkmkstart AAAAAAAMXS}{\bkmkend AAAAAAAMXS}
00532 \par
{\bkmkstart AAAAAAAMXT}{\bkmkend AAAAAAAMXT}
00533   {\cf20 // Gets the user supplied key.}\par
{\bkmkstart AAAAAAAMXU}{\bkmkend AAAAAAAMXU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXV" }{}}{\fldrslt {\cs37\ul\cf2 00534}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXV" }{}}{\fldrslt {\cs37\ul\cf2 key}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAAMXW}{\bkmkend AAAAAAAMXW}
00535     {\cf19 return} key_.c_str();\par
{\bkmkstart AAAAAAAMXX}{\bkmkend AAAAAAAMXX}
00536   \}\par
{\bkmkstart AAAAAAAMXY}{\bkmkend AAAAAAAMXY}
00537 \par
{\bkmkstart AAAAAAAMXZ}{\bkmkend AAAAAAAMXZ}
00538   {\cf20 // Gets the user supplied value.}\par
{\bkmkstart AAAAAAAMYA}{\bkmkend AAAAAAAMYA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYB" }{}}{\fldrslt {\cs37\ul\cf2 00539}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYB" }{}}{\fldrslt {\cs37\ul\cf2 value}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAAMYC}{\bkmkend AAAAAAAMYC}
00540     {\cf19 return} value_.c_str();\par
{\bkmkstart AAAAAAAMYD}{\bkmkend AAAAAAAMYD}
00541   \}\par
{\bkmkstart AAAAAAAMYE}{\bkmkend AAAAAAAMYE}
00542 \par
{\bkmkstart AAAAAAAMYF}{\bkmkend AAAAAAAMYF}
00543   {\cf20 // Sets a new value, overriding the one supplied in the constructor.}\par
{\bkmkstart AAAAAAAMYG}{\bkmkend AAAAAAAMYG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYH" }{}}{\fldrslt {\cs37\ul\cf2 00544}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYH" }{}}{\fldrslt {\cs37\ul\cf2 SetValue}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& new_value) \{\par
{\bkmkstart AAAAAAAMYI}{\bkmkend AAAAAAAMYI}
00545     value_ = new_value;\par
{\bkmkstart AAAAAAAMYJ}{\bkmkend AAAAAAAMYJ}
00546   \}\par
{\bkmkstart AAAAAAAMYK}{\bkmkend AAAAAAAMYK}
00547 \par
{\bkmkstart AAAAAAAMYL}{\bkmkend AAAAAAAMYL}
00548  {\cf17 private}:\par
{\bkmkstart AAAAAAAMYM}{\bkmkend AAAAAAAMYM}
00549   {\cf20 // The key supplied by the user.}\par
{\bkmkstart AAAAAAAMYN}{\bkmkend AAAAAAAMYN}
00550   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 key_;\par
{\bkmkstart AAAAAAAMYO}{\bkmkend AAAAAAAMYO}
00551   {\cf20 // The value supplied by the user.}\par
{\bkmkstart AAAAAAAMYP}{\bkmkend AAAAAAAMYP}
00552   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 value_;\par
{\bkmkstart AAAAAAAMYQ}{\bkmkend AAAAAAAMYQ}
00553 \};\par
{\bkmkstart AAAAAAAMYR}{\bkmkend AAAAAAAMYR}
00554 \par
{\bkmkstart AAAAAAAMYS}{\bkmkend AAAAAAAMYS}
00555 {\cf20 // The result of a single Test.  This includes a list of}\par
{\bkmkstart AAAAAAAMYT}{\bkmkend AAAAAAAMYT}
00556 {\cf20 // TestPartResults, a list of TestProperties, a count of how many}\par
{\bkmkstart AAAAAAAMYU}{\bkmkend AAAAAAAMYU}
00557 {\cf20 // death tests there are in the Test, and how much time it took to run}\par
{\bkmkstart AAAAAAAMYV}{\bkmkend AAAAAAAMYV}
00558 {\cf20 // the Test.}\par
{\bkmkstart AAAAAAAMYW}{\bkmkend AAAAAAAMYW}
00559 {\cf20 //}\par
{\bkmkstart AAAAAAAMYX}{\bkmkend AAAAAAAMYX}
00560 {\cf20 // TestResult is not copyable.}\par
{\bkmkstart AAAAAAAMYY}{\bkmkend AAAAAAAMYY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYZ" }{}}{\fldrslt {\cs37\ul\cf2 00561}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYZ" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
 \{\par
{\bkmkstart AAAAAAAMZA}{\bkmkend AAAAAAAMZA}
00562  {\cf17 public}:\par
{\bkmkstart AAAAAAAMZB}{\bkmkend AAAAAAAMZB}
00563   {\cf20 // Creates an empty TestResult.}\par
{\bkmkstart AAAAAAAMZC}{\bkmkend AAAAAAAMZC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZD" }{}}{\fldrslt {\cs37\ul\cf2 00564}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZD" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
();\par
{\bkmkstart AAAAAAAMZE}{\bkmkend AAAAAAAMZE}
00565 \par
{\bkmkstart AAAAAAAMZF}{\bkmkend AAAAAAAMZF}
00566   {\cf20 // D'tor.  Do not inherit from TestResult.}\par
{\bkmkstart AAAAAAAMZG}{\bkmkend AAAAAAAMZG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZH" }{}}{\fldrslt {\cs37\ul\cf2 00567}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZH" }{}}{\fldrslt {\cs37\ul\cf2 ~TestResult}}}
();\par
{\bkmkstart AAAAAAAMZI}{\bkmkend AAAAAAAMZI}
00568 \par
{\bkmkstart AAAAAAAMZJ}{\bkmkend AAAAAAAMZJ}
00569   {\cf20 // Gets the number of all test parts.  This is the sum of the number}\par
{\bkmkstart AAAAAAAMZK}{\bkmkend AAAAAAAMZK}
00570   {\cf20 // of successful test parts and the number of failed test parts.}\par
{\bkmkstart AAAAAAAMZL}{\bkmkend AAAAAAAMZL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZM" }{}}{\fldrslt {\cs37\ul\cf2 00571}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZM" }{}}{\fldrslt {\cs37\ul\cf2 total_part_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAAMZN}{\bkmkend AAAAAAAMZN}
00572 \par
{\bkmkstart AAAAAAAMZO}{\bkmkend AAAAAAAMZO}
00573   {\cf20 // Returns the number of the test properties.}\par
{\bkmkstart AAAAAAAMZP}{\bkmkend AAAAAAAMZP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZQ" }{}}{\fldrslt {\cs37\ul\cf2 00574}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZQ" }{}}{\fldrslt {\cs37\ul\cf2 test_property_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAAMZR}{\bkmkend AAAAAAAMZR}
00575 \par
{\bkmkstart AAAAAAAMZS}{\bkmkend AAAAAAAMZS}
00576   {\cf20 // Returns true iff the test passed (i.e. no test part failed).}\par
{\bkmkstart AAAAAAAMZT}{\bkmkend AAAAAAAMZT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZU" }{}}{\fldrslt {\cs37\ul\cf2 00577}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZU" }{}}{\fldrslt {\cs37\ul\cf2 Passed}}}
(){\cf17  const }\{ {\cf19 return} !Failed(); \}\par
{\bkmkstart AAAAAAAMZV}{\bkmkend AAAAAAAMZV}
00578 \par
{\bkmkstart AAAAAAAMZW}{\bkmkend AAAAAAAMZW}
00579   {\cf20 // Returns true iff the test failed.}\par
{\bkmkstart AAAAAAAMZX}{\bkmkend AAAAAAAMZX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZY" }{}}{\fldrslt {\cs37\ul\cf2 00580}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMZY" }{}}{\fldrslt {\cs37\ul\cf2 Failed}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAAMZZ}{\bkmkend AAAAAAAMZZ}
00581 \par
{\bkmkstart AAAAAAANAA}{\bkmkend AAAAAAANAA}
00582   {\cf20 // Returns true iff the test fatally failed.}\par
{\bkmkstart AAAAAAANAB}{\bkmkend AAAAAAANAB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAC" }{}}{\fldrslt {\cs37\ul\cf2 00583}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAC" }{}}{\fldrslt {\cs37\ul\cf2 HasFatalFailure}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANAD}{\bkmkend AAAAAAANAD}
00584 \par
{\bkmkstart AAAAAAANAE}{\bkmkend AAAAAAANAE}
00585   {\cf20 // Returns true iff the test has a non-fatal failure.}\par
{\bkmkstart AAAAAAANAF}{\bkmkend AAAAAAANAF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAG" }{}}{\fldrslt {\cs37\ul\cf2 00586}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAG" }{}}{\fldrslt {\cs37\ul\cf2 HasNonfatalFailure}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANAH}{\bkmkend AAAAAAANAH}
00587 \par
{\bkmkstart AAAAAAANAI}{\bkmkend AAAAAAANAI}
00588   {\cf20 // Returns the elapsed time, in milliseconds.}\par
{\bkmkstart AAAAAAANAJ}{\bkmkend AAAAAAANAJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAK" }{}}{\fldrslt {\cs37\ul\cf2 00589}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAK" }{}}{\fldrslt {\cs37\ul\cf2 elapsed_time}}}
(){\cf17  const }\{ {\cf19 return} elapsed_time_; \}\par
{\bkmkstart AAAAAAANAL}{\bkmkend AAAAAAANAL}
00590 \par
{\bkmkstart AAAAAAANAM}{\bkmkend AAAAAAANAM}
00591   {\cf20 // Returns the i-th test part result among all the results. i can range from 0}\par
{\bkmkstart AAAAAAANAN}{\bkmkend AAAAAAANAN}
00592   {\cf20 // to total_part_count() - 1. If i is not in that range, aborts the program.}\par
{\bkmkstart AAAAAAANAO}{\bkmkend AAAAAAANAO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAP" }{}}{\fldrslt {\cs37\ul\cf2 00593}}}
   {\cf17 const} TestPartResult& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAP" }{}}{\fldrslt {\cs37\ul\cf2 GetTestPartResult}}}
({\cf18 int} i) {\cf17 const};\par
{\bkmkstart AAAAAAANAQ}{\bkmkend AAAAAAANAQ}
00594 \par
{\bkmkstart AAAAAAANAR}{\bkmkend AAAAAAANAR}
00595   {\cf20 // Returns the i-th test property. i can range from 0 to}\par
{\bkmkstart AAAAAAANAS}{\bkmkend AAAAAAANAS}
00596   {\cf20 // test_property_count() - 1. If i is not in that range, aborts the}\par
{\bkmkstart AAAAAAANAT}{\bkmkend AAAAAAANAT}
00597   {\cf20 // program.}\par
{\bkmkstart AAAAAAANAU}{\bkmkend AAAAAAANAU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAV" }{}}{\fldrslt {\cs37\ul\cf2 00598}}}
   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXJ" }{}}{\fldrslt {\cs37\ul\cf2 TestProperty}}}
& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAV" }{}}{\fldrslt {\cs37\ul\cf2 GetTestProperty}}}
({\cf18 int} i) {\cf17 const};\par
{\bkmkstart AAAAAAANAW}{\bkmkend AAAAAAANAW}
00599 \par
{\bkmkstart AAAAAAANAX}{\bkmkend AAAAAAANAX}
00600  {\cf17 private}:\par
{\bkmkstart AAAAAAANAY}{\bkmkend AAAAAAANAY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANAZ" }{}}{\fldrslt {\cs37\ul\cf2 00601}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
;\par
{\bkmkstart AAAAAAANBA}{\bkmkend AAAAAAANBA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBB" }{}}{\fldrslt {\cs37\ul\cf2 00602}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
;\par
{\bkmkstart AAAAAAANBD}{\bkmkend AAAAAAANBD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBE" }{}}{\fldrslt {\cs37\ul\cf2 00603}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
;\par
{\bkmkstart AAAAAAANBG}{\bkmkend AAAAAAANBG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBH" }{}}{\fldrslt {\cs37\ul\cf2 00604}}}
   {\cf17 friend} {\cf17 class }internal::DefaultGlobalTestPartResultReporter;\par
{\bkmkstart AAAAAAANBI}{\bkmkend AAAAAAANBI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBJ" }{}}{\fldrslt {\cs37\ul\cf2 00605}}}
   {\cf17 friend} {\cf17 class }internal::ExecDeathTest;\par
{\bkmkstart AAAAAAANBK}{\bkmkend AAAAAAANBK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBL" }{}}{\fldrslt {\cs37\ul\cf2 00606}}}
   {\cf17 friend} {\cf17 class }internal::TestResultAccessor;\par
{\bkmkstart AAAAAAANBM}{\bkmkend AAAAAAANBM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBN" }{}}{\fldrslt {\cs37\ul\cf2 00607}}}
   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
{\bkmkstart AAAAAAANBO}{\bkmkend AAAAAAANBO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBP" }{}}{\fldrslt {\cs37\ul\cf2 00608}}}
   {\cf17 friend} {\cf17 class }internal::WindowsDeathTest;\par
{\bkmkstart AAAAAAANBQ}{\bkmkend AAAAAAANBQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBR" }{}}{\fldrslt {\cs37\ul\cf2 00609}}}
   {\cf17 friend} {\cf17 class }internal::FuchsiaDeathTest;\par
{\bkmkstart AAAAAAANBS}{\bkmkend AAAAAAANBS}
00610 \par
{\bkmkstart AAAAAAANBT}{\bkmkend AAAAAAANBT}
00611   {\cf20 // Gets the vector of TestPartResults.}\par
{\bkmkstart AAAAAAANBU}{\bkmkend AAAAAAANBU}
00612   {\cf17 const} std::vector<TestPartResult>& test_part_results(){\cf17  const }\{\par
{\bkmkstart AAAAAAANBV}{\bkmkend AAAAAAANBV}
00613     {\cf19 return} test_part_results_;\par
{\bkmkstart AAAAAAANBW}{\bkmkend AAAAAAANBW}
00614   \}\par
{\bkmkstart AAAAAAANBX}{\bkmkend AAAAAAANBX}
00615 \par
{\bkmkstart AAAAAAANBY}{\bkmkend AAAAAAANBY}
00616   {\cf20 // Gets the vector of TestProperties.}\par
{\bkmkstart AAAAAAANBZ}{\bkmkend AAAAAAANBZ}
00617   {\cf17 const} std::vector<TestProperty>& test_properties(){\cf17  const }\{\par
{\bkmkstart AAAAAAANCA}{\bkmkend AAAAAAANCA}
00618     {\cf19 return} test_properties_;\par
{\bkmkstart AAAAAAANCB}{\bkmkend AAAAAAANCB}
00619   \}\par
{\bkmkstart AAAAAAANCC}{\bkmkend AAAAAAANCC}
00620 \par
{\bkmkstart AAAAAAANCD}{\bkmkend AAAAAAANCD}
00621   {\cf20 // Sets the elapsed time.}\par
{\bkmkstart AAAAAAANCE}{\bkmkend AAAAAAANCE}
00622   {\cf18 void} set_elapsed_time({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 elapsed) \{ elapsed_time_ = elapsed; \}\par
{\bkmkstart AAAAAAANCF}{\bkmkend AAAAAAANCF}
00623 \par
{\bkmkstart AAAAAAANCG}{\bkmkend AAAAAAANCG}
00624   {\cf20 // Adds a test property to the list. The property is validated and may add}\par
{\bkmkstart AAAAAAANCH}{\bkmkend AAAAAAANCH}
00625   {\cf20 // a non-fatal failure if invalid (e.g., if it conflicts with reserved}\par
{\bkmkstart AAAAAAANCI}{\bkmkend AAAAAAANCI}
00626   {\cf20 // key names). If a property is already recorded for the same key, the}\par
{\bkmkstart AAAAAAANCJ}{\bkmkend AAAAAAANCJ}
00627   {\cf20 // value will be updated, rather than storing multiple values for the same}\par
{\bkmkstart AAAAAAANCK}{\bkmkend AAAAAAANCK}
00628   {\cf20 // key.  xml_element specifies the element for which the property is being}\par
{\bkmkstart AAAAAAANCL}{\bkmkend AAAAAAANCL}
00629   {\cf20 // recorded and is used for validation.}\par
{\bkmkstart AAAAAAANCM}{\bkmkend AAAAAAANCM}
00630   {\cf18 void} RecordProperty({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& xml_element,\par
{\bkmkstart AAAAAAANCN}{\bkmkend AAAAAAANCN}
00631                       {\cf17 const} TestProperty& test_property);\par
{\bkmkstart AAAAAAANCO}{\bkmkend AAAAAAANCO}
00632 \par
{\bkmkstart AAAAAAANCP}{\bkmkend AAAAAAANCP}
00633   {\cf20 // Adds a failure if the key is a reserved attribute of Google Test}\par
{\bkmkstart AAAAAAANCQ}{\bkmkend AAAAAAANCQ}
00634   {\cf20 // testcase tags.  Returns true if the property is valid.}\par
{\bkmkstart AAAAAAANCR}{\bkmkend AAAAAAANCR}
00635   {\cf20 // FIXME: Validate attribute names are legal and human readable.}\par
{\bkmkstart AAAAAAANCS}{\bkmkend AAAAAAANCS}
00636   {\cf17 static} {\cf18 bool} ValidateTestProperty({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& xml_element,\par
{\bkmkstart AAAAAAANCT}{\bkmkend AAAAAAANCT}
00637                                    {\cf17 const} TestProperty& test_property);\par
{\bkmkstart AAAAAAANCU}{\bkmkend AAAAAAANCU}
00638 \par
{\bkmkstart AAAAAAANCV}{\bkmkend AAAAAAANCV}
00639   {\cf20 // Adds a test part result to the list.}\par
{\bkmkstart AAAAAAANCW}{\bkmkend AAAAAAANCW}
00640   {\cf18 void} AddTestPartResult({\cf17 const} TestPartResult& test_part_result);\par
{\bkmkstart AAAAAAANCX}{\bkmkend AAAAAAANCX}
00641 \par
{\bkmkstart AAAAAAANCY}{\bkmkend AAAAAAANCY}
00642   {\cf20 // Returns the death test count.}\par
{\bkmkstart AAAAAAANCZ}{\bkmkend AAAAAAANCZ}
00643   {\cf18 int} death_test_count(){\cf17  const }\{ {\cf19 return} death_test_count_; \}\par
{\bkmkstart AAAAAAANDA}{\bkmkend AAAAAAANDA}
00644 \par
{\bkmkstart AAAAAAANDB}{\bkmkend AAAAAAANDB}
00645   {\cf20 // Increments the death test count, returning the new count.}\par
{\bkmkstart AAAAAAANDC}{\bkmkend AAAAAAANDC}
00646   {\cf18 int} increment_death_test_count() \{ {\cf19 return} ++death_test_count_; \}\par
{\bkmkstart AAAAAAANDD}{\bkmkend AAAAAAANDD}
00647 \par
{\bkmkstart AAAAAAANDE}{\bkmkend AAAAAAANDE}
00648   {\cf20 // Clears the test part results.}\par
{\bkmkstart AAAAAAANDF}{\bkmkend AAAAAAANDF}
00649   {\cf18 void} ClearTestPartResults();\par
{\bkmkstart AAAAAAANDG}{\bkmkend AAAAAAANDG}
00650 \par
{\bkmkstart AAAAAAANDH}{\bkmkend AAAAAAANDH}
00651   {\cf20 // Clears the object.}\par
{\bkmkstart AAAAAAANDI}{\bkmkend AAAAAAANDI}
00652   {\cf18 void} Clear();\par
{\bkmkstart AAAAAAANDJ}{\bkmkend AAAAAAANDJ}
00653 \par
{\bkmkstart AAAAAAANDK}{\bkmkend AAAAAAANDK}
00654   {\cf20 // Protects mutable state of the property vector and of owned}\par
{\bkmkstart AAAAAAANDL}{\bkmkend AAAAAAANDL}
00655   {\cf20 // properties, whose values may be updated.}\par
{\bkmkstart AAAAAAANDM}{\bkmkend AAAAAAANDM}
00656   internal::Mutex test_properites_mutex_;\par
{\bkmkstart AAAAAAANDN}{\bkmkend AAAAAAANDN}
00657 \par
{\bkmkstart AAAAAAANDO}{\bkmkend AAAAAAANDO}
00658   {\cf20 // The vector of TestPartResults}\par
{\bkmkstart AAAAAAANDP}{\bkmkend AAAAAAANDP}
00659   std::vector<TestPartResult> test_part_results_;\par
{\bkmkstart AAAAAAANDQ}{\bkmkend AAAAAAANDQ}
00660   {\cf20 // The vector of TestProperties}\par
{\bkmkstart AAAAAAANDR}{\bkmkend AAAAAAANDR}
00661   std::vector<TestProperty> test_properties_;\par
{\bkmkstart AAAAAAANDS}{\bkmkend AAAAAAANDS}
00662   {\cf20 // Running count of death tests.}\par
{\bkmkstart AAAAAAANDT}{\bkmkend AAAAAAANDT}
00663   {\cf18 int} death_test_count_;\par
{\bkmkstart AAAAAAANDU}{\bkmkend AAAAAAANDU}
00664   {\cf20 // The elapsed time, in milliseconds.}\par
{\bkmkstart AAAAAAANDV}{\bkmkend AAAAAAANDV}
00665   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 elapsed_time_;\par
{\bkmkstart AAAAAAANDW}{\bkmkend AAAAAAANDW}
00666 \par
{\bkmkstart AAAAAAANDX}{\bkmkend AAAAAAANDX}
00667   {\cf20 // We disallow copying TestResult.}\par
{\bkmkstart AAAAAAANDY}{\bkmkend AAAAAAANDY}
00668   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(TestResult);\par
{\bkmkstart AAAAAAANDZ}{\bkmkend AAAAAAANDZ}
00669 \};  {\cf20 // class TestResult}\par
{\bkmkstart AAAAAAANEA}{\bkmkend AAAAAAANEA}
00670 \par
{\bkmkstart AAAAAAANEB}{\bkmkend AAAAAAANEB}
00671 {\cf20 // A TestInfo object stores the following information about a test:}\par
{\bkmkstart AAAAAAANEC}{\bkmkend AAAAAAANEC}
00672 {\cf20 //}\par
{\bkmkstart AAAAAAANED}{\bkmkend AAAAAAANED}
00673 {\cf20 //   Test case name}\par
{\bkmkstart AAAAAAANEE}{\bkmkend AAAAAAANEE}
00674 {\cf20 //   Test name}\par
{\bkmkstart AAAAAAANEF}{\bkmkend AAAAAAANEF}
00675 {\cf20 //   Whether the test should be run}\par
{\bkmkstart AAAAAAANEG}{\bkmkend AAAAAAANEG}
00676 {\cf20 //   A function pointer that creates the test object when invoked}\par
{\bkmkstart AAAAAAANEH}{\bkmkend AAAAAAANEH}
00677 {\cf20 //   Test result}\par
{\bkmkstart AAAAAAANEI}{\bkmkend AAAAAAANEI}
00678 {\cf20 //}\par
{\bkmkstart AAAAAAANEJ}{\bkmkend AAAAAAANEJ}
00679 {\cf20 // The constructor of TestInfo registers itself with the UnitTest}\par
{\bkmkstart AAAAAAANEK}{\bkmkend AAAAAAANEK}
00680 {\cf20 // singleton such that the RUN_ALL_TESTS() macro knows which tests to}\par
{\bkmkstart AAAAAAANEL}{\bkmkend AAAAAAANEL}
00681 {\cf20 // run.}\par
{\bkmkstart AAAAAAANEM}{\bkmkend AAAAAAANEM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 00682}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
 \{\par
{\bkmkstart AAAAAAANEN}{\bkmkend AAAAAAANEN}
00683  {\cf17 public}:\par
{\bkmkstart AAAAAAANEO}{\bkmkend AAAAAAANEO}
00684   {\cf20 // Destructs a TestInfo object.  This function is not virtual, so}\par
{\bkmkstart AAAAAAANEP}{\bkmkend AAAAAAANEP}
00685   {\cf20 // don't inherit from TestInfo.}\par
{\bkmkstart AAAAAAANEQ}{\bkmkend AAAAAAANEQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANER" }{}}{\fldrslt {\cs37\ul\cf2 00686}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANER" }{}}{\fldrslt {\cs37\ul\cf2 ~TestInfo}}}
();\par
{\bkmkstart AAAAAAANES}{\bkmkend AAAAAAANES}
00687 \par
{\bkmkstart AAAAAAANET}{\bkmkend AAAAAAANET}
00688   {\cf20 // Returns the test case name.}\par
{\bkmkstart AAAAAAANEU}{\bkmkend AAAAAAANEU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANEV" }{}}{\fldrslt {\cs37\ul\cf2 00689}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANEV" }{}}{\fldrslt {\cs37\ul\cf2 test_case_name}}}
(){\cf17  const }\{ {\cf19 return} test_case_name_.c_str(); \}\par
{\bkmkstart AAAAAAANEW}{\bkmkend AAAAAAANEW}
00690 \par
{\bkmkstart AAAAAAANEX}{\bkmkend AAAAAAANEX}
00691   {\cf20 // Returns the test name.}\par
{\bkmkstart AAAAAAANEY}{\bkmkend AAAAAAANEY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANEZ" }{}}{\fldrslt {\cs37\ul\cf2 00692}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANEZ" }{}}{\fldrslt {\cs37\ul\cf2 name}}}
(){\cf17  const }\{ {\cf19 return} name_.c_str(); \}\par
{\bkmkstart AAAAAAANFA}{\bkmkend AAAAAAANFA}
00693 \par
{\bkmkstart AAAAAAANFB}{\bkmkend AAAAAAANFB}
00694   {\cf20 // Returns the name of the parameter type, or NULL if this is not a typed}\par
{\bkmkstart AAAAAAANFC}{\bkmkend AAAAAAANFC}
00695   {\cf20 // or a type-parameterized test.}\par
{\bkmkstart AAAAAAANFD}{\bkmkend AAAAAAANFD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFE" }{}}{\fldrslt {\cs37\ul\cf2 00696}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFE" }{}}{\fldrslt {\cs37\ul\cf2 type_param}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANFF}{\bkmkend AAAAAAANFF}
00697     {\cf19 if} (type_param_.get() != NULL)\par
{\bkmkstart AAAAAAANFG}{\bkmkend AAAAAAANFG}
00698       {\cf19 return} type_param_->c_str();\par
{\bkmkstart AAAAAAANFH}{\bkmkend AAAAAAANFH}
00699     {\cf19 return} NULL;\par
{\bkmkstart AAAAAAANFI}{\bkmkend AAAAAAANFI}
00700   \}\par
{\bkmkstart AAAAAAANFJ}{\bkmkend AAAAAAANFJ}
00701 \par
{\bkmkstart AAAAAAANFK}{\bkmkend AAAAAAANFK}
00702   {\cf20 // Returns the text representation of the value parameter, or NULL if this}\par
{\bkmkstart AAAAAAANFL}{\bkmkend AAAAAAANFL}
00703   {\cf20 // is not a value-parameterized test.}\par
{\bkmkstart AAAAAAANFM}{\bkmkend AAAAAAANFM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFN" }{}}{\fldrslt {\cs37\ul\cf2 00704}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFN" }{}}{\fldrslt {\cs37\ul\cf2 value_param}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANFO}{\bkmkend AAAAAAANFO}
00705     {\cf19 if} (value_param_.get() != NULL)\par
{\bkmkstart AAAAAAANFP}{\bkmkend AAAAAAANFP}
00706       {\cf19 return} value_param_->c_str();\par
{\bkmkstart AAAAAAANFQ}{\bkmkend AAAAAAANFQ}
00707     {\cf19 return} NULL;\par
{\bkmkstart AAAAAAANFR}{\bkmkend AAAAAAANFR}
00708   \}\par
{\bkmkstart AAAAAAANFS}{\bkmkend AAAAAAANFS}
00709 \par
{\bkmkstart AAAAAAANFT}{\bkmkend AAAAAAANFT}
00710   {\cf20 // Returns the file name where this test is defined.}\par
{\bkmkstart AAAAAAANFU}{\bkmkend AAAAAAANFU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFV" }{}}{\fldrslt {\cs37\ul\cf2 00711}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFV" }{}}{\fldrslt {\cs37\ul\cf2 file}}}
(){\cf17  const }\{ {\cf19 return} location_.file.c_str(); \}\par
{\bkmkstart AAAAAAANFW}{\bkmkend AAAAAAANFW}
00712 \par
{\bkmkstart AAAAAAANFX}{\bkmkend AAAAAAANFX}
00713   {\cf20 // Returns the line where this test is defined.}\par
{\bkmkstart AAAAAAANFY}{\bkmkend AAAAAAANFY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFZ" }{}}{\fldrslt {\cs37\ul\cf2 00714}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANFZ" }{}}{\fldrslt {\cs37\ul\cf2 line}}}
(){\cf17  const }\{ {\cf19 return} location_.line; \}\par
{\bkmkstart AAAAAAANGA}{\bkmkend AAAAAAANGA}
00715 \par
{\bkmkstart AAAAAAANGB}{\bkmkend AAAAAAANGB}
00716   {\cf20 // Return true if this test should not be run because it's in another shard.}\par
{\bkmkstart AAAAAAANGC}{\bkmkend AAAAAAANGC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANGD" }{}}{\fldrslt {\cs37\ul\cf2 00717}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANGD" }{}}{\fldrslt {\cs37\ul\cf2 is_in_another_shard}}}
(){\cf17  const }\{ {\cf19 return} is_in_another_shard_; \}\par
{\bkmkstart AAAAAAANGE}{\bkmkend AAAAAAANGE}
00718 \par
{\bkmkstart AAAAAAANGF}{\bkmkend AAAAAAANGF}
00719   {\cf20 // Returns true if this test should run, that is if the test is not}\par
{\bkmkstart AAAAAAANGG}{\bkmkend AAAAAAANGG}
00720   {\cf20 // disabled (or it is disabled but the also_run_disabled_tests flag has}\par
{\bkmkstart AAAAAAANGH}{\bkmkend AAAAAAANGH}
00721   {\cf20 // been specified) and its full name matches the user-specified filter.}\par
{\bkmkstart AAAAAAANGI}{\bkmkend AAAAAAANGI}
00722   {\cf20 //}\par
{\bkmkstart AAAAAAANGJ}{\bkmkend AAAAAAANGJ}
00723   {\cf20 // Google Test allows the user to filter the tests by their full names.}\par
{\bkmkstart AAAAAAANGK}{\bkmkend AAAAAAANGK}
00724   {\cf20 // The full name of a test Bar in test case Foo is defined as}\par
{\bkmkstart AAAAAAANGL}{\bkmkend AAAAAAANGL}
00725   {\cf20 // "Foo.Bar".  Only the tests that match the filter will run.}\par
{\bkmkstart AAAAAAANGM}{\bkmkend AAAAAAANGM}
00726   {\cf20 //}\par
{\bkmkstart AAAAAAANGN}{\bkmkend AAAAAAANGN}
00727   {\cf20 // A filter is a colon-separated list of glob (not regex) patterns,}\par
{\bkmkstart AAAAAAANGO}{\bkmkend AAAAAAANGO}
00728   {\cf20 // optionally followed by a '-' and a colon-separated list of}\par
{\bkmkstart AAAAAAANGP}{\bkmkend AAAAAAANGP}
00729   {\cf20 // negative patterns (tests to exclude).  A test is run if it}\par
{\bkmkstart AAAAAAANGQ}{\bkmkend AAAAAAANGQ}
00730   {\cf20 // matches one of the positive patterns and does not match any of}\par
{\bkmkstart AAAAAAANGR}{\bkmkend AAAAAAANGR}
00731   {\cf20 // the negative patterns.}\par
{\bkmkstart AAAAAAANGS}{\bkmkend AAAAAAANGS}
00732   {\cf20 //}\par
{\bkmkstart AAAAAAANGT}{\bkmkend AAAAAAANGT}
00733   {\cf20 // For example, *A*:Foo.* is a filter that matches any string that}\par
{\bkmkstart AAAAAAANGU}{\bkmkend AAAAAAANGU}
00734   {\cf20 // contains the character 'A' or starts with "Foo.".}\par
{\bkmkstart AAAAAAANGV}{\bkmkend AAAAAAANGV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANGW" }{}}{\fldrslt {\cs37\ul\cf2 00735}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANGW" }{}}{\fldrslt {\cs37\ul\cf2 should_run}}}
(){\cf17  const }\{ {\cf19 return} should_run_; \}\par
{\bkmkstart AAAAAAANGX}{\bkmkend AAAAAAANGX}
00736 \par
{\bkmkstart AAAAAAANGY}{\bkmkend AAAAAAANGY}
00737   {\cf20 // Returns true iff this test will appear in the XML report.}\par
{\bkmkstart AAAAAAANGZ}{\bkmkend AAAAAAANGZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHA" }{}}{\fldrslt {\cs37\ul\cf2 00738}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHA" }{}}{\fldrslt {\cs37\ul\cf2 is_reportable}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANHB}{\bkmkend AAAAAAANHB}
00739     {\cf20 // The XML report includes tests matching the filter, excluding those}\par
{\bkmkstart AAAAAAANHC}{\bkmkend AAAAAAANHC}
00740     {\cf20 // run in other shards.}\par
{\bkmkstart AAAAAAANHD}{\bkmkend AAAAAAANHD}
00741     {\cf19 return} matches_filter_ && !is_in_another_shard_;\par
{\bkmkstart AAAAAAANHE}{\bkmkend AAAAAAANHE}
00742   \}\par
{\bkmkstart AAAAAAANHF}{\bkmkend AAAAAAANHF}
00743 \par
{\bkmkstart AAAAAAANHG}{\bkmkend AAAAAAANHG}
00744   {\cf20 // Returns the result of the test.}\par
{\bkmkstart AAAAAAANHH}{\bkmkend AAAAAAANHH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHI" }{}}{\fldrslt {\cs37\ul\cf2 00745}}}
   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYZ" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHI" }{}}{\fldrslt {\cs37\ul\cf2 result}}}
(){\cf17  const }\{ {\cf19 return} &result_; \}\par
{\bkmkstart AAAAAAANHJ}{\bkmkend AAAAAAANHJ}
00746 \par
{\bkmkstart AAAAAAANHK}{\bkmkend AAAAAAANHK}
00747  {\cf17 private}:\par
{\bkmkstart AAAAAAANHL}{\bkmkend AAAAAAANHL}
00748 {\cf21 #if GTEST_HAS_DEATH_TEST}\par
{\bkmkstart AAAAAAANHM}{\bkmkend AAAAAAANHM}
00749   {\cf17 friend} {\cf17 class }internal::DefaultDeathTestFactory;\par
{\bkmkstart AAAAAAANHN}{\bkmkend AAAAAAANHN}
00750 {\cf21 #endif  }{\cf20 // GTEST_HAS_DEATH_TEST}\par
{\bkmkstart AAAAAAANHO}{\bkmkend AAAAAAANHO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHP" }{}}{\fldrslt {\cs37\ul\cf2 00751}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
;\par
{\bkmkstart AAAAAAANHQ}{\bkmkend AAAAAAANHQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHR" }{}}{\fldrslt {\cs37\ul\cf2 00752}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
;\par
{\bkmkstart AAAAAAANHS}{\bkmkend AAAAAAANHS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHT" }{}}{\fldrslt {\cs37\ul\cf2 00753}}}
   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
{\bkmkstart AAAAAAANHU}{\bkmkend AAAAAAANHU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHV" }{}}{\fldrslt {\cs37\ul\cf2 00754}}}
   {\cf17 friend} {\cf17 class }internal::StreamingListenerTest;\par
{\bkmkstart AAAAAAANHW}{\bkmkend AAAAAAANHW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHX" }{}}{\fldrslt {\cs37\ul\cf2 00755}}}
   {\cf17 friend} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANHY" }{}}{\fldrslt {\cs37\ul\cf2 internal::MakeAndRegisterTestInfo}}}
(\par
{\bkmkstart AAAAAAANHZ}{\bkmkend AAAAAAANHZ}
00756       {\cf17 const} {\cf18 char}* test_case_name,\par
{\bkmkstart AAAAAAANIA}{\bkmkend AAAAAAANIA}
00757       {\cf17 const} {\cf18 char}* name,\par
{\bkmkstart AAAAAAANIB}{\bkmkend AAAAAAANIB}
00758       {\cf17 const} {\cf18 char}* type_param,\par
{\bkmkstart AAAAAAANIC}{\bkmkend AAAAAAANIC}
00759       {\cf17 const} {\cf18 char}* value_param,\par
{\bkmkstart AAAAAAANID}{\bkmkend AAAAAAANID}
00760       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIE" }{}}{\fldrslt {\cs37\ul\cf2 internal::CodeLocation}}}
 code_location,\par
{\bkmkstart AAAAAAANIF}{\bkmkend AAAAAAANIF}
00761       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIG" }{}}{\fldrslt {\cs37\ul\cf2 internal::TypeId}}}
 fixture_class_id,\par
{\bkmkstart AAAAAAANIH}{\bkmkend AAAAAAANIH}
00762       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSM" }{}}{\fldrslt {\cs37\ul\cf2 Test::SetUpTestCaseFunc}}}
 set_up_tc,\par
{\bkmkstart AAAAAAANII}{\bkmkend AAAAAAANII}
00763       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSP" }{}}{\fldrslt {\cs37\ul\cf2 Test::TearDownTestCaseFunc}}}
 tear_down_tc,\par
{\bkmkstart AAAAAAANIJ}{\bkmkend AAAAAAANIJ}
00764       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIK" }{}}{\fldrslt {\cs37\ul\cf2 internal::TestFactoryBase}}}
* factory);\par
{\bkmkstart AAAAAAANIL}{\bkmkend AAAAAAANIL}
00765 \par
{\bkmkstart AAAAAAANIM}{\bkmkend AAAAAAANIM}
00766   {\cf20 // Constructs a TestInfo object. The newly constructed instance assumes}\par
{\bkmkstart AAAAAAANIN}{\bkmkend AAAAAAANIN}
00767   {\cf20 // ownership of the factory object.}\par
{\bkmkstart AAAAAAANIO}{\bkmkend AAAAAAANIO}
00768   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& test_case_name,\par
{\bkmkstart AAAAAAANIP}{\bkmkend AAAAAAANIP}
00769            {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& name,\par
{\bkmkstart AAAAAAANIQ}{\bkmkend AAAAAAANIQ}
00770            {\cf17 const} {\cf18 char}* a_type_param,   {\cf20 // NULL if not a type-parameterized test}\par
{\bkmkstart AAAAAAANIR}{\bkmkend AAAAAAANIR}
00771            {\cf17 const} {\cf18 char}* a_value_param,  {\cf20 // NULL if not a value-parameterized test}\par
{\bkmkstart AAAAAAANIS}{\bkmkend AAAAAAANIS}
00772            {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIE" }{}}{\fldrslt {\cs37\ul\cf2 internal::CodeLocation}}}
 a_code_location,\par
{\bkmkstart AAAAAAANIT}{\bkmkend AAAAAAANIT}
00773            {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIG" }{}}{\fldrslt {\cs37\ul\cf2 internal::TypeId}}}
 fixture_class_id,\par
{\bkmkstart AAAAAAANIU}{\bkmkend AAAAAAANIU}
00774            {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIK" }{}}{\fldrslt {\cs37\ul\cf2 internal::TestFactoryBase}}}
* factory);\par
{\bkmkstart AAAAAAANIV}{\bkmkend AAAAAAANIV}
00775 \par
{\bkmkstart AAAAAAANIW}{\bkmkend AAAAAAANIW}
00776   {\cf20 // Increments the number of death tests encountered in this test so}\par
{\bkmkstart AAAAAAANIX}{\bkmkend AAAAAAANIX}
00777   {\cf20 // far.}\par
{\bkmkstart AAAAAAANIY}{\bkmkend AAAAAAANIY}
00778   {\cf18 int} increment_death_test_count() \{\par
{\bkmkstart AAAAAAANIZ}{\bkmkend AAAAAAANIZ}
00779     {\cf19 return} result_.increment_death_test_count();\par
{\bkmkstart AAAAAAANJA}{\bkmkend AAAAAAANJA}
00780   \}\par
{\bkmkstart AAAAAAANJB}{\bkmkend AAAAAAANJB}
00781 \par
{\bkmkstart AAAAAAANJC}{\bkmkend AAAAAAANJC}
00782   {\cf20 // Creates the test object, runs it, records its result, and then}\par
{\bkmkstart AAAAAAANJD}{\bkmkend AAAAAAANJD}
00783   {\cf20 // deletes it.}\par
{\bkmkstart AAAAAAANJE}{\bkmkend AAAAAAANJE}
00784   {\cf18 void} Run();\par
{\bkmkstart AAAAAAANJF}{\bkmkend AAAAAAANJF}
00785 \par
{\bkmkstart AAAAAAANJG}{\bkmkend AAAAAAANJG}
00786   {\cf17 static} {\cf18 void} ClearTestResult({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
* test_info) \{\par
{\bkmkstart AAAAAAANJH}{\bkmkend AAAAAAANJH}
00787     test_info->result_.Clear();\par
{\bkmkstart AAAAAAANJI}{\bkmkend AAAAAAANJI}
00788   \}\par
{\bkmkstart AAAAAAANJJ}{\bkmkend AAAAAAANJJ}
00789 \par
{\bkmkstart AAAAAAANJK}{\bkmkend AAAAAAANJK}
00790   {\cf20 // These fields are immutable properties of the test.}\par
{\bkmkstart AAAAAAANJL}{\bkmkend AAAAAAANJL}
00791   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 test_case_name_;     {\cf20 // Test case name}\par
{\bkmkstart AAAAAAANJM}{\bkmkend AAAAAAANJM}
00792   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 name_;               {\cf20 // Test name}\par
{\bkmkstart AAAAAAANJN}{\bkmkend AAAAAAANJN}
00793   {\cf20 // Name of the parameter type, or NULL if this is not a typed or a}\par
{\bkmkstart AAAAAAANJO}{\bkmkend AAAAAAANJO}
00794   {\cf20 // type-parameterized test.}\par
{\bkmkstart AAAAAAANJP}{\bkmkend AAAAAAANJP}
00795   {\cf17 const} internal::scoped_ptr<const ::std::string> type_param_;\par
{\bkmkstart AAAAAAANJQ}{\bkmkend AAAAAAANJQ}
00796   {\cf20 // Text representation of the value parameter, or NULL if this is not a}\par
{\bkmkstart AAAAAAANJR}{\bkmkend AAAAAAANJR}
00797   {\cf20 // value-parameterized test.}\par
{\bkmkstart AAAAAAANJS}{\bkmkend AAAAAAANJS}
00798   {\cf17 const} internal::scoped_ptr<const ::std::string> value_param_;\par
{\bkmkstart AAAAAAANJT}{\bkmkend AAAAAAANJT}
00799   internal::CodeLocation location_;\par
{\bkmkstart AAAAAAANJU}{\bkmkend AAAAAAANJU}
00800   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANIG" }{}}{\fldrslt {\cs37\ul\cf2 internal::TypeId}}}
 fixture_class_id_;   {\cf20 // ID of the test fixture class}\par
{\bkmkstart AAAAAAANJV}{\bkmkend AAAAAAANJV}
00801   {\cf18 bool} should_run_;                 {\cf20 // True iff this test should run}\par
{\bkmkstart AAAAAAANJW}{\bkmkend AAAAAAANJW}
00802   {\cf18 bool} is_disabled_;                {\cf20 // True iff this test is disabled}\par
{\bkmkstart AAAAAAANJX}{\bkmkend AAAAAAANJX}
00803   {\cf18 bool} matches_filter_;             {\cf20 // True if this test matches the}\par
{\bkmkstart AAAAAAANJY}{\bkmkend AAAAAAANJY}
00804                                     {\cf20 // user-specified filter.}\par
{\bkmkstart AAAAAAANJZ}{\bkmkend AAAAAAANJZ}
00805   {\cf18 bool} is_in_another_shard_;        {\cf20 // Will be run in another shard.}\par
{\bkmkstart AAAAAAANKA}{\bkmkend AAAAAAANKA}
00806   internal::TestFactoryBase* {\cf17 const} factory_;  {\cf20 // The factory that creates}\par
{\bkmkstart AAAAAAANKB}{\bkmkend AAAAAAANKB}
00807                                               {\cf20 // the test object}\par
{\bkmkstart AAAAAAANKC}{\bkmkend AAAAAAANKC}
00808 \par
{\bkmkstart AAAAAAANKD}{\bkmkend AAAAAAANKD}
00809   {\cf20 // This field is mutable and needs to be reset before running the}\par
{\bkmkstart AAAAAAANKE}{\bkmkend AAAAAAANKE}
00810   {\cf20 // test for the second time.}\par
{\bkmkstart AAAAAAANKF}{\bkmkend AAAAAAANKF}
00811   TestResult result_;\par
{\bkmkstart AAAAAAANKG}{\bkmkend AAAAAAANKG}
00812 \par
{\bkmkstart AAAAAAANKH}{\bkmkend AAAAAAANKH}
00813   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(TestInfo);\par
{\bkmkstart AAAAAAANKI}{\bkmkend AAAAAAANKI}
00814 \};\par
{\bkmkstart AAAAAAANKJ}{\bkmkend AAAAAAANKJ}
00815 \par
{\bkmkstart AAAAAAANKK}{\bkmkend AAAAAAANKK}
00816 {\cf20 // A test case, which consists of a vector of TestInfos.}\par
{\bkmkstart AAAAAAANKL}{\bkmkend AAAAAAANKL}
00817 {\cf20 //}\par
{\bkmkstart AAAAAAANKM}{\bkmkend AAAAAAANKM}
00818 {\cf20 // TestCase is not copyable.}\par
{\bkmkstart AAAAAAANKN}{\bkmkend AAAAAAANKN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 00819}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
 \{\par
{\bkmkstart AAAAAAANKO}{\bkmkend AAAAAAANKO}
00820  {\cf17 public}:\par
{\bkmkstart AAAAAAANKP}{\bkmkend AAAAAAANKP}
00821   {\cf20 // Creates a TestCase with the given name.}\par
{\bkmkstart AAAAAAANKQ}{\bkmkend AAAAAAANKQ}
00822   {\cf20 //}\par
{\bkmkstart AAAAAAANKR}{\bkmkend AAAAAAANKR}
00823   {\cf20 // TestCase does NOT have a default constructor.  Always use this}\par
{\bkmkstart AAAAAAANKS}{\bkmkend AAAAAAANKS}
00824   {\cf20 // constructor to create a TestCase object.}\par
{\bkmkstart AAAAAAANKT}{\bkmkend AAAAAAANKT}
00825   {\cf20 //}\par
{\bkmkstart AAAAAAANKU}{\bkmkend AAAAAAANKU}
00826   {\cf20 // Arguments:}\par
{\bkmkstart AAAAAAANKV}{\bkmkend AAAAAAANKV}
00827   {\cf20 //}\par
{\bkmkstart AAAAAAANKW}{\bkmkend AAAAAAANKW}
00828   {\cf20 //   name:         name of the test case}\par
{\bkmkstart AAAAAAANKX}{\bkmkend AAAAAAANKX}
00829   {\cf20 //   a_type_param: the name of the test's type parameter, or NULL if}\par
{\bkmkstart AAAAAAANKY}{\bkmkend AAAAAAANKY}
00830   {\cf20 //                 this is not a type-parameterized test.}\par
{\bkmkstart AAAAAAANKZ}{\bkmkend AAAAAAANKZ}
00831   {\cf20 //   set_up_tc:    pointer to the function that sets up the test case}\par
{\bkmkstart AAAAAAANLA}{\bkmkend AAAAAAANLA}
00832   {\cf20 //   tear_down_tc: pointer to the function that tears down the test case}\par
{\bkmkstart AAAAAAANLB}{\bkmkend AAAAAAANLB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLC" }{}}{\fldrslt {\cs37\ul\cf2 00833}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
({\cf17 const} {\cf18 char}* name, {\cf17 const} {\cf18 char}* a_type_param,\par
{\bkmkstart AAAAAAANLD}{\bkmkend AAAAAAANLD}
00834            {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSM" }{}}{\fldrslt {\cs37\ul\cf2 Test::SetUpTestCaseFunc}}}
 set_up_tc,\par
{\bkmkstart AAAAAAANLE}{\bkmkend AAAAAAANLE}
00835            {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSP" }{}}{\fldrslt {\cs37\ul\cf2 Test::TearDownTestCaseFunc}}}
 tear_down_tc);\par
{\bkmkstart AAAAAAANLF}{\bkmkend AAAAAAANLF}
00836 \par
{\bkmkstart AAAAAAANLG}{\bkmkend AAAAAAANLG}
00837   {\cf20 // Destructor of TestCase.}\par
{\bkmkstart AAAAAAANLH}{\bkmkend AAAAAAANLH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLI" }{}}{\fldrslt {\cs37\ul\cf2 00838}}}
   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLI" }{}}{\fldrslt {\cs37\ul\cf2 ~TestCase}}}
();\par
{\bkmkstart AAAAAAANLJ}{\bkmkend AAAAAAANLJ}
00839 \par
{\bkmkstart AAAAAAANLK}{\bkmkend AAAAAAANLK}
00840   {\cf20 // Gets the name of the TestCase.}\par
{\bkmkstart AAAAAAANLL}{\bkmkend AAAAAAANLL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLM" }{}}{\fldrslt {\cs37\ul\cf2 00841}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLM" }{}}{\fldrslt {\cs37\ul\cf2 name}}}
(){\cf17  const }\{ {\cf19 return} name_.c_str(); \}\par
{\bkmkstart AAAAAAANLN}{\bkmkend AAAAAAANLN}
00842 \par
{\bkmkstart AAAAAAANLO}{\bkmkend AAAAAAANLO}
00843   {\cf20 // Returns the name of the parameter type, or NULL if this is not a}\par
{\bkmkstart AAAAAAANLP}{\bkmkend AAAAAAANLP}
00844   {\cf20 // type-parameterized test case.}\par
{\bkmkstart AAAAAAANLQ}{\bkmkend AAAAAAANLQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLR" }{}}{\fldrslt {\cs37\ul\cf2 00845}}}
   {\cf17 const} {\cf18 char}* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLR" }{}}{\fldrslt {\cs37\ul\cf2 type_param}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANLS}{\bkmkend AAAAAAANLS}
00846     {\cf19 if} (type_param_.get() != NULL)\par
{\bkmkstart AAAAAAANLT}{\bkmkend AAAAAAANLT}
00847       {\cf19 return} type_param_->c_str();\par
{\bkmkstart AAAAAAANLU}{\bkmkend AAAAAAANLU}
00848     {\cf19 return} NULL;\par
{\bkmkstart AAAAAAANLV}{\bkmkend AAAAAAANLV}
00849   \}\par
{\bkmkstart AAAAAAANLW}{\bkmkend AAAAAAANLW}
00850 \par
{\bkmkstart AAAAAAANLX}{\bkmkend AAAAAAANLX}
00851   {\cf20 // Returns true if any test in this test case should run.}\par
{\bkmkstart AAAAAAANLY}{\bkmkend AAAAAAANLY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLZ" }{}}{\fldrslt {\cs37\ul\cf2 00852}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANLZ" }{}}{\fldrslt {\cs37\ul\cf2 should_run}}}
(){\cf17  const }\{ {\cf19 return} should_run_; \}\par
{\bkmkstart AAAAAAANMA}{\bkmkend AAAAAAANMA}
00853 \par
{\bkmkstart AAAAAAANMB}{\bkmkend AAAAAAANMB}
00854   {\cf20 // Gets the number of successful tests in this test case.}\par
{\bkmkstart AAAAAAANMC}{\bkmkend AAAAAAANMC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMD" }{}}{\fldrslt {\cs37\ul\cf2 00855}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMD" }{}}{\fldrslt {\cs37\ul\cf2 successful_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANME}{\bkmkend AAAAAAANME}
00856 \par
{\bkmkstart AAAAAAANMF}{\bkmkend AAAAAAANMF}
00857   {\cf20 // Gets the number of failed tests in this test case.}\par
{\bkmkstart AAAAAAANMG}{\bkmkend AAAAAAANMG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMH" }{}}{\fldrslt {\cs37\ul\cf2 00858}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMH" }{}}{\fldrslt {\cs37\ul\cf2 failed_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANMI}{\bkmkend AAAAAAANMI}
00859 \par
{\bkmkstart AAAAAAANMJ}{\bkmkend AAAAAAANMJ}
00860   {\cf20 // Gets the number of disabled tests that will be reported in the XML report.}\par
{\bkmkstart AAAAAAANMK}{\bkmkend AAAAAAANMK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANML" }{}}{\fldrslt {\cs37\ul\cf2 00861}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANML" }{}}{\fldrslt {\cs37\ul\cf2 reportable_disabled_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANMM}{\bkmkend AAAAAAANMM}
00862 \par
{\bkmkstart AAAAAAANMN}{\bkmkend AAAAAAANMN}
00863   {\cf20 // Gets the number of disabled tests in this test case.}\par
{\bkmkstart AAAAAAANMO}{\bkmkend AAAAAAANMO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMP" }{}}{\fldrslt {\cs37\ul\cf2 00864}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMP" }{}}{\fldrslt {\cs37\ul\cf2 disabled_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANMQ}{\bkmkend AAAAAAANMQ}
00865 \par
{\bkmkstart AAAAAAANMR}{\bkmkend AAAAAAANMR}
00866   {\cf20 // Gets the number of tests to be printed in the XML report.}\par
{\bkmkstart AAAAAAANMS}{\bkmkend AAAAAAANMS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMT" }{}}{\fldrslt {\cs37\ul\cf2 00867}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMT" }{}}{\fldrslt {\cs37\ul\cf2 reportable_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANMU}{\bkmkend AAAAAAANMU}
00868 \par
{\bkmkstart AAAAAAANMV}{\bkmkend AAAAAAANMV}
00869   {\cf20 // Get the number of tests in this test case that should run.}\par
{\bkmkstart AAAAAAANMW}{\bkmkend AAAAAAANMW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMX" }{}}{\fldrslt {\cs37\ul\cf2 00870}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANMX" }{}}{\fldrslt {\cs37\ul\cf2 test_to_run_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANMY}{\bkmkend AAAAAAANMY}
00871 \par
{\bkmkstart AAAAAAANMZ}{\bkmkend AAAAAAANMZ}
00872   {\cf20 // Gets the number of all tests in this test case.}\par
{\bkmkstart AAAAAAANNA}{\bkmkend AAAAAAANNA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNB" }{}}{\fldrslt {\cs37\ul\cf2 00873}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNB" }{}}{\fldrslt {\cs37\ul\cf2 total_test_count}}}
() {\cf17 const};\par
{\bkmkstart AAAAAAANNC}{\bkmkend AAAAAAANNC}
00874 \par
{\bkmkstart AAAAAAANND}{\bkmkend AAAAAAANND}
00875   {\cf20 // Returns true iff the test case passed.}\par
{\bkmkstart AAAAAAANNE}{\bkmkend AAAAAAANNE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNF" }{}}{\fldrslt {\cs37\ul\cf2 00876}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNF" }{}}{\fldrslt {\cs37\ul\cf2 Passed}}}
(){\cf17  const }\{ {\cf19 return} !Failed(); \}\par
{\bkmkstart AAAAAAANNG}{\bkmkend AAAAAAANNG}
00877 \par
{\bkmkstart AAAAAAANNH}{\bkmkend AAAAAAANNH}
00878   {\cf20 // Returns true iff the test case failed.}\par
{\bkmkstart AAAAAAANNI}{\bkmkend AAAAAAANNI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNJ" }{}}{\fldrslt {\cs37\ul\cf2 00879}}}
   {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNJ" }{}}{\fldrslt {\cs37\ul\cf2 Failed}}}
(){\cf17  const }\{ {\cf19 return} failed_test_count() > 0; \}\par
{\bkmkstart AAAAAAANNK}{\bkmkend AAAAAAANNK}
00880 \par
{\bkmkstart AAAAAAANNL}{\bkmkend AAAAAAANNL}
00881   {\cf20 // Returns the elapsed time, in milliseconds.}\par
{\bkmkstart AAAAAAANNM}{\bkmkend AAAAAAANNM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNN" }{}}{\fldrslt {\cs37\ul\cf2 00882}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNN" }{}}{\fldrslt {\cs37\ul\cf2 elapsed_time}}}
(){\cf17  const }\{ {\cf19 return} elapsed_time_; \}\par
{\bkmkstart AAAAAAANNO}{\bkmkend AAAAAAANNO}
00883 \par
{\bkmkstart AAAAAAANNP}{\bkmkend AAAAAAANNP}
00884   {\cf20 // Returns the i-th test among all the tests. i can range from 0 to}\par
{\bkmkstart AAAAAAANNQ}{\bkmkend AAAAAAANNQ}
00885   {\cf20 // total_test_count() - 1. If i is not in that range, returns NULL.}\par
{\bkmkstart AAAAAAANNR}{\bkmkend AAAAAAANNR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNS" }{}}{\fldrslt {\cs37\ul\cf2 00886}}}
   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNS" }{}}{\fldrslt {\cs37\ul\cf2 GetTestInfo}}}
({\cf18 int} i) {\cf17 const};\par
{\bkmkstart AAAAAAANNT}{\bkmkend AAAAAAANNT}
00887 \par
{\bkmkstart AAAAAAANNU}{\bkmkend AAAAAAANNU}
00888   {\cf20 // Returns the TestResult that holds test properties recorded during}\par
{\bkmkstart AAAAAAANNV}{\bkmkend AAAAAAANNV}
00889   {\cf20 // execution of SetUpTestCase and TearDownTestCase.}\par
{\bkmkstart AAAAAAANNW}{\bkmkend AAAAAAANNW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNX" }{}}{\fldrslt {\cs37\ul\cf2 00890}}}
   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYZ" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANNX" }{}}{\fldrslt {\cs37\ul\cf2 ad_hoc_test_result}}}
(){\cf17  const }\{ {\cf19 return} ad_hoc_test_result_; \}\par
{\bkmkstart AAAAAAANNY}{\bkmkend AAAAAAANNY}
00891 \par
{\bkmkstart AAAAAAANNZ}{\bkmkend AAAAAAANNZ}
00892  {\cf17 private}:\par
{\bkmkstart AAAAAAANOA}{\bkmkend AAAAAAANOA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANOB" }{}}{\fldrslt {\cs37\ul\cf2 00893}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
;\par
{\bkmkstart AAAAAAANOC}{\bkmkend AAAAAAANOC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANOD" }{}}{\fldrslt {\cs37\ul\cf2 00894}}}
   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
{\bkmkstart AAAAAAANOE}{\bkmkend AAAAAAANOE}
00895 \par
{\bkmkstart AAAAAAANOF}{\bkmkend AAAAAAANOF}
00896   {\cf20 // Gets the (mutable) vector of TestInfos in this TestCase.}\par
{\bkmkstart AAAAAAANOG}{\bkmkend AAAAAAANOG}
00897   std::vector<TestInfo*>& test_info_list() \{ {\cf19 return} test_info_list_; \}\par
{\bkmkstart AAAAAAANOH}{\bkmkend AAAAAAANOH}
00898 \par
{\bkmkstart AAAAAAANOI}{\bkmkend AAAAAAANOI}
00899   {\cf20 // Gets the (immutable) vector of TestInfos in this TestCase.}\par
{\bkmkstart AAAAAAANOJ}{\bkmkend AAAAAAANOJ}
00900   {\cf17 const} std::vector<TestInfo*>& test_info_list(){\cf17  const }\{\par
{\bkmkstart AAAAAAANOK}{\bkmkend AAAAAAANOK}
00901     {\cf19 return} test_info_list_;\par
{\bkmkstart AAAAAAANOL}{\bkmkend AAAAAAANOL}
00902   \}\par
{\bkmkstart AAAAAAANOM}{\bkmkend AAAAAAANOM}
00903 \par
{\bkmkstart AAAAAAANON}{\bkmkend AAAAAAANON}
00904   {\cf20 // Returns the i-th test among all the tests. i can range from 0 to}\par
{\bkmkstart AAAAAAANOO}{\bkmkend AAAAAAANOO}
00905   {\cf20 // total_test_count() - 1. If i is not in that range, returns NULL.}\par
{\bkmkstart AAAAAAANOP}{\bkmkend AAAAAAANOP}
00906   TestInfo* GetMutableTestInfo({\cf18 int} i);\par
{\bkmkstart AAAAAAANOQ}{\bkmkend AAAAAAANOQ}
00907 \par
{\bkmkstart AAAAAAANOR}{\bkmkend AAAAAAANOR}
00908   {\cf20 // Sets the should_run member.}\par
{\bkmkstart AAAAAAANOS}{\bkmkend AAAAAAANOS}
00909   {\cf18 void} set_should_run({\cf18 bool} should) \{ should_run_ = should; \}\par
{\bkmkstart AAAAAAANOT}{\bkmkend AAAAAAANOT}
00910 \par
{\bkmkstart AAAAAAANOU}{\bkmkend AAAAAAANOU}
00911   {\cf20 // Adds a TestInfo to this test case.  Will delete the TestInfo upon}\par
{\bkmkstart AAAAAAANOV}{\bkmkend AAAAAAANOV}
00912   {\cf20 // destruction of the TestCase object.}\par
{\bkmkstart AAAAAAANOW}{\bkmkend AAAAAAANOW}
00913   {\cf18 void} AddTestInfo(TestInfo * test_info);\par
{\bkmkstart AAAAAAANOX}{\bkmkend AAAAAAANOX}
00914 \par
{\bkmkstart AAAAAAANOY}{\bkmkend AAAAAAANOY}
00915   {\cf20 // Clears the results of all tests in this test case.}\par
{\bkmkstart AAAAAAANOZ}{\bkmkend AAAAAAANOZ}
00916   {\cf18 void} ClearResult();\par
{\bkmkstart AAAAAAANPA}{\bkmkend AAAAAAANPA}
00917 \par
{\bkmkstart AAAAAAANPB}{\bkmkend AAAAAAANPB}
00918   {\cf20 // Clears the results of all tests in the given test case.}\par
{\bkmkstart AAAAAAANPC}{\bkmkend AAAAAAANPC}
00919   {\cf17 static} {\cf18 void} ClearTestCaseResult(TestCase* test_case) \{\par
{\bkmkstart AAAAAAANPD}{\bkmkend AAAAAAANPD}
00920     test_case->ClearResult();\par
{\bkmkstart AAAAAAANPE}{\bkmkend AAAAAAANPE}
00921   \}\par
{\bkmkstart AAAAAAANPF}{\bkmkend AAAAAAANPF}
00922 \par
{\bkmkstart AAAAAAANPG}{\bkmkend AAAAAAANPG}
00923   {\cf20 // Runs every test in this TestCase.}\par
{\bkmkstart AAAAAAANPH}{\bkmkend AAAAAAANPH}
00924   {\cf18 void} Run();\par
{\bkmkstart AAAAAAANPI}{\bkmkend AAAAAAANPI}
00925 \par
{\bkmkstart AAAAAAANPJ}{\bkmkend AAAAAAANPJ}
00926   {\cf20 // Runs SetUpTestCase() for this TestCase.  This wrapper is needed}\par
{\bkmkstart AAAAAAANPK}{\bkmkend AAAAAAANPK}
00927   {\cf20 // for catching exceptions thrown from SetUpTestCase().}\par
{\bkmkstart AAAAAAANPL}{\bkmkend AAAAAAANPL}
00928   {\cf18 void} RunSetUpTestCase() \{ (*set_up_tc_)(); \}\par
{\bkmkstart AAAAAAANPM}{\bkmkend AAAAAAANPM}
00929 \par
{\bkmkstart AAAAAAANPN}{\bkmkend AAAAAAANPN}
00930   {\cf20 // Runs TearDownTestCase() for this TestCase.  This wrapper is}\par
{\bkmkstart AAAAAAANPO}{\bkmkend AAAAAAANPO}
00931   {\cf20 // needed for catching exceptions thrown from TearDownTestCase().}\par
{\bkmkstart AAAAAAANPP}{\bkmkend AAAAAAANPP}
00932   {\cf18 void} RunTearDownTestCase() \{ (*tear_down_tc_)(); \}\par
{\bkmkstart AAAAAAANPQ}{\bkmkend AAAAAAANPQ}
00933 \par
{\bkmkstart AAAAAAANPR}{\bkmkend AAAAAAANPR}
00934   {\cf20 // Returns true iff test passed.}\par
{\bkmkstart AAAAAAANPS}{\bkmkend AAAAAAANPS}
00935   {\cf17 static} {\cf18 bool} TestPassed({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANPT}{\bkmkend AAAAAAANPT}
00936     {\cf19 return} test_info->should_run() && test_info->result()->Passed();\par
{\bkmkstart AAAAAAANPU}{\bkmkend AAAAAAANPU}
00937   \}\par
{\bkmkstart AAAAAAANPV}{\bkmkend AAAAAAANPV}
00938 \par
{\bkmkstart AAAAAAANPW}{\bkmkend AAAAAAANPW}
00939   {\cf20 // Returns true iff test failed.}\par
{\bkmkstart AAAAAAANPX}{\bkmkend AAAAAAANPX}
00940   {\cf17 static} {\cf18 bool} TestFailed({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANPY}{\bkmkend AAAAAAANPY}
00941     {\cf19 return} test_info->should_run() && test_info->result()->Failed();\par
{\bkmkstart AAAAAAANPZ}{\bkmkend AAAAAAANPZ}
00942   \}\par
{\bkmkstart AAAAAAANQA}{\bkmkend AAAAAAANQA}
00943 \par
{\bkmkstart AAAAAAANQB}{\bkmkend AAAAAAANQB}
00944   {\cf20 // Returns true iff the test is disabled and will be reported in the XML}\par
{\bkmkstart AAAAAAANQC}{\bkmkend AAAAAAANQC}
00945   {\cf20 // report.}\par
{\bkmkstart AAAAAAANQD}{\bkmkend AAAAAAANQD}
00946   {\cf17 static} {\cf18 bool} TestReportableDisabled({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANQE}{\bkmkend AAAAAAANQE}
00947     {\cf19 return} test_info->is_reportable() && test_info->is_disabled_;\par
{\bkmkstart AAAAAAANQF}{\bkmkend AAAAAAANQF}
00948   \}\par
{\bkmkstart AAAAAAANQG}{\bkmkend AAAAAAANQG}
00949 \par
{\bkmkstart AAAAAAANQH}{\bkmkend AAAAAAANQH}
00950   {\cf20 // Returns true iff test is disabled.}\par
{\bkmkstart AAAAAAANQI}{\bkmkend AAAAAAANQI}
00951   {\cf17 static} {\cf18 bool} TestDisabled({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANQJ}{\bkmkend AAAAAAANQJ}
00952     {\cf19 return} test_info->is_disabled_;\par
{\bkmkstart AAAAAAANQK}{\bkmkend AAAAAAANQK}
00953   \}\par
{\bkmkstart AAAAAAANQL}{\bkmkend AAAAAAANQL}
00954 \par
{\bkmkstart AAAAAAANQM}{\bkmkend AAAAAAANQM}
00955   {\cf20 // Returns true iff this test will appear in the XML report.}\par
{\bkmkstart AAAAAAANQN}{\bkmkend AAAAAAANQN}
00956   {\cf17 static} {\cf18 bool} TestReportable({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANQO}{\bkmkend AAAAAAANQO}
00957     {\cf19 return} test_info->is_reportable();\par
{\bkmkstart AAAAAAANQP}{\bkmkend AAAAAAANQP}
00958   \}\par
{\bkmkstart AAAAAAANQQ}{\bkmkend AAAAAAANQQ}
00959 \par
{\bkmkstart AAAAAAANQR}{\bkmkend AAAAAAANQR}
00960   {\cf20 // Returns true if the given test should run.}\par
{\bkmkstart AAAAAAANQS}{\bkmkend AAAAAAANQS}
00961   {\cf17 static} {\cf18 bool} ShouldRunTest({\cf17 const} TestInfo* test_info) \{\par
{\bkmkstart AAAAAAANQT}{\bkmkend AAAAAAANQT}
00962     {\cf19 return} test_info->should_run();\par
{\bkmkstart AAAAAAANQU}{\bkmkend AAAAAAANQU}
00963   \}\par
{\bkmkstart AAAAAAANQV}{\bkmkend AAAAAAANQV}
00964 \par
{\bkmkstart AAAAAAANQW}{\bkmkend AAAAAAANQW}
00965   {\cf20 // Shuffles the tests in this test case.}\par
{\bkmkstart AAAAAAANQX}{\bkmkend AAAAAAANQX}
00966   {\cf18 void} ShuffleTests(internal::Random* random);\par
{\bkmkstart AAAAAAANQY}{\bkmkend AAAAAAANQY}
00967 \par
{\bkmkstart AAAAAAANQZ}{\bkmkend AAAAAAANQZ}
00968   {\cf20 // Restores the test order to before the first shuffle.}\par
{\bkmkstart AAAAAAANRA}{\bkmkend AAAAAAANRA}
00969   {\cf18 void} UnshuffleTests();\par
{\bkmkstart AAAAAAANRB}{\bkmkend AAAAAAANRB}
00970 \par
{\bkmkstart AAAAAAANRC}{\bkmkend AAAAAAANRC}
00971   {\cf20 // Name of the test case.}\par
{\bkmkstart AAAAAAANRD}{\bkmkend AAAAAAANRD}
00972   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 name_;\par
{\bkmkstart AAAAAAANRE}{\bkmkend AAAAAAANRE}
00973   {\cf20 // Name of the parameter type, or NULL if this is not a typed or a}\par
{\bkmkstart AAAAAAANRF}{\bkmkend AAAAAAANRF}
00974   {\cf20 // type-parameterized test.}\par
{\bkmkstart AAAAAAANRG}{\bkmkend AAAAAAANRG}
00975   {\cf17 const} internal::scoped_ptr<const ::std::string> type_param_;\par
{\bkmkstart AAAAAAANRH}{\bkmkend AAAAAAANRH}
00976   {\cf20 // The vector of TestInfos in their original order.  It owns the}\par
{\bkmkstart AAAAAAANRI}{\bkmkend AAAAAAANRI}
00977   {\cf20 // elements in the vector.}\par
{\bkmkstart AAAAAAANRJ}{\bkmkend AAAAAAANRJ}
00978   std::vector<TestInfo*> test_info_list_;\par
{\bkmkstart AAAAAAANRK}{\bkmkend AAAAAAANRK}
00979   {\cf20 // Provides a level of indirection for the test list to allow easy}\par
{\bkmkstart AAAAAAANRL}{\bkmkend AAAAAAANRL}
00980   {\cf20 // shuffling and restoring the test order.  The i-th element in this}\par
{\bkmkstart AAAAAAANRM}{\bkmkend AAAAAAANRM}
00981   {\cf20 // vector is the index of the i-th test in the shuffled test list.}\par
{\bkmkstart AAAAAAANRN}{\bkmkend AAAAAAANRN}
00982   std::vector<int> test_indices_;\par
{\bkmkstart AAAAAAANRO}{\bkmkend AAAAAAANRO}
00983   {\cf20 // Pointer to the function that sets up the test case.}\par
{\bkmkstart AAAAAAANRP}{\bkmkend AAAAAAANRP}
00984   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSM" }{}}{\fldrslt {\cs37\ul\cf2 Test::SetUpTestCaseFunc}}}
 set_up_tc_;\par
{\bkmkstart AAAAAAANRQ}{\bkmkend AAAAAAANRQ}
00985   {\cf20 // Pointer to the function that tears down the test case.}\par
{\bkmkstart AAAAAAANRR}{\bkmkend AAAAAAANRR}
00986   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSP" }{}}{\fldrslt {\cs37\ul\cf2 Test::TearDownTestCaseFunc}}}
 tear_down_tc_;\par
{\bkmkstart AAAAAAANRS}{\bkmkend AAAAAAANRS}
00987   {\cf20 // True iff any test in this test case should run.}\par
{\bkmkstart AAAAAAANRT}{\bkmkend AAAAAAANRT}
00988   {\cf18 bool} should_run_;\par
{\bkmkstart AAAAAAANRU}{\bkmkend AAAAAAANRU}
00989   {\cf20 // Elapsed time, in milliseconds.}\par
{\bkmkstart AAAAAAANRV}{\bkmkend AAAAAAANRV}
00990   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 elapsed_time_;\par
{\bkmkstart AAAAAAANRW}{\bkmkend AAAAAAANRW}
00991   {\cf20 // Holds test properties recorded during execution of SetUpTestCase and}\par
{\bkmkstart AAAAAAANRX}{\bkmkend AAAAAAANRX}
00992   {\cf20 // TearDownTestCase.}\par
{\bkmkstart AAAAAAANRY}{\bkmkend AAAAAAANRY}
00993   TestResult ad_hoc_test_result_;\par
{\bkmkstart AAAAAAANRZ}{\bkmkend AAAAAAANRZ}
00994 \par
{\bkmkstart AAAAAAANSA}{\bkmkend AAAAAAANSA}
00995   {\cf20 // We disallow copying TestCases.}\par
{\bkmkstart AAAAAAANSB}{\bkmkend AAAAAAANSB}
00996   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(TestCase);\par
{\bkmkstart AAAAAAANSC}{\bkmkend AAAAAAANSC}
00997 \};\par
{\bkmkstart AAAAAAANSD}{\bkmkend AAAAAAANSD}
00998 \par
{\bkmkstart AAAAAAANSE}{\bkmkend AAAAAAANSE}
00999 {\cf20 // An Environment object is capable of setting up and tearing down an}\par
{\bkmkstart AAAAAAANSF}{\bkmkend AAAAAAANSF}
01000 {\cf20 // environment.  You should subclass this to define your own}\par
{\bkmkstart AAAAAAANSG}{\bkmkend AAAAAAANSG}
01001 {\cf20 // environment(s).}\par
{\bkmkstart AAAAAAANSH}{\bkmkend AAAAAAANSH}
01002 {\cf20 //}\par
{\bkmkstart AAAAAAANSI}{\bkmkend AAAAAAANSI}
01003 {\cf20 // An Environment object does the set-up and tear-down in virtual}\par
{\bkmkstart AAAAAAANSJ}{\bkmkend AAAAAAANSJ}
01004 {\cf20 // methods SetUp() and TearDown() instead of the constructor and the}\par
{\bkmkstart AAAAAAANSK}{\bkmkend AAAAAAANSK}
01005 {\cf20 // destructor, as:}\par
{\bkmkstart AAAAAAANSL}{\bkmkend AAAAAAANSL}
01006 {\cf20 //}\par
{\bkmkstart AAAAAAANSM}{\bkmkend AAAAAAANSM}
01007 {\cf20 //   1. You cannot safely throw from a destructor.  This is a problem}\par
{\bkmkstart AAAAAAANSN}{\bkmkend AAAAAAANSN}
01008 {\cf20 //      as in some cases Google Test is used where exceptions are enabled, and}\par
{\bkmkstart AAAAAAANSO}{\bkmkend AAAAAAANSO}
01009 {\cf20 //      we may want to implement ASSERT_* using exceptions where they are}\par
{\bkmkstart AAAAAAANSP}{\bkmkend AAAAAAANSP}
01010 {\cf20 //      available.}\par
{\bkmkstart AAAAAAANSQ}{\bkmkend AAAAAAANSQ}
01011 {\cf20 //   2. You cannot use ASSERT_* directly in a constructor or}\par
{\bkmkstart AAAAAAANSR}{\bkmkend AAAAAAANSR}
01012 {\cf20 //      destructor.}\par
{\bkmkstart AAAAAAANSS}{\bkmkend AAAAAAANSS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 01013}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
 \{\par
{\bkmkstart AAAAAAANSU}{\bkmkend AAAAAAANSU}
01014  {\cf17 public}:\par
{\bkmkstart AAAAAAANSV}{\bkmkend AAAAAAANSV}
01015   {\cf20 // The d'tor is virtual as we need to subclass Environment.}\par
{\bkmkstart AAAAAAANSW}{\bkmkend AAAAAAANSW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANSX" }{}}{\fldrslt {\cs37\ul\cf2 01016}}}
   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANSX" }{}}{\fldrslt {\cs37\ul\cf2 ~Environment}}}
() \{\}\par
{\bkmkstart AAAAAAANSY}{\bkmkend AAAAAAANSY}
01017 \par
{\bkmkstart AAAAAAANSZ}{\bkmkend AAAAAAANSZ}
01018   {\cf20 // Override this to define how to set up the environment.}\par
{\bkmkstart AAAAAAANTA}{\bkmkend AAAAAAANTA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANTB" }{}}{\fldrslt {\cs37\ul\cf2 01019}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANTB" }{}}{\fldrslt {\cs37\ul\cf2 SetUp}}}
() \{\}\par
{\bkmkstart AAAAAAANTC}{\bkmkend AAAAAAANTC}
01020 \par
{\bkmkstart AAAAAAANTD}{\bkmkend AAAAAAANTD}
01021   {\cf20 // Override this to define how to tear down the environment.}\par
{\bkmkstart AAAAAAANTE}{\bkmkend AAAAAAANTE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANTF" }{}}{\fldrslt {\cs37\ul\cf2 01022}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANTF" }{}}{\fldrslt {\cs37\ul\cf2 TearDown}}}
() \{\}\par
{\bkmkstart AAAAAAANTG}{\bkmkend AAAAAAANTG}
01023  {\cf17 private}:\par
{\bkmkstart AAAAAAANTH}{\bkmkend AAAAAAANTH}
01024   {\cf20 // If you see an error about overriding the following function or}\par
{\bkmkstart AAAAAAANTI}{\bkmkend AAAAAAANTI}
01025   {\cf20 // about it being private, you have mis-spelled SetUp() as Setup().}\par
{\bkmkstart AAAAAAANTJ}{\bkmkend AAAAAAANTJ}
01026   {\cf17 struct }Setup_should_be_spelled_SetUp \{\};\par
{\bkmkstart AAAAAAANTK}{\bkmkend AAAAAAANTK}
01027   {\cf17 virtual} Setup_should_be_spelled_SetUp* Setup() \{ {\cf19 return} NULL; \}\par
{\bkmkstart AAAAAAANTL}{\bkmkend AAAAAAANTL}
01028 \};\par
{\bkmkstart AAAAAAANTM}{\bkmkend AAAAAAANTM}
01029 \par
{\bkmkstart AAAAAAANTN}{\bkmkend AAAAAAANTN}
01030 {\cf21 #if GTEST_HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAANTO}{\bkmkend AAAAAAANTO}
01031 \par
{\bkmkstart AAAAAAANTP}{\bkmkend AAAAAAANTP}
01032 {\cf20 // Exception which can be thrown from TestEventListener::OnTestPartResult.}\par
{\bkmkstart AAAAAAANTQ}{\bkmkend AAAAAAANTQ}
01033 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionException\par
{\bkmkstart AAAAAAANTR}{\bkmkend AAAAAAANTR}
01034     : {\cf17 public} internal::GoogleTestFailureException \{\par
{\bkmkstart AAAAAAANTS}{\bkmkend AAAAAAANTS}
01035  {\cf17 public}:\par
{\bkmkstart AAAAAAANTT}{\bkmkend AAAAAAANTT}
01036   {\cf17 explicit} AssertionException({\cf17 const} TestPartResult& result)\par
{\bkmkstart AAAAAAANTU}{\bkmkend AAAAAAANTU}
01037       : GoogleTestFailureException(result) \{\}\par
{\bkmkstart AAAAAAANTV}{\bkmkend AAAAAAANTV}
01038 \};\par
{\bkmkstart AAAAAAANTW}{\bkmkend AAAAAAANTW}
01039 \par
{\bkmkstart AAAAAAANTX}{\bkmkend AAAAAAANTX}
01040 {\cf21 #endif  }{\cf20 // GTEST_HAS_EXCEPTIONS}\par
{\bkmkstart AAAAAAANTY}{\bkmkend AAAAAAANTY}
01041 \par
{\bkmkstart AAAAAAANTZ}{\bkmkend AAAAAAANTZ}
01042 {\cf20 // The interface for tracing execution of tests. The methods are organized in}\par
{\bkmkstart AAAAAAANUA}{\bkmkend AAAAAAANUA}
01043 {\cf20 // the order the corresponding events are fired.}\par
{\bkmkstart AAAAAAANUB}{\bkmkend AAAAAAANUB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 01044}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
 \{\par
{\bkmkstart AAAAAAANUD}{\bkmkend AAAAAAANUD}
01045  {\cf17 public}:\par
{\bkmkstart AAAAAAANUE}{\bkmkend AAAAAAANUE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUF" }{}}{\fldrslt {\cs37\ul\cf2 01046}}}
   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUF" }{}}{\fldrslt {\cs37\ul\cf2 ~TestEventListener}}}
() \{\}\par
{\bkmkstart AAAAAAANUG}{\bkmkend AAAAAAANUG}
01047 \par
{\bkmkstart AAAAAAANUH}{\bkmkend AAAAAAANUH}
01048   {\cf20 // Fired before any test activity starts.}\par
{\bkmkstart AAAAAAANUI}{\bkmkend AAAAAAANUI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUJ" }{}}{\fldrslt {\cs37\ul\cf2 01049}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUJ" }{}}{\fldrslt {\cs37\ul\cf2 OnTestProgramStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANUK}{\bkmkend AAAAAAANUK}
01050 \par
{\bkmkstart AAAAAAANUL}{\bkmkend AAAAAAANUL}
01051   {\cf20 // Fired before each iteration of tests starts.  There may be more than}\par
{\bkmkstart AAAAAAANUM}{\bkmkend AAAAAAANUM}
01052   {\cf20 // one iteration if GTEST_FLAG(repeat) is set. iteration is the iteration}\par
{\bkmkstart AAAAAAANUN}{\bkmkend AAAAAAANUN}
01053   {\cf20 // index, starting from 0.}\par
{\bkmkstart AAAAAAANUO}{\bkmkend AAAAAAANUO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUP" }{}}{\fldrslt {\cs37\ul\cf2 01054}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUP" }{}}{\fldrslt {\cs37\ul\cf2 OnTestIterationStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test,\par
{\bkmkstart AAAAAAANUQ}{\bkmkend AAAAAAANUQ}
01055                                     {\cf18 int} iteration) = 0;\par
{\bkmkstart AAAAAAANUR}{\bkmkend AAAAAAANUR}
01056 \par
{\bkmkstart AAAAAAANUS}{\bkmkend AAAAAAANUS}
01057   {\cf20 // Fired before environment set-up for each iteration of tests starts.}\par
{\bkmkstart AAAAAAANUT}{\bkmkend AAAAAAANUT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUU" }{}}{\fldrslt {\cs37\ul\cf2 01058}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUU" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsSetUpStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANUV}{\bkmkend AAAAAAANUV}
01059 \par
{\bkmkstart AAAAAAANUW}{\bkmkend AAAAAAANUW}
01060   {\cf20 // Fired after environment set-up for each iteration of tests ends.}\par
{\bkmkstart AAAAAAANUX}{\bkmkend AAAAAAANUX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUY" }{}}{\fldrslt {\cs37\ul\cf2 01061}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUY" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsSetUpEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANUZ}{\bkmkend AAAAAAANUZ}
01062 \par
{\bkmkstart AAAAAAANVA}{\bkmkend AAAAAAANVA}
01063   {\cf20 // Fired before the test case starts.}\par
{\bkmkstart AAAAAAANVB}{\bkmkend AAAAAAANVB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVC" }{}}{\fldrslt {\cs37\ul\cf2 01064}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVC" }{}}{\fldrslt {\cs37\ul\cf2 OnTestCaseStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
& test_case) = 0;\par
{\bkmkstart AAAAAAANVD}{\bkmkend AAAAAAANVD}
01065 \par
{\bkmkstart AAAAAAANVE}{\bkmkend AAAAAAANVE}
01066   {\cf20 // Fired before the test starts.}\par
{\bkmkstart AAAAAAANVF}{\bkmkend AAAAAAANVF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVG" }{}}{\fldrslt {\cs37\ul\cf2 01067}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVG" }{}}{\fldrslt {\cs37\ul\cf2 OnTestStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
& test_info) = 0;\par
{\bkmkstart AAAAAAANVH}{\bkmkend AAAAAAANVH}
01068 \par
{\bkmkstart AAAAAAANVI}{\bkmkend AAAAAAANVI}
01069   {\cf20 // Fired after a failed assertion or a SUCCEED() invocation.}\par
{\bkmkstart AAAAAAANVJ}{\bkmkend AAAAAAANVJ}
01070   {\cf20 // If you want to throw an exception from this function to skip to the next}\par
{\bkmkstart AAAAAAANVK}{\bkmkend AAAAAAANVK}
01071   {\cf20 // TEST, it must be AssertionException defined above, or inherited from it.}\par
{\bkmkstart AAAAAAANVL}{\bkmkend AAAAAAANVL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVM" }{}}{\fldrslt {\cs37\ul\cf2 01072}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVM" }{}}{\fldrslt {\cs37\ul\cf2 OnTestPartResult}}}
({\cf17 const} TestPartResult& test_part_result) = 0;\par
{\bkmkstart AAAAAAANVN}{\bkmkend AAAAAAANVN}
01073 \par
{\bkmkstart AAAAAAANVO}{\bkmkend AAAAAAANVO}
01074   {\cf20 // Fired after the test ends.}\par
{\bkmkstart AAAAAAANVP}{\bkmkend AAAAAAANVP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVQ" }{}}{\fldrslt {\cs37\ul\cf2 01075}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVQ" }{}}{\fldrslt {\cs37\ul\cf2 OnTestEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
& test_info) = 0;\par
{\bkmkstart AAAAAAANVR}{\bkmkend AAAAAAANVR}
01076 \par
{\bkmkstart AAAAAAANVS}{\bkmkend AAAAAAANVS}
01077   {\cf20 // Fired after the test case ends.}\par
{\bkmkstart AAAAAAANVT}{\bkmkend AAAAAAANVT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVU" }{}}{\fldrslt {\cs37\ul\cf2 01078}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVU" }{}}{\fldrslt {\cs37\ul\cf2 OnTestCaseEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
& test_case) = 0;\par
{\bkmkstart AAAAAAANVV}{\bkmkend AAAAAAANVV}
01079 \par
{\bkmkstart AAAAAAANVW}{\bkmkend AAAAAAANVW}
01080   {\cf20 // Fired before environment tear-down for each iteration of tests starts.}\par
{\bkmkstart AAAAAAANVX}{\bkmkend AAAAAAANVX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVY" }{}}{\fldrslt {\cs37\ul\cf2 01081}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANVY" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsTearDownStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANVZ}{\bkmkend AAAAAAANVZ}
01082 \par
{\bkmkstart AAAAAAANWA}{\bkmkend AAAAAAANWA}
01083   {\cf20 // Fired after environment tear-down for each iteration of tests ends.}\par
{\bkmkstart AAAAAAANWB}{\bkmkend AAAAAAANWB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWC" }{}}{\fldrslt {\cs37\ul\cf2 01084}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWC" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsTearDownEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANWD}{\bkmkend AAAAAAANWD}
01085 \par
{\bkmkstart AAAAAAANWE}{\bkmkend AAAAAAANWE}
01086   {\cf20 // Fired after each iteration of tests finishes.}\par
{\bkmkstart AAAAAAANWF}{\bkmkend AAAAAAANWF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWG" }{}}{\fldrslt {\cs37\ul\cf2 01087}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWG" }{}}{\fldrslt {\cs37\ul\cf2 OnTestIterationEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test,\par
{\bkmkstart AAAAAAANWH}{\bkmkend AAAAAAANWH}
01088                                   {\cf18 int} iteration) = 0;\par
{\bkmkstart AAAAAAANWI}{\bkmkend AAAAAAANWI}
01089 \par
{\bkmkstart AAAAAAANWJ}{\bkmkend AAAAAAANWJ}
01090   {\cf20 // Fired after all test activities have ended.}\par
{\bkmkstart AAAAAAANWK}{\bkmkend AAAAAAANWK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWL" }{}}{\fldrslt {\cs37\ul\cf2 01091}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWL" }{}}{\fldrslt {\cs37\ul\cf2 OnTestProgramEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& unit_test) = 0;\par
{\bkmkstart AAAAAAANWM}{\bkmkend AAAAAAANWM}
01092 \};\par
{\bkmkstart AAAAAAANWN}{\bkmkend AAAAAAANWN}
01093 \par
{\bkmkstart AAAAAAANWO}{\bkmkend AAAAAAANWO}
01094 {\cf20 // The convenience class for users who need to override just one or two}\par
{\bkmkstart AAAAAAANWP}{\bkmkend AAAAAAANWP}
01095 {\cf20 // methods and are not concerned that a possible change to a signature of}\par
{\bkmkstart AAAAAAANWQ}{\bkmkend AAAAAAANWQ}
01096 {\cf20 // the methods they override will not be caught during the build.  For}\par
{\bkmkstart AAAAAAANWR}{\bkmkend AAAAAAANWR}
01097 {\cf20 // comments about each method please see the definition of TestEventListener}\par
{\bkmkstart AAAAAAANWS}{\bkmkend AAAAAAANWS}
01098 {\cf20 // above.}\par
{\bkmkstart AAAAAAANWT}{\bkmkend AAAAAAANWT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWU" }{}}{\fldrslt {\cs37\ul\cf2 01099}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWU" }{}}{\fldrslt {\cs37\ul\cf2 EmptyTestEventListener}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
 \{\par
{\bkmkstart AAAAAAANWV}{\bkmkend AAAAAAANWV}
01100  {\cf17 public}:\par
{\bkmkstart AAAAAAANWW}{\bkmkend AAAAAAANWW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWX" }{}}{\fldrslt {\cs37\ul\cf2 01101}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWX" }{}}{\fldrslt {\cs37\ul\cf2 OnTestProgramStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANWY}{\bkmkend AAAAAAANWY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWZ" }{}}{\fldrslt {\cs37\ul\cf2 01102}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANWZ" }{}}{\fldrslt {\cs37\ul\cf2 OnTestIterationStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/},\par
{\bkmkstart AAAAAAANXA}{\bkmkend AAAAAAANXA}
01103                                     {\cf18 int} {\cf20 /*iteration*/}) \{\}\par
{\bkmkstart AAAAAAANXB}{\bkmkend AAAAAAANXB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXC" }{}}{\fldrslt {\cs37\ul\cf2 01104}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXC" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsSetUpStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANXD}{\bkmkend AAAAAAANXD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXE" }{}}{\fldrslt {\cs37\ul\cf2 01105}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXE" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsSetUpEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANXF}{\bkmkend AAAAAAANXF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXG" }{}}{\fldrslt {\cs37\ul\cf2 01106}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXG" }{}}{\fldrslt {\cs37\ul\cf2 OnTestCaseStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
& {\cf20 /*test_case*/}) \{\}\par
{\bkmkstart AAAAAAANXH}{\bkmkend AAAAAAANXH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXI" }{}}{\fldrslt {\cs37\ul\cf2 01107}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXI" }{}}{\fldrslt {\cs37\ul\cf2 OnTestStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
& {\cf20 /*test_info*/}) \{\}\par
{\bkmkstart AAAAAAANXJ}{\bkmkend AAAAAAANXJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXK" }{}}{\fldrslt {\cs37\ul\cf2 01108}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXK" }{}}{\fldrslt {\cs37\ul\cf2 OnTestPartResult}}}
({\cf17 const} TestPartResult& {\cf20 /*test_part_result*/}) \{\}\par
{\bkmkstart AAAAAAANXL}{\bkmkend AAAAAAANXL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXM" }{}}{\fldrslt {\cs37\ul\cf2 01109}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXM" }{}}{\fldrslt {\cs37\ul\cf2 OnTestEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
& {\cf20 /*test_info*/}) \{\}\par
{\bkmkstart AAAAAAANXN}{\bkmkend AAAAAAANXN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXO" }{}}{\fldrslt {\cs37\ul\cf2 01110}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXO" }{}}{\fldrslt {\cs37\ul\cf2 OnTestCaseEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
& {\cf20 /*test_case*/}) \{\}\par
{\bkmkstart AAAAAAANXP}{\bkmkend AAAAAAANXP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXQ" }{}}{\fldrslt {\cs37\ul\cf2 01111}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXQ" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsTearDownStart}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANXR}{\bkmkend AAAAAAANXR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXS" }{}}{\fldrslt {\cs37\ul\cf2 01112}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXS" }{}}{\fldrslt {\cs37\ul\cf2 OnEnvironmentsTearDownEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANXT}{\bkmkend AAAAAAANXT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXU" }{}}{\fldrslt {\cs37\ul\cf2 01113}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXU" }{}}{\fldrslt {\cs37\ul\cf2 OnTestIterationEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/},\par
{\bkmkstart AAAAAAANXV}{\bkmkend AAAAAAANXV}
01114                                   {\cf18 int} {\cf20 /*iteration*/}) \{\}\par
{\bkmkstart AAAAAAANXW}{\bkmkend AAAAAAANXW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXX" }{}}{\fldrslt {\cs37\ul\cf2 01115}}}
   {\cf17 virtual} {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANXX" }{}}{\fldrslt {\cs37\ul\cf2 OnTestProgramEnd}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
& {\cf20 /*unit_test*/}) \{\}\par
{\bkmkstart AAAAAAANXY}{\bkmkend AAAAAAANXY}
01116 \};\par
{\bkmkstart AAAAAAANXZ}{\bkmkend AAAAAAANXZ}
01117 \par
{\bkmkstart AAAAAAANYA}{\bkmkend AAAAAAANYA}
01118 {\cf20 // TestEventListeners lets users add listeners to track events in Google Test.}\par
{\bkmkstart AAAAAAANYB}{\bkmkend AAAAAAANYB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYC" }{}}{\fldrslt {\cs37\ul\cf2 01119}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
 \{\par
{\bkmkstart AAAAAAANYD}{\bkmkend AAAAAAANYD}
01120  {\cf17 public}:\par
{\bkmkstart AAAAAAANYE}{\bkmkend AAAAAAANYE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYF" }{}}{\fldrslt {\cs37\ul\cf2 01121}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYF" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
();\par
{\bkmkstart AAAAAAANYG}{\bkmkend AAAAAAANYG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYH" }{}}{\fldrslt {\cs37\ul\cf2 01122}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYH" }{}}{\fldrslt {\cs37\ul\cf2 ~TestEventListeners}}}
();\par
{\bkmkstart AAAAAAANYI}{\bkmkend AAAAAAANYI}
01123 \par
{\bkmkstart AAAAAAANYJ}{\bkmkend AAAAAAANYJ}
01124   {\cf20 // Appends an event listener to the end of the list. Google Test assumes}\par
{\bkmkstart AAAAAAANYK}{\bkmkend AAAAAAANYK}
01125   {\cf20 // the ownership of the listener (i.e. it will delete the listener when}\par
{\bkmkstart AAAAAAANYL}{\bkmkend AAAAAAANYL}
01126   {\cf20 // the test program finishes).}\par
{\bkmkstart AAAAAAANYM}{\bkmkend AAAAAAANYM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYN" }{}}{\fldrslt {\cs37\ul\cf2 01127}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYN" }{}}{\fldrslt {\cs37\ul\cf2 Append}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* listener);\par
{\bkmkstart AAAAAAANYO}{\bkmkend AAAAAAANYO}
01128 \par
{\bkmkstart AAAAAAANYP}{\bkmkend AAAAAAANYP}
01129   {\cf20 // Removes the given event listener from the list and returns it.  It then}\par
{\bkmkstart AAAAAAANYQ}{\bkmkend AAAAAAANYQ}
01130   {\cf20 // becomes the caller's responsibility to delete the listener. Returns}\par
{\bkmkstart AAAAAAANYR}{\bkmkend AAAAAAANYR}
01131   {\cf20 // NULL if the listener is not found in the list.}\par
{\bkmkstart AAAAAAANYS}{\bkmkend AAAAAAANYS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYT" }{}}{\fldrslt {\cs37\ul\cf2 01132}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYT" }{}}{\fldrslt {\cs37\ul\cf2 Release}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* listener);\par
{\bkmkstart AAAAAAANYU}{\bkmkend AAAAAAANYU}
01133 \par
{\bkmkstart AAAAAAANYV}{\bkmkend AAAAAAANYV}
01134   {\cf20 // Returns the standard listener responsible for the default console}\par
{\bkmkstart AAAAAAANYW}{\bkmkend AAAAAAANYW}
01135   {\cf20 // output.  Can be removed from the listeners list to shut down default}\par
{\bkmkstart AAAAAAANYX}{\bkmkend AAAAAAANYX}
01136   {\cf20 // console output.  Note that removing this object from the listener list}\par
{\bkmkstart AAAAAAANYY}{\bkmkend AAAAAAANYY}
01137   {\cf20 // with Release transfers its ownership to the caller and makes this}\par
{\bkmkstart AAAAAAANYZ}{\bkmkend AAAAAAANYZ}
01138   {\cf20 // function return NULL the next time.}\par
{\bkmkstart AAAAAAANZA}{\bkmkend AAAAAAANZA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZB" }{}}{\fldrslt {\cs37\ul\cf2 01139}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZB" }{}}{\fldrslt {\cs37\ul\cf2 default_result_printer}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANZC}{\bkmkend AAAAAAANZC}
01140     {\cf19 return} default_result_printer_;\par
{\bkmkstart AAAAAAANZD}{\bkmkend AAAAAAANZD}
01141   \}\par
{\bkmkstart AAAAAAANZE}{\bkmkend AAAAAAANZE}
01142 \par
{\bkmkstart AAAAAAANZF}{\bkmkend AAAAAAANZF}
01143   {\cf20 // Returns the standard listener responsible for the default XML output}\par
{\bkmkstart AAAAAAANZG}{\bkmkend AAAAAAANZG}
01144   {\cf20 // controlled by the --gtest_output=xml flag.  Can be removed from the}\par
{\bkmkstart AAAAAAANZH}{\bkmkend AAAAAAANZH}
01145   {\cf20 // listeners list by users who want to shut down the default XML output}\par
{\bkmkstart AAAAAAANZI}{\bkmkend AAAAAAANZI}
01146   {\cf20 // controlled by this flag and substitute it with custom one.  Note that}\par
{\bkmkstart AAAAAAANZJ}{\bkmkend AAAAAAANZJ}
01147   {\cf20 // removing this object from the listener list with Release transfers its}\par
{\bkmkstart AAAAAAANZK}{\bkmkend AAAAAAANZK}
01148   {\cf20 // ownership to the caller and makes this function return NULL the next}\par
{\bkmkstart AAAAAAANZL}{\bkmkend AAAAAAANZL}
01149   {\cf20 // time.}\par
{\bkmkstart AAAAAAANZM}{\bkmkend AAAAAAANZM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZN" }{}}{\fldrslt {\cs37\ul\cf2 01150}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZN" }{}}{\fldrslt {\cs37\ul\cf2 default_xml_generator}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAANZO}{\bkmkend AAAAAAANZO}
01151     {\cf19 return} default_xml_generator_;\par
{\bkmkstart AAAAAAANZP}{\bkmkend AAAAAAANZP}
01152   \}\par
{\bkmkstart AAAAAAANZQ}{\bkmkend AAAAAAANZQ}
01153 \par
{\bkmkstart AAAAAAANZR}{\bkmkend AAAAAAANZR}
01154  {\cf17 private}:\par
{\bkmkstart AAAAAAANZS}{\bkmkend AAAAAAANZS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZT" }{}}{\fldrslt {\cs37\ul\cf2 01155}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
;\par
{\bkmkstart AAAAAAANZU}{\bkmkend AAAAAAANZU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZV" }{}}{\fldrslt {\cs37\ul\cf2 01156}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
;\par
{\bkmkstart AAAAAAANZW}{\bkmkend AAAAAAANZW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZX" }{}}{\fldrslt {\cs37\ul\cf2 01157}}}
   {\cf17 friend} {\cf17 class }internal::DefaultGlobalTestPartResultReporter;\par
{\bkmkstart AAAAAAANZY}{\bkmkend AAAAAAANZY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANZZ" }{}}{\fldrslt {\cs37\ul\cf2 01158}}}
   {\cf17 friend} {\cf17 class }internal::NoExecDeathTest;\par
{\bkmkstart AAAAAAAOAA}{\bkmkend AAAAAAAOAA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOAB" }{}}{\fldrslt {\cs37\ul\cf2 01159}}}
   {\cf17 friend} {\cf17 class }internal::TestEventListenersAccessor;\par
{\bkmkstart AAAAAAAOAC}{\bkmkend AAAAAAAOAC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOAD" }{}}{\fldrslt {\cs37\ul\cf2 01160}}}
   {\cf17 friend} {\cf17 class }internal::UnitTestImpl;\par
{\bkmkstart AAAAAAAOAE}{\bkmkend AAAAAAAOAE}
01161 \par
{\bkmkstart AAAAAAAOAF}{\bkmkend AAAAAAAOAF}
01162   {\cf20 // Returns repeater that broadcasts the TestEventListener events to all}\par
{\bkmkstart AAAAAAAOAG}{\bkmkend AAAAAAAOAG}
01163   {\cf20 // subscribers.}\par
{\bkmkstart AAAAAAAOAH}{\bkmkend AAAAAAAOAH}
01164   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* repeater();\par
{\bkmkstart AAAAAAAOAI}{\bkmkend AAAAAAAOAI}
01165 \par
{\bkmkstart AAAAAAAOAJ}{\bkmkend AAAAAAAOAJ}
01166   {\cf20 // Sets the default_result_printer attribute to the provided listener.}\par
{\bkmkstart AAAAAAAOAK}{\bkmkend AAAAAAAOAK}
01167   {\cf20 // The listener is also added to the listener list and previous}\par
{\bkmkstart AAAAAAAOAL}{\bkmkend AAAAAAAOAL}
01168   {\cf20 // default_result_printer is removed from it and deleted. The listener can}\par
{\bkmkstart AAAAAAAOAM}{\bkmkend AAAAAAAOAM}
01169   {\cf20 // also be NULL in which case it will not be added to the list. Does}\par
{\bkmkstart AAAAAAAOAN}{\bkmkend AAAAAAAOAN}
01170   {\cf20 // nothing if the previous and the current listener objects are the same.}\par
{\bkmkstart AAAAAAAOAO}{\bkmkend AAAAAAAOAO}
01171   {\cf18 void} SetDefaultResultPrinter({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* listener);\par
{\bkmkstart AAAAAAAOAP}{\bkmkend AAAAAAAOAP}
01172 \par
{\bkmkstart AAAAAAAOAQ}{\bkmkend AAAAAAAOAQ}
01173   {\cf20 // Sets the default_xml_generator attribute to the provided listener.  The}\par
{\bkmkstart AAAAAAAOAR}{\bkmkend AAAAAAAOAR}
01174   {\cf20 // listener is also added to the listener list and previous}\par
{\bkmkstart AAAAAAAOAS}{\bkmkend AAAAAAAOAS}
01175   {\cf20 // default_xml_generator is removed from it and deleted. The listener can}\par
{\bkmkstart AAAAAAAOAT}{\bkmkend AAAAAAAOAT}
01176   {\cf20 // also be NULL in which case it will not be added to the list. Does}\par
{\bkmkstart AAAAAAAOAU}{\bkmkend AAAAAAAOAU}
01177   {\cf20 // nothing if the previous and the current listener objects are the same.}\par
{\bkmkstart AAAAAAAOAV}{\bkmkend AAAAAAAOAV}
01178   {\cf18 void} SetDefaultXmlGenerator({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* listener);\par
{\bkmkstart AAAAAAAOAW}{\bkmkend AAAAAAAOAW}
01179 \par
{\bkmkstart AAAAAAAOAX}{\bkmkend AAAAAAAOAX}
01180   {\cf20 // Controls whether events will be forwarded by the repeater to the}\par
{\bkmkstart AAAAAAAOAY}{\bkmkend AAAAAAAOAY}
01181   {\cf20 // listeners in the list.}\par
{\bkmkstart AAAAAAAOAZ}{\bkmkend AAAAAAAOAZ}
01182   {\cf18 bool} EventForwardingEnabled() {\cf17 const};\par
{\bkmkstart AAAAAAAOBA}{\bkmkend AAAAAAAOBA}
01183   {\cf18 void} SuppressEventForwarding();\par
{\bkmkstart AAAAAAAOBB}{\bkmkend AAAAAAAOBB}
01184 \par
{\bkmkstart AAAAAAAOBC}{\bkmkend AAAAAAAOBC}
01185   {\cf20 // The actual list of listeners.}\par
{\bkmkstart AAAAAAAOBD}{\bkmkend AAAAAAAOBD}
01186   internal::TestEventRepeater* repeater_;\par
{\bkmkstart AAAAAAAOBE}{\bkmkend AAAAAAAOBE}
01187   {\cf20 // Listener responsible for the standard result output.}\par
{\bkmkstart AAAAAAAOBF}{\bkmkend AAAAAAAOBF}
01188   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* default_result_printer_;\par
{\bkmkstart AAAAAAAOBG}{\bkmkend AAAAAAAOBG}
01189   {\cf20 // Listener responsible for the creation of the XML output file.}\par
{\bkmkstart AAAAAAAOBH}{\bkmkend AAAAAAAOBH}
01190   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANUC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListener}}}
* default_xml_generator_;\par
{\bkmkstart AAAAAAAOBI}{\bkmkend AAAAAAAOBI}
01191 \par
{\bkmkstart AAAAAAAOBJ}{\bkmkend AAAAAAAOBJ}
01192   {\cf20 // We disallow copying TestEventListeners.}\par
{\bkmkstart AAAAAAAOBK}{\bkmkend AAAAAAAOBK}
01193   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
);\par
{\bkmkstart AAAAAAAOBL}{\bkmkend AAAAAAAOBL}
01194 \};\par
{\bkmkstart AAAAAAAOBM}{\bkmkend AAAAAAAOBM}
01195 \par
{\bkmkstart AAAAAAAOBN}{\bkmkend AAAAAAAOBN}
01196 {\cf20 // A UnitTest consists of a vector of TestCases.}\par
{\bkmkstart AAAAAAAOBO}{\bkmkend AAAAAAAOBO}
01197 {\cf20 //}\par
{\bkmkstart AAAAAAAOBP}{\bkmkend AAAAAAAOBP}
01198 {\cf20 // This is a singleton class.  The only instance of UnitTest is}\par
{\bkmkstart AAAAAAAOBQ}{\bkmkend AAAAAAAOBQ}
01199 {\cf20 // created when UnitTest::GetInstance() is first called.  This}\par
{\bkmkstart AAAAAAAOBR}{\bkmkend AAAAAAAOBR}
01200 {\cf20 // instance is never deleted.}\par
{\bkmkstart AAAAAAAOBS}{\bkmkend AAAAAAAOBS}
01201 {\cf20 //}\par
{\bkmkstart AAAAAAAOBT}{\bkmkend AAAAAAAOBT}
01202 {\cf20 // UnitTest is not copyable.}\par
{\bkmkstart AAAAAAAOBU}{\bkmkend AAAAAAAOBU}
01203 {\cf20 //}\par
{\bkmkstart AAAAAAAOBV}{\bkmkend AAAAAAAOBV}
01204 {\cf20 // This class is thread-safe as long as the methods are called}\par
{\bkmkstart AAAAAAAOBW}{\bkmkend AAAAAAAOBW}
01205 {\cf20 // according to their specification.}\par
{\bkmkstart AAAAAAAOBX}{\bkmkend AAAAAAAOBX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 01206}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
 \{\par
{\bkmkstart AAAAAAAOBY}{\bkmkend AAAAAAAOBY}
01207  {\cf17 public}:\par
{\bkmkstart AAAAAAAOBZ}{\bkmkend AAAAAAAOBZ}
01208   {\cf20 // Gets the singleton UnitTest object.  The first time this method}\par
{\bkmkstart AAAAAAAOCA}{\bkmkend AAAAAAAOCA}
01209   {\cf20 // is called, a UnitTest object is constructed and returned.}\par
{\bkmkstart AAAAAAAOCB}{\bkmkend AAAAAAAOCB}
01210   {\cf20 // Consecutive calls will return the same object.}\par
{\bkmkstart AAAAAAAOCC}{\bkmkend AAAAAAAOCC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCD" }{}}{\fldrslt {\cs37\ul\cf2 01211}}}
   {\cf17 static} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCD" }{}}{\fldrslt {\cs37\ul\cf2 GetInstance}}}
();\par
{\bkmkstart AAAAAAAOCE}{\bkmkend AAAAAAAOCE}
01212 \par
{\bkmkstart AAAAAAAOCF}{\bkmkend AAAAAAAOCF}
01213   {\cf20 // Runs all tests in this UnitTest object and prints the result.}\par
{\bkmkstart AAAAAAAOCG}{\bkmkend AAAAAAAOCG}
01214   {\cf20 // Returns 0 if successful, or 1 otherwise.}\par
{\bkmkstart AAAAAAAOCH}{\bkmkend AAAAAAAOCH}
01215   {\cf20 //}\par
{\bkmkstart AAAAAAAOCI}{\bkmkend AAAAAAAOCI}
01216   {\cf20 // This method can only be called from the main thread.}\par
{\bkmkstart AAAAAAAOCJ}{\bkmkend AAAAAAAOCJ}
01217   {\cf20 //}\par
{\bkmkstart AAAAAAAOCK}{\bkmkend AAAAAAAOCK}
01218   {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOCL}{\bkmkend AAAAAAAOCL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCM" }{}}{\fldrslt {\cs37\ul\cf2 01219}}}
   {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCM" }{}}{\fldrslt {\cs37\ul\cf2 Run}}}
() {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_MUST_USE_RESULT_}}}
;\par
{\bkmkstart AAAAAAAOCO}{\bkmkend AAAAAAAOCO}
01220 \par
{\bkmkstart AAAAAAAOCP}{\bkmkend AAAAAAAOCP}
01221   {\cf20 // Returns the working directory when the first TEST() or TEST_F()}\par
{\bkmkstart AAAAAAAOCQ}{\bkmkend AAAAAAAOCQ}
01222   {\cf20 // was executed.  The UnitTest object owns the string.}\par
{\bkmkstart AAAAAAAOCR}{\bkmkend AAAAAAAOCR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCS" }{}}{\fldrslt {\cs37\ul\cf2 01223}}}
   const {\cf18 char}* original_working_dir() const;\par
{\bkmkstart AAAAAAAOCT}{\bkmkend AAAAAAAOCT}
01224 \par
{\bkmkstart AAAAAAAOCU}{\bkmkend AAAAAAAOCU}
01225   {\cf20 // Returns the TestCase object for the test that's currently running,}\par
{\bkmkstart AAAAAAAOCV}{\bkmkend AAAAAAAOCV}
01226   {\cf20 // or NULL if no test is running.}\par
{\bkmkstart AAAAAAAOCW}{\bkmkend AAAAAAAOCW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCX" }{}}{\fldrslt {\cs37\ul\cf2 01227}}}
   const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
* current_test_case() const\par
{\bkmkstart AAAAAAAOCY}{\bkmkend AAAAAAAOCY}
01228       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAODA}{\bkmkend AAAAAAAODA}
01229 \par
{\bkmkstart AAAAAAAODB}{\bkmkend AAAAAAAODB}
01230   {\cf20 // Returns the TestInfo object for the test that's currently running,}\par
{\bkmkstart AAAAAAAODC}{\bkmkend AAAAAAAODC}
01231   {\cf20 // or NULL if no test is running.}\par
{\bkmkstart AAAAAAAODD}{\bkmkend AAAAAAAODD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAODE" }{}}{\fldrslt {\cs37\ul\cf2 01232}}}
   const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMSH" }{}}{\fldrslt {\cs37\ul\cf2 TestInfo}}}
* current_test_info() const\par
{\bkmkstart AAAAAAAODF}{\bkmkend AAAAAAAODF}
01233       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAODG}{\bkmkend AAAAAAAODG}
01234 \par
{\bkmkstart AAAAAAAODH}{\bkmkend AAAAAAAODH}
01235   {\cf20 // Returns the random seed used at the start of the current test run.}\par
{\bkmkstart AAAAAAAODI}{\bkmkend AAAAAAAODI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAODJ" }{}}{\fldrslt {\cs37\ul\cf2 01236}}}
   {\cf18 int} random_seed() const;\par
{\bkmkstart AAAAAAAODK}{\bkmkend AAAAAAAODK}
01237 \par
{\bkmkstart AAAAAAAODL}{\bkmkend AAAAAAAODL}
01238   {\cf20 // Returns the ParameterizedTestCaseRegistry object used to keep track of}\par
{\bkmkstart AAAAAAAODM}{\bkmkend AAAAAAAODM}
01239   {\cf20 // value-parameterized tests and instantiate and register them.}\par
{\bkmkstart AAAAAAAODN}{\bkmkend AAAAAAAODN}
01240   {\cf20 //}\par
{\bkmkstart AAAAAAAODO}{\bkmkend AAAAAAAODO}
01241   {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAODP}{\bkmkend AAAAAAAODP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAODQ" }{}}{\fldrslt {\cs37\ul\cf2 01242}}}
   internal::ParameterizedTestCaseRegistry& parameterized_test_registry()\par
{\bkmkstart AAAAAAAODR}{\bkmkend AAAAAAAODR}
01243       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAODS}{\bkmkend AAAAAAAODS}
01244 \par
{\bkmkstart AAAAAAAODT}{\bkmkend AAAAAAAODT}
01245   {\cf20 // Gets the number of successful test cases.}\par
{\bkmkstart AAAAAAAODU}{\bkmkend AAAAAAAODU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAODV" }{}}{\fldrslt {\cs37\ul\cf2 01246}}}
   {\cf18 int} successful_test_case_count() const;\par
{\bkmkstart AAAAAAAODW}{\bkmkend AAAAAAAODW}
01247 \par
{\bkmkstart AAAAAAAODX}{\bkmkend AAAAAAAODX}
01248   {\cf20 // Gets the number of failed test cases.}\par
{\bkmkstart AAAAAAAODY}{\bkmkend AAAAAAAODY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAODZ" }{}}{\fldrslt {\cs37\ul\cf2 01249}}}
   {\cf18 int} failed_test_case_count() const;\par
{\bkmkstart AAAAAAAOEA}{\bkmkend AAAAAAAOEA}
01250 \par
{\bkmkstart AAAAAAAOEB}{\bkmkend AAAAAAAOEB}
01251   {\cf20 // Gets the number of all test cases.}\par
{\bkmkstart AAAAAAAOEC}{\bkmkend AAAAAAAOEC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOED" }{}}{\fldrslt {\cs37\ul\cf2 01252}}}
   {\cf18 int} total_test_case_count() const;\par
{\bkmkstart AAAAAAAOEE}{\bkmkend AAAAAAAOEE}
01253 \par
{\bkmkstart AAAAAAAOEF}{\bkmkend AAAAAAAOEF}
01254   {\cf20 // Gets the number of all test cases that contain at least one test}\par
{\bkmkstart AAAAAAAOEG}{\bkmkend AAAAAAAOEG}
01255   {\cf20 // that should run.}\par
{\bkmkstart AAAAAAAOEH}{\bkmkend AAAAAAAOEH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOEI" }{}}{\fldrslt {\cs37\ul\cf2 01256}}}
   {\cf18 int} test_case_to_run_count() const;\par
{\bkmkstart AAAAAAAOEJ}{\bkmkend AAAAAAAOEJ}
01257 \par
{\bkmkstart AAAAAAAOEK}{\bkmkend AAAAAAAOEK}
01258   {\cf20 // Gets the number of successful tests.}\par
{\bkmkstart AAAAAAAOEL}{\bkmkend AAAAAAAOEL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOEM" }{}}{\fldrslt {\cs37\ul\cf2 01259}}}
   {\cf18 int} successful_test_count() const;\par
{\bkmkstart AAAAAAAOEN}{\bkmkend AAAAAAAOEN}
01260 \par
{\bkmkstart AAAAAAAOEO}{\bkmkend AAAAAAAOEO}
01261   {\cf20 // Gets the number of failed tests.}\par
{\bkmkstart AAAAAAAOEP}{\bkmkend AAAAAAAOEP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOEQ" }{}}{\fldrslt {\cs37\ul\cf2 01262}}}
   {\cf18 int} failed_test_count() const;\par
{\bkmkstart AAAAAAAOER}{\bkmkend AAAAAAAOER}
01263 \par
{\bkmkstart AAAAAAAOES}{\bkmkend AAAAAAAOES}
01264   {\cf20 // Gets the number of disabled tests that will be reported in the XML report.}\par
{\bkmkstart AAAAAAAOET}{\bkmkend AAAAAAAOET}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOEU" }{}}{\fldrslt {\cs37\ul\cf2 01265}}}
   {\cf18 int} reportable_disabled_test_count() const;\par
{\bkmkstart AAAAAAAOEV}{\bkmkend AAAAAAAOEV}
01266 \par
{\bkmkstart AAAAAAAOEW}{\bkmkend AAAAAAAOEW}
01267   {\cf20 // Gets the number of disabled tests.}\par
{\bkmkstart AAAAAAAOEX}{\bkmkend AAAAAAAOEX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOEY" }{}}{\fldrslt {\cs37\ul\cf2 01268}}}
   {\cf18 int} disabled_test_count() const;\par
{\bkmkstart AAAAAAAOEZ}{\bkmkend AAAAAAAOEZ}
01269 \par
{\bkmkstart AAAAAAAOFA}{\bkmkend AAAAAAAOFA}
01270   {\cf20 // Gets the number of tests to be printed in the XML report.}\par
{\bkmkstart AAAAAAAOFB}{\bkmkend AAAAAAAOFB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFC" }{}}{\fldrslt {\cs37\ul\cf2 01271}}}
   {\cf18 int} reportable_test_count() const;\par
{\bkmkstart AAAAAAAOFD}{\bkmkend AAAAAAAOFD}
01272 \par
{\bkmkstart AAAAAAAOFE}{\bkmkend AAAAAAAOFE}
01273   {\cf20 // Gets the number of all tests.}\par
{\bkmkstart AAAAAAAOFF}{\bkmkend AAAAAAAOFF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFG" }{}}{\fldrslt {\cs37\ul\cf2 01274}}}
   {\cf18 int} total_test_count() const;\par
{\bkmkstart AAAAAAAOFH}{\bkmkend AAAAAAAOFH}
01275 \par
{\bkmkstart AAAAAAAOFI}{\bkmkend AAAAAAAOFI}
01276   {\cf20 // Gets the number of tests that should run.}\par
{\bkmkstart AAAAAAAOFJ}{\bkmkend AAAAAAAOFJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFK" }{}}{\fldrslt {\cs37\ul\cf2 01277}}}
   {\cf18 int} test_to_run_count() const;\par
{\bkmkstart AAAAAAAOFL}{\bkmkend AAAAAAAOFL}
01278 \par
{\bkmkstart AAAAAAAOFM}{\bkmkend AAAAAAAOFM}
01279   {\cf20 // Gets the time of the test program start, in ms from the start of the}\par
{\bkmkstart AAAAAAAOFN}{\bkmkend AAAAAAAOFN}
01280   {\cf20 // UNIX epoch.}\par
{\bkmkstart AAAAAAAOFO}{\bkmkend AAAAAAAOFO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFP" }{}}{\fldrslt {\cs37\ul\cf2 01281}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 start_timestamp() const;\par
{\bkmkstart AAAAAAAOFQ}{\bkmkend AAAAAAAOFQ}
01282 \par
{\bkmkstart AAAAAAAOFR}{\bkmkend AAAAAAAOFR}
01283   {\cf20 // Gets the elapsed time, in milliseconds.}\par
{\bkmkstart AAAAAAAOFS}{\bkmkend AAAAAAAOFS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFT" }{}}{\fldrslt {\cs37\ul\cf2 01284}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMXB" }{}}{\fldrslt {\cs37\ul\cf2 TimeInMillis}}}
 elapsed_time() const;\par
{\bkmkstart AAAAAAAOFU}{\bkmkend AAAAAAAOFU}
01285 \par
{\bkmkstart AAAAAAAOFV}{\bkmkend AAAAAAAOFV}
01286   {\cf20 // Returns true iff the unit test passed (i.e. all test cases passed).}\par
{\bkmkstart AAAAAAAOFW}{\bkmkend AAAAAAAOFW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOFX" }{}}{\fldrslt {\cs37\ul\cf2 01287}}}
   {\cf18 bool} Passed() const;\par
{\bkmkstart AAAAAAAOFY}{\bkmkend AAAAAAAOFY}
01288 \par
{\bkmkstart AAAAAAAOFZ}{\bkmkend AAAAAAAOFZ}
01289   {\cf20 // Returns true iff the unit test failed (i.e. some test case failed}\par
{\bkmkstart AAAAAAAOGA}{\bkmkend AAAAAAAOGA}
01290   {\cf20 // or something outside of all tests failed).}\par
{\bkmkstart AAAAAAAOGB}{\bkmkend AAAAAAAOGB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOGC" }{}}{\fldrslt {\cs37\ul\cf2 01291}}}
   {\cf18 bool} Failed() const;\par
{\bkmkstart AAAAAAAOGD}{\bkmkend AAAAAAAOGD}
01292 \par
{\bkmkstart AAAAAAAOGE}{\bkmkend AAAAAAAOGE}
01293   {\cf20 // Gets the i-th test case among all the test cases. i can range from 0 to}\par
{\bkmkstart AAAAAAAOGF}{\bkmkend AAAAAAAOGF}
01294   {\cf20 // total_test_case_count() - 1. If i is not in that range, returns NULL.}\par
{\bkmkstart AAAAAAAOGG}{\bkmkend AAAAAAAOGG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOGH" }{}}{\fldrslt {\cs37\ul\cf2 01295}}}
   const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
* GetTestCase({\cf18 int} i) const;\par
{\bkmkstart AAAAAAAOGI}{\bkmkend AAAAAAAOGI}
01296 \par
{\bkmkstart AAAAAAAOGJ}{\bkmkend AAAAAAAOGJ}
01297   {\cf20 // Returns the TestResult containing information on test failures and}\par
{\bkmkstart AAAAAAAOGK}{\bkmkend AAAAAAAOGK}
01298   {\cf20 // properties logged outside of individual test cases.}\par
{\bkmkstart AAAAAAAOGL}{\bkmkend AAAAAAAOGL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOGM" }{}}{\fldrslt {\cs37\ul\cf2 01299}}}
   const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAMYZ" }{}}{\fldrslt {\cs37\ul\cf2 TestResult}}}
& ad_hoc_test_result() const;\par
{\bkmkstart AAAAAAAOGN}{\bkmkend AAAAAAAOGN}
01300 \par
{\bkmkstart AAAAAAAOGO}{\bkmkend AAAAAAAOGO}
01301   {\cf20 // Returns the list of event listeners that can be used to track events}\par
{\bkmkstart AAAAAAAOGP}{\bkmkend AAAAAAAOGP}
01302   {\cf20 // inside Google Test.}\par
{\bkmkstart AAAAAAAOGQ}{\bkmkend AAAAAAAOGQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOGR" }{}}{\fldrslt {\cs37\ul\cf2 01303}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANYC" }{}}{\fldrslt {\cs37\ul\cf2 TestEventListeners}}}
& listeners();\par
{\bkmkstart AAAAAAAOGS}{\bkmkend AAAAAAAOGS}
01304 \par
{\bkmkstart AAAAAAAOGT}{\bkmkend AAAAAAAOGT}
01305  private:\par
{\bkmkstart AAAAAAAOGU}{\bkmkend AAAAAAAOGU}
01306   {\cf20 // Registers and returns a global test environment.  When a test}\par
{\bkmkstart AAAAAAAOGV}{\bkmkend AAAAAAAOGV}
01307   {\cf20 // program is run, all global test environments will be set-up in}\par
{\bkmkstart AAAAAAAOGW}{\bkmkend AAAAAAAOGW}
01308   {\cf20 // the order they were registered.  After all tests in the program}\par
{\bkmkstart AAAAAAAOGX}{\bkmkend AAAAAAAOGX}
01309   {\cf20 // have finished, all global test environments will be torn-down in}\par
{\bkmkstart AAAAAAAOGY}{\bkmkend AAAAAAAOGY}
01310   {\cf20 // the *reverse* order they were registered.}\par
{\bkmkstart AAAAAAAOGZ}{\bkmkend AAAAAAAOGZ}
01311   {\cf20 //}\par
{\bkmkstart AAAAAAAOHA}{\bkmkend AAAAAAAOHA}
01312   {\cf20 // The UnitTest object takes ownership of the given environment.}\par
{\bkmkstart AAAAAAAOHB}{\bkmkend AAAAAAAOHB}
01313   {\cf20 //}\par
{\bkmkstart AAAAAAAOHC}{\bkmkend AAAAAAAOHC}
01314   {\cf20 // This method can only be called from the main thread.}\par
{\bkmkstart AAAAAAAOHD}{\bkmkend AAAAAAAOHD}
01315   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* AddEnvironment({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* env);\par
{\bkmkstart AAAAAAAOHE}{\bkmkend AAAAAAAOHE}
01316 \par
{\bkmkstart AAAAAAAOHF}{\bkmkend AAAAAAAOHF}
01317   {\cf20 // Adds a TestPartResult to the current TestResult object.  All}\par
{\bkmkstart AAAAAAAOHG}{\bkmkend AAAAAAAOHG}
01318   {\cf20 // Google Test assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc)}\par
{\bkmkstart AAAAAAAOHH}{\bkmkend AAAAAAAOHH}
01319   {\cf20 // eventually call this to report their results.  The user code}\par
{\bkmkstart AAAAAAAOHI}{\bkmkend AAAAAAAOHI}
01320   {\cf20 // should use the assertion macros instead of calling this directly.}\par
{\bkmkstart AAAAAAAOHJ}{\bkmkend AAAAAAAOHJ}
01321   {\cf18 void} AddTestPartResult(TestPartResult::{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAQT" }{}}{\fldrslt {\cs37\ul\cf2 Type}}}
 result_type,\par
{\bkmkstart AAAAAAAOHK}{\bkmkend AAAAAAAOHK}
01322                          const {\cf18 char}* file_name,\par
{\bkmkstart AAAAAAAOHL}{\bkmkend AAAAAAAOHL}
01323                          {\cf18 int} line_number,\par
{\bkmkstart AAAAAAAOHM}{\bkmkend AAAAAAAOHM}
01324                          const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQJ" }{}}{\fldrslt {\cs37\ul\cf2 std}}}
::{\cf18 string}& message,\par
{\bkmkstart AAAAAAAOHN}{\bkmkend AAAAAAAOHN}
01325                          const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQJ" }{}}{\fldrslt {\cs37\ul\cf2 std}}}
::{\cf18 string}& os_stack_trace)\par
{\bkmkstart AAAAAAAOHO}{\bkmkend AAAAAAAOHO}
01326       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAOHP}{\bkmkend AAAAAAAOHP}
01327 \par
{\bkmkstart AAAAAAAOHQ}{\bkmkend AAAAAAAOHQ}
01328   {\cf20 // Adds a TestProperty to the current TestResult object when invoked from}\par
{\bkmkstart AAAAAAAOHR}{\bkmkend AAAAAAAOHR}
01329   {\cf20 // inside a test, to current TestCase's ad_hoc_test_result_ when invoked}\par
{\bkmkstart AAAAAAAOHS}{\bkmkend AAAAAAAOHS}
01330   {\cf20 // from SetUpTestCase or TearDownTestCase, or to the global property set}\par
{\bkmkstart AAAAAAAOHT}{\bkmkend AAAAAAAOHT}
01331   {\cf20 // when invoked elsewhere.  If the result already contains a property with}\par
{\bkmkstart AAAAAAAOHU}{\bkmkend AAAAAAAOHU}
01332   {\cf20 // the same key, the value will be updated.}\par
{\bkmkstart AAAAAAAOHV}{\bkmkend AAAAAAAOHV}
01333   {\cf18 void} RecordProperty(const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQJ" }{}}{\fldrslt {\cs37\ul\cf2 std}}}
::{\cf18 string}& key, const {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABQJ" }{}}{\fldrslt {\cs37\ul\cf2 std}}}
::{\cf18 string}& value);\par
{\bkmkstart AAAAAAAOHW}{\bkmkend AAAAAAAOHW}
01334 \par
{\bkmkstart AAAAAAAOHX}{\bkmkend AAAAAAAOHX}
01335   {\cf20 // Gets the i-th test case among all the test cases. i can range from 0 to}\par
{\bkmkstart AAAAAAAOHY}{\bkmkend AAAAAAAOHY}
01336   {\cf20 // total_test_case_count() - 1. If i is not in that range, returns NULL.}\par
{\bkmkstart AAAAAAAOHZ}{\bkmkend AAAAAAAOHZ}
01337   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBC" }{}}{\fldrslt {\cs37\ul\cf2 TestCase}}}
* GetMutableTestCase({\cf18 int} i);\par
{\bkmkstart AAAAAAAOIA}{\bkmkend AAAAAAAOIA}
01338 \par
{\bkmkstart AAAAAAAOIB}{\bkmkend AAAAAAAOIB}
01339   {\cf20 // Accessors for the implementation object.}\par
{\bkmkstart AAAAAAAOIC}{\bkmkend AAAAAAAOIC}
01340   internal::UnitTestImpl* impl() \{ {\cf19 return} impl_; \}\par
{\bkmkstart AAAAAAAOID}{\bkmkend AAAAAAAOID}
01341   {\cf17 const} internal::UnitTestImpl* impl(){\cf17  const }\{ {\cf19 return} impl_; \}\par
{\bkmkstart AAAAAAAOIE}{\bkmkend AAAAAAAOIE}
01342 \par
{\bkmkstart AAAAAAAOIF}{\bkmkend AAAAAAAOIF}
01343   {\cf20 // These classes and functions are friends as they need to access private}\par
{\bkmkstart AAAAAAAOIG}{\bkmkend AAAAAAAOIG}
01344   {\cf20 // members of UnitTest.}\par
{\bkmkstart AAAAAAAOIH}{\bkmkend AAAAAAAOIH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOII" }{}}{\fldrslt {\cs37\ul\cf2 01345}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIJ" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
;\par
{\bkmkstart AAAAAAAOIK}{\bkmkend AAAAAAAOIK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIL" }{}}{\fldrslt {\cs37\ul\cf2 01346}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
;\par
{\bkmkstart AAAAAAAOIM}{\bkmkend AAAAAAAOIM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIN" }{}}{\fldrslt {\cs37\ul\cf2 01347}}}
   {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIO" }{}}{\fldrslt {\cs37\ul\cf2 internal::AssertHelper}}}
;\par
{\bkmkstart AAAAAAAOIP}{\bkmkend AAAAAAAOIP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIQ" }{}}{\fldrslt {\cs37\ul\cf2 01348}}}
   {\cf17 friend} {\cf17 class }internal::StreamingListenerTest;\par
{\bkmkstart AAAAAAAOIR}{\bkmkend AAAAAAAOIR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIS" }{}}{\fldrslt {\cs37\ul\cf2 01349}}}
   {\cf17 friend} {\cf17 class }internal::UnitTestRecordPropertyTestHelper;\par
{\bkmkstart AAAAAAAOIT}{\bkmkend AAAAAAAOIT}
01350   {\cf17 friend} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIU" }{}}{\fldrslt {\cs37\ul\cf2 AddGlobalTestEnvironment}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* env);\par
{\bkmkstart AAAAAAAOIV}{\bkmkend AAAAAAAOIV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIW" }{}}{\fldrslt {\cs37\ul\cf2 01351}}}
   {\cf17 friend} internal::UnitTestImpl* internal::GetUnitTestImpl();\par
{\bkmkstart AAAAAAAOIX}{\bkmkend AAAAAAAOIX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIY" }{}}{\fldrslt {\cs37\ul\cf2 01352}}}
   {\cf17 friend} {\cf18 void} internal::ReportFailureInUnknownLocation(\par
{\bkmkstart AAAAAAAOIZ}{\bkmkend AAAAAAAOIZ}
01353       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 TestPartResult::Type}}}
 result_type,\par
{\bkmkstart AAAAAAAOJA}{\bkmkend AAAAAAAOJA}
01354       {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& message);\par
{\bkmkstart AAAAAAAOJB}{\bkmkend AAAAAAAOJB}
01355 \par
{\bkmkstart AAAAAAAOJC}{\bkmkend AAAAAAAOJC}
01356   {\cf20 // Creates an empty UnitTest.}\par
{\bkmkstart AAAAAAAOJD}{\bkmkend AAAAAAAOJD}
01357   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
();\par
{\bkmkstart AAAAAAAOJE}{\bkmkend AAAAAAAOJE}
01358 \par
{\bkmkstart AAAAAAAOJF}{\bkmkend AAAAAAAOJF}
01359   {\cf20 // D'tor}\par
{\bkmkstart AAAAAAAOJG}{\bkmkend AAAAAAAOJG}
01360   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 ~UnitTest}}}
();\par
{\bkmkstart AAAAAAAOJH}{\bkmkend AAAAAAAOJH}
01361 \par
{\bkmkstart AAAAAAAOJI}{\bkmkend AAAAAAAOJI}
01362   {\cf20 // Pushes a trace defined by SCOPED_TRACE() on to the per-thread}\par
{\bkmkstart AAAAAAAOJJ}{\bkmkend AAAAAAAOJJ}
01363   {\cf20 // Google Test trace stack.}\par
{\bkmkstart AAAAAAAOJK}{\bkmkend AAAAAAAOJK}
01364   {\cf18 void} PushGTestTrace({\cf17 const} internal::TraceInfo& trace)\par
{\bkmkstart AAAAAAAOJL}{\bkmkend AAAAAAAOJL}
01365       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAOJM}{\bkmkend AAAAAAAOJM}
01366 \par
{\bkmkstart AAAAAAAOJN}{\bkmkend AAAAAAAOJN}
01367   {\cf20 // Pops a trace from the per-thread Google Test trace stack.}\par
{\bkmkstart AAAAAAAOJO}{\bkmkend AAAAAAAOJO}
01368   {\cf18 void} PopGTestTrace()\par
{\bkmkstart AAAAAAAOJP}{\bkmkend AAAAAAAOJP}
01369       {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_LOCK_EXCLUDED_}}}
(mutex_);\par
{\bkmkstart AAAAAAAOJQ}{\bkmkend AAAAAAAOJQ}
01370 \par
{\bkmkstart AAAAAAAOJR}{\bkmkend AAAAAAAOJR}
01371   {\cf20 // Protects mutable state in *impl_.  This is mutable as some const}\par
{\bkmkstart AAAAAAAOJS}{\bkmkend AAAAAAAOJS}
01372   {\cf20 // methods need to lock it too.}\par
{\bkmkstart AAAAAAAOJT}{\bkmkend AAAAAAAOJT}
01373   mutable internal::Mutex mutex_;\par
{\bkmkstart AAAAAAAOJU}{\bkmkend AAAAAAAOJU}
01374 \par
{\bkmkstart AAAAAAAOJV}{\bkmkend AAAAAAAOJV}
01375   {\cf20 // Opaque implementation object.  This field is never changed once}\par
{\bkmkstart AAAAAAAOJW}{\bkmkend AAAAAAAOJW}
01376   {\cf20 // the object is constructed.  We don't mark it as const here, as}\par
{\bkmkstart AAAAAAAOJX}{\bkmkend AAAAAAAOJX}
01377   {\cf20 // doing so will cause a warning in the constructor of UnitTest.}\par
{\bkmkstart AAAAAAAOJY}{\bkmkend AAAAAAAOJY}
01378   {\cf20 // Mutable state in *impl_ is protected by mutex_.}\par
{\bkmkstart AAAAAAAOJZ}{\bkmkend AAAAAAAOJZ}
01379   internal::UnitTestImpl* impl_;\par
{\bkmkstart AAAAAAAOKA}{\bkmkend AAAAAAAOKA}
01380 \par
{\bkmkstart AAAAAAAOKB}{\bkmkend AAAAAAAOKB}
01381   {\cf20 // We disallow copying UnitTest.}\par
{\bkmkstart AAAAAAAOKC}{\bkmkend AAAAAAAOKC}
01382   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANBF" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest}}}
);\par
{\bkmkstart AAAAAAAOKD}{\bkmkend AAAAAAAOKD}
01383 \};\par
{\bkmkstart AAAAAAAOKE}{\bkmkend AAAAAAAOKE}
01384 \par
{\bkmkstart AAAAAAAOKF}{\bkmkend AAAAAAAOKF}
01385 {\cf20 // A convenient wrapper for adding an environment for the test}\par
{\bkmkstart AAAAAAAOKG}{\bkmkend AAAAAAAOKG}
01386 {\cf20 // program.}\par
{\bkmkstart AAAAAAAOKH}{\bkmkend AAAAAAAOKH}
01387 {\cf20 //}\par
{\bkmkstart AAAAAAAOKI}{\bkmkend AAAAAAAOKI}
01388 {\cf20 // You should call this before RUN_ALL_TESTS() is called, probably in}\par
{\bkmkstart AAAAAAAOKJ}{\bkmkend AAAAAAAOKJ}
01389 {\cf20 // main().  If you use gtest_main, you need to call this before main()}\par
{\bkmkstart AAAAAAAOKK}{\bkmkend AAAAAAAOKK}
01390 {\cf20 // starts for it to take effect.  For example, you can define a global}\par
{\bkmkstart AAAAAAAOKL}{\bkmkend AAAAAAAOKL}
01391 {\cf20 // variable like this:}\par
{\bkmkstart AAAAAAAOKM}{\bkmkend AAAAAAAOKM}
01392 {\cf20 //}\par
{\bkmkstart AAAAAAAOKN}{\bkmkend AAAAAAAOKN}
01393 {\cf20 //   testing::Environment* const foo_env =}\par
{\bkmkstart AAAAAAAOKO}{\bkmkend AAAAAAAOKO}
01394 {\cf20 //       testing::AddGlobalTestEnvironment(new FooEnvironment);}\par
{\bkmkstart AAAAAAAOKP}{\bkmkend AAAAAAAOKP}
01395 {\cf20 //}\par
{\bkmkstart AAAAAAAOKQ}{\bkmkend AAAAAAAOKQ}
01396 {\cf20 // However, we strongly recommend you to write your own main() and}\par
{\bkmkstart AAAAAAAOKR}{\bkmkend AAAAAAAOKR}
01397 {\cf20 // call AddGlobalTestEnvironment() there, as relying on initialization}\par
{\bkmkstart AAAAAAAOKS}{\bkmkend AAAAAAAOKS}
01398 {\cf20 // of global variables makes the code harder to read and may cause}\par
{\bkmkstart AAAAAAAOKT}{\bkmkend AAAAAAAOKT}
01399 {\cf20 // problems when you register multiple environments from different}\par
{\bkmkstart AAAAAAAOKU}{\bkmkend AAAAAAAOKU}
01400 {\cf20 // translation units and the environments have dependencies among them}\par
{\bkmkstart AAAAAAAOKV}{\bkmkend AAAAAAAOKV}
01401 {\cf20 // (remember that the compiler doesn't guarantee the order in which}\par
{\bkmkstart AAAAAAAOKW}{\bkmkend AAAAAAAOKW}
01402 {\cf20 // global variables from different translation units are initialized).}\par
{\bkmkstart AAAAAAAOKX}{\bkmkend AAAAAAAOKX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOKY" }{}}{\fldrslt {\cs37\ul\cf2 01403}}}
 inline {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIU" }{}}{\fldrslt {\cs37\ul\cf2 AddGlobalTestEnvironment}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAANST" }{}}{\fldrslt {\cs37\ul\cf2 Environment}}}
* env) \{\par
{\bkmkstart AAAAAAAOKZ}{\bkmkend AAAAAAAOKZ}
01404   {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCD" }{}}{\fldrslt {\cs37\ul\cf2 UnitTest::GetInstance}}}
()->AddEnvironment(env);\par
{\bkmkstart AAAAAAAOLA}{\bkmkend AAAAAAAOLA}
01405 \}\par
{\bkmkstart AAAAAAAOLB}{\bkmkend AAAAAAAOLB}
01406 \par
{\bkmkstart AAAAAAAOLC}{\bkmkend AAAAAAAOLC}
01407 {\cf20 // Initializes Google Test.  This must be called before calling}\par
{\bkmkstart AAAAAAAOLD}{\bkmkend AAAAAAAOLD}
01408 {\cf20 // RUN_ALL_TESTS().  In particular, it parses a command line for the}\par
{\bkmkstart AAAAAAAOLE}{\bkmkend AAAAAAAOLE}
01409 {\cf20 // flags that Google Test recognizes.  Whenever a Google Test flag is}\par
{\bkmkstart AAAAAAAOLF}{\bkmkend AAAAAAAOLF}
01410 {\cf20 // seen, it is removed from argv, and *argc is decremented.}\par
{\bkmkstart AAAAAAAOLG}{\bkmkend AAAAAAAOLG}
01411 {\cf20 //}\par
{\bkmkstart AAAAAAAOLH}{\bkmkend AAAAAAAOLH}
01412 {\cf20 // No value is returned.  Instead, the Google Test flag variables are}\par
{\bkmkstart AAAAAAAOLI}{\bkmkend AAAAAAAOLI}
01413 {\cf20 // updated.}\par
{\bkmkstart AAAAAAAOLJ}{\bkmkend AAAAAAAOLJ}
01414 {\cf20 //}\par
{\bkmkstart AAAAAAAOLK}{\bkmkend AAAAAAAOLK}
01415 {\cf20 // Calling the function for the second time has no user-visible effect.}\par
{\bkmkstart AAAAAAAOLL}{\bkmkend AAAAAAAOLL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOLM" }{}}{\fldrslt {\cs37\ul\cf2 01416}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOLM" }{}}{\fldrslt {\cs37\ul\cf2 InitGoogleTest}}}
({\cf18 int}* argc, {\cf18 char}** argv);\par
{\bkmkstart AAAAAAAOLN}{\bkmkend AAAAAAAOLN}
01417 \par
{\bkmkstart AAAAAAAOLO}{\bkmkend AAAAAAAOLO}
01418 {\cf20 // This overloaded version can be used in Windows programs compiled in}\par
{\bkmkstart AAAAAAAOLP}{\bkmkend AAAAAAAOLP}
01419 {\cf20 // UNICODE mode.}\par
{\bkmkstart AAAAAAAOLQ}{\bkmkend AAAAAAAOLQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOLR" }{}}{\fldrslt {\cs37\ul\cf2 01420}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOLM" }{}}{\fldrslt {\cs37\ul\cf2 InitGoogleTest}}}
({\cf18 int}* argc, {\cf18 wchar_t}** argv);\par
{\bkmkstart AAAAAAAOLS}{\bkmkend AAAAAAAOLS}
01421 \par
{\bkmkstart AAAAAAAOLT}{\bkmkend AAAAAAAOLT}
01422 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAAAOLU}{\bkmkend AAAAAAAOLU}
01423 \par
{\bkmkstart AAAAAAAOLV}{\bkmkend AAAAAAAOLV}
01424 {\cf20 // Separate the error generating code from the code path to reduce the stack}\par
{\bkmkstart AAAAAAAOLW}{\bkmkend AAAAAAAOLW}
01425 {\cf20 // frame size of CmpHelperEQ. This helps reduce the overhead of some sanitizers}\par
{\bkmkstart AAAAAAAOLX}{\bkmkend AAAAAAAOLX}
01426 {\cf20 // when calling EXPECT_* in a tight loop.}\par
{\bkmkstart AAAAAAAOLY}{\bkmkend AAAAAAAOLY}
01427 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAOLZ}{\bkmkend AAAAAAAOLZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMA" }{}}{\fldrslt {\cs37\ul\cf2 01428}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMA" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQFailure}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOMB}{\bkmkend AAAAAAAOMB}
01429                                    {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOMC}{\bkmkend AAAAAAAOMC}
01430                                    {\cf17 const} T1& lhs, {\cf17 const} T2& rhs) \{\par
{\bkmkstart AAAAAAAOMD}{\bkmkend AAAAAAAOMD}
01431   {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOME" }{}}{\fldrslt {\cs37\ul\cf2 EqFailure}}}
(lhs_expression,\par
{\bkmkstart AAAAAAAOMF}{\bkmkend AAAAAAAOMF}
01432                    rhs_expression,\par
{\bkmkstart AAAAAAAOMG}{\bkmkend AAAAAAAOMG}
01433                    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJTY" }{}}{\fldrslt {\cs37\ul\cf2 FormatForComparisonFailureMessage}}}
(lhs, rhs),\par
{\bkmkstart AAAAAAAOMH}{\bkmkend AAAAAAAOMH}
01434                    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJTY" }{}}{\fldrslt {\cs37\ul\cf2 FormatForComparisonFailureMessage}}}
(rhs, lhs),\par
{\bkmkstart AAAAAAAOMI}{\bkmkend AAAAAAAOMI}
01435                    {\cf17 false});\par
{\bkmkstart AAAAAAAOMJ}{\bkmkend AAAAAAAOMJ}
01436 \}\par
{\bkmkstart AAAAAAAOMK}{\bkmkend AAAAAAAOMK}
01437 \par
{\bkmkstart AAAAAAAOML}{\bkmkend AAAAAAAOML}
01438 {\cf20 // The helper function for \{ASSERT|EXPECT\}_EQ.}\par
{\bkmkstart AAAAAAAOMM}{\bkmkend AAAAAAAOMM}
01439 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAOMN}{\bkmkend AAAAAAAOMN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMO" }{}}{\fldrslt {\cs37\ul\cf2 01440}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOMQ}{\bkmkend AAAAAAAOMQ}
01441                             {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOMR}{\bkmkend AAAAAAAOMR}
01442                             {\cf17 const} T1& lhs,\par
{\bkmkstart AAAAAAAOMS}{\bkmkend AAAAAAAOMS}
01443                             {\cf17 const} T2& rhs) \{\par
{\bkmkstart AAAAAAAOMT}{\bkmkend AAAAAAAOMT}
01444   {\cf19 if} (lhs == rhs) \{\par
{\bkmkstart AAAAAAAOMU}{\bkmkend AAAAAAAOMU}
01445     {\cf19 return} AssertionSuccess();\par
{\bkmkstart AAAAAAAOMV}{\bkmkend AAAAAAAOMV}
01446   \}\par
{\bkmkstart AAAAAAAOMW}{\bkmkend AAAAAAAOMW}
01447 \par
{\bkmkstart AAAAAAAOMX}{\bkmkend AAAAAAAOMX}
01448   {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMA" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQFailure}}}
(lhs_expression, rhs_expression, lhs, rhs);\par
{\bkmkstart AAAAAAAOMY}{\bkmkend AAAAAAAOMY}
01449 \}\par
{\bkmkstart AAAAAAAOMZ}{\bkmkend AAAAAAAOMZ}
01450 \par
{\bkmkstart AAAAAAAONA}{\bkmkend AAAAAAAONA}
01451 {\cf20 // With this overloaded version, we allow anonymous enums to be used}\par
{\bkmkstart AAAAAAAONB}{\bkmkend AAAAAAAONB}
01452 {\cf20 // in \{ASSERT|EXPECT\}_EQ when compiled with gcc 4, as anonymous enums}\par
{\bkmkstart AAAAAAAONC}{\bkmkend AAAAAAAONC}
01453 {\cf20 // can be implicitly cast to BiggestInt.}\par
{\bkmkstart AAAAAAAOND}{\bkmkend AAAAAAAOND}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 01454}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAONE}{\bkmkend AAAAAAAONE}
01455                                        {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAONF}{\bkmkend AAAAAAAONF}
01456                                        {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
 lhs,\par
{\bkmkstart AAAAAAAONG}{\bkmkend AAAAAAAONG}
01457                                        {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
 rhs);\par
{\bkmkstart AAAAAAAONH}{\bkmkend AAAAAAAONH}
01458 \par
{\bkmkstart AAAAAAAONI}{\bkmkend AAAAAAAONI}
01459 {\cf20 // The helper class for \{ASSERT|EXPECT\}_EQ.  The template argument}\par
{\bkmkstart AAAAAAAONJ}{\bkmkend AAAAAAAONJ}
01460 {\cf20 // lhs_is_null_literal is true iff the first argument to ASSERT_EQ()}\par
{\bkmkstart AAAAAAAONK}{\bkmkend AAAAAAAONK}
01461 {\cf20 // is a null pointer literal.  The following default implementation is}\par
{\bkmkstart AAAAAAAONL}{\bkmkend AAAAAAAONL}
01462 {\cf20 // for lhs_is_null_literal being false.}\par
{\bkmkstart AAAAAAAONM}{\bkmkend AAAAAAAONM}
01463 {\cf17 template} <{\cf18 bool} lhs_is_null_literal>\par
{\bkmkstart AAAAAAAONN}{\bkmkend AAAAAAAONN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAONO" }{}}{\fldrslt {\cs37\ul\cf2 01464}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAONO" }{}}{\fldrslt {\cs37\ul\cf2 EqHelper}}}
 \{\par
{\bkmkstart AAAAAAAONP}{\bkmkend AAAAAAAONP}
01465  {\cf17 public}:\par
{\bkmkstart AAAAAAAONQ}{\bkmkend AAAAAAAONQ}
01466   {\cf20 // This templatized version is for the general case.}\par
{\bkmkstart AAAAAAAONR}{\bkmkend AAAAAAAONR}
01467   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAONS}{\bkmkend AAAAAAAONS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAONT" }{}}{\fldrslt {\cs37\ul\cf2 01468}}}
   {\cf17 static} AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAONT" }{}}{\fldrslt {\cs37\ul\cf2 Compare}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAONU}{\bkmkend AAAAAAAONU}
01469                                  {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAONV}{\bkmkend AAAAAAAONV}
01470                                  {\cf17 const} T1& lhs,\par
{\bkmkstart AAAAAAAONW}{\bkmkend AAAAAAAONW}
01471                                  {\cf17 const} T2& rhs) \{\par
{\bkmkstart AAAAAAAONX}{\bkmkend AAAAAAAONX}
01472     {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
(lhs_expression, rhs_expression, lhs, rhs);\par
{\bkmkstart AAAAAAAONY}{\bkmkend AAAAAAAONY}
01473   \}\par
{\bkmkstart AAAAAAAONZ}{\bkmkend AAAAAAAONZ}
01474 \par
{\bkmkstart AAAAAAAOOA}{\bkmkend AAAAAAAOOA}
01475   {\cf20 // With this overloaded version, we allow anonymous enums to be used}\par
{\bkmkstart AAAAAAAOOB}{\bkmkend AAAAAAAOOB}
01476   {\cf20 // in \{ASSERT|EXPECT\}_EQ when compiled with gcc 4, as anonymous}\par
{\bkmkstart AAAAAAAOOC}{\bkmkend AAAAAAAOOC}
01477   {\cf20 // enums can be implicitly cast to BiggestInt.}\par
{\bkmkstart AAAAAAAOOD}{\bkmkend AAAAAAAOOD}
01478   {\cf20 //}\par
{\bkmkstart AAAAAAAOOE}{\bkmkend AAAAAAAOOE}
01479   {\cf20 // Even though its body looks the same as the above version, we}\par
{\bkmkstart AAAAAAAOOF}{\bkmkend AAAAAAAOOF}
01480   {\cf20 // cannot merge the two, as it will make anonymous enums unhappy.}\par
{\bkmkstart AAAAAAAOOG}{\bkmkend AAAAAAAOOG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOOH" }{}}{\fldrslt {\cs37\ul\cf2 01481}}}
   {\cf17 static} AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOOH" }{}}{\fldrslt {\cs37\ul\cf2 Compare}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOOI}{\bkmkend AAAAAAAOOI}
01482                                  {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOOJ}{\bkmkend AAAAAAAOOJ}
01483                                  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
 lhs,\par
{\bkmkstart AAAAAAAOOK}{\bkmkend AAAAAAAOOK}
01484                                  {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJLT" }{}}{\fldrslt {\cs37\ul\cf2 BiggestInt}}}
 rhs) \{\par
{\bkmkstart AAAAAAAOOL}{\bkmkend AAAAAAAOOL}
01485     {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
(lhs_expression, rhs_expression, lhs, rhs);\par
{\bkmkstart AAAAAAAOOM}{\bkmkend AAAAAAAOOM}
01486   \}\par
{\bkmkstart AAAAAAAOON}{\bkmkend AAAAAAAOON}
01487 \};\par
{\bkmkstart AAAAAAAOOO}{\bkmkend AAAAAAAOOO}
01488 \par
{\bkmkstart AAAAAAAOOP}{\bkmkend AAAAAAAOOP}
01489 {\cf20 // This specialization is used when the first argument to ASSERT_EQ()}\par
{\bkmkstart AAAAAAAOOQ}{\bkmkend AAAAAAAOOQ}
01490 {\cf20 // is a null pointer literal, like NULL, false, or 0.}\par
{\bkmkstart AAAAAAAOOR}{\bkmkend AAAAAAAOOR}
01491 {\cf17 template} <>\par
{\bkmkstart AAAAAAAOOS}{\bkmkend AAAAAAAOOS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOOT" }{}}{\fldrslt {\cs37\ul\cf2 01492}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAONO" }{}}{\fldrslt {\cs37\ul\cf2 EqHelper}}}
<true> \{\par
{\bkmkstart AAAAAAAOOU}{\bkmkend AAAAAAAOOU}
01493  {\cf17 public}:\par
{\bkmkstart AAAAAAAOOV}{\bkmkend AAAAAAAOOV}
01494   {\cf20 // We define two overloaded versions of Compare().  The first}\par
{\bkmkstart AAAAAAAOOW}{\bkmkend AAAAAAAOOW}
01495   {\cf20 // version will be picked when the second argument to ASSERT_EQ() is}\par
{\bkmkstart AAAAAAAOOX}{\bkmkend AAAAAAAOOX}
01496   {\cf20 // NOT a pointer, e.g. ASSERT_EQ(0, AnIntFunction()) or}\par
{\bkmkstart AAAAAAAOOY}{\bkmkend AAAAAAAOOY}
01497   {\cf20 // EXPECT_EQ(false, a_bool).}\par
{\bkmkstart AAAAAAAOOZ}{\bkmkend AAAAAAAOOZ}
01498   {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAOPA}{\bkmkend AAAAAAAOPA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOPB" }{}}{\fldrslt {\cs37\ul\cf2 01499}}}
   {\cf17 static} AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOPB" }{}}{\fldrslt {\cs37\ul\cf2 Compare}}}
(\par
{\bkmkstart AAAAAAAOPC}{\bkmkend AAAAAAAOPC}
01500       {\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOPD}{\bkmkend AAAAAAAOPD}
01501       {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOPE}{\bkmkend AAAAAAAOPE}
01502       {\cf17 const} T1& lhs,\par
{\bkmkstart AAAAAAAOPF}{\bkmkend AAAAAAAOPF}
01503       {\cf17 const} T2& rhs,\par
{\bkmkstart AAAAAAAOPG}{\bkmkend AAAAAAAOPG}
01504       {\cf20 // The following line prevents this overload from being considered if T2}\par
{\bkmkstart AAAAAAAOPH}{\bkmkend AAAAAAAOPH}
01505       {\cf20 // is not a pointer type.  We need this because ASSERT_EQ(NULL, my_ptr)}\par
{\bkmkstart AAAAAAAOPI}{\bkmkend AAAAAAAOPI}
01506       {\cf20 // expands to Compare("", "", NULL, my_ptr), which requires a conversion}\par
{\bkmkstart AAAAAAAOPJ}{\bkmkend AAAAAAAOPJ}
01507       {\cf20 // to match the Secret* in the other overload, which would otherwise make}\par
{\bkmkstart AAAAAAAOPK}{\bkmkend AAAAAAAOPK}
01508       {\cf20 // this template match better.}\par
{\bkmkstart AAAAAAAOPL}{\bkmkend AAAAAAAOPL}
01509       {\cf17 typename} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOPM" }{}}{\fldrslt {\cs37\ul\cf2 EnableIf}}}
<!{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJZO" }{}}{\fldrslt {\cs37\ul\cf2 is_pointer<T2>::value}}}
>::type* = 0) \{\par
{\bkmkstart AAAAAAAOPN}{\bkmkend AAAAAAAOPN}
01510     {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
(lhs_expression, rhs_expression, lhs, rhs);\par
{\bkmkstart AAAAAAAOPO}{\bkmkend AAAAAAAOPO}
01511   \}\par
{\bkmkstart AAAAAAAOPP}{\bkmkend AAAAAAAOPP}
01512 \par
{\bkmkstart AAAAAAAOPQ}{\bkmkend AAAAAAAOPQ}
01513   {\cf20 // This version will be picked when the second argument to ASSERT_EQ() is a}\par
{\bkmkstart AAAAAAAOPR}{\bkmkend AAAAAAAOPR}
01514   {\cf20 // pointer, e.g. ASSERT_EQ(NULL, a_pointer).}\par
{\bkmkstart AAAAAAAOPS}{\bkmkend AAAAAAAOPS}
01515   {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAOPT}{\bkmkend AAAAAAAOPT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOPU" }{}}{\fldrslt {\cs37\ul\cf2 01516}}}
   {\cf17 static} AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOPU" }{}}{\fldrslt {\cs37\ul\cf2 Compare}}}
(\par
{\bkmkstart AAAAAAAOPV}{\bkmkend AAAAAAAOPV}
01517       {\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOPW}{\bkmkend AAAAAAAOPW}
01518       {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOPX}{\bkmkend AAAAAAAOPX}
01519       {\cf20 // We used to have a second template parameter instead of Secret*.  That}\par
{\bkmkstart AAAAAAAOPY}{\bkmkend AAAAAAAOPY}
01520       {\cf20 // template parameter would deduce to 'long', making this a better match}\par
{\bkmkstart AAAAAAAOPZ}{\bkmkend AAAAAAAOPZ}
01521       {\cf20 // than the first overload even without the first overload's EnableIf.}\par
{\bkmkstart AAAAAAAOQA}{\bkmkend AAAAAAAOQA}
01522       {\cf20 // Unfortunately, gcc with -Wconversion-null warns when "passing NULL to}\par
{\bkmkstart AAAAAAAOQB}{\bkmkend AAAAAAAOQB}
01523       {\cf20 // non-pointer argument" (even a deduced integral argument), so the old}\par
{\bkmkstart AAAAAAAOQC}{\bkmkend AAAAAAAOQC}
01524       {\cf20 // implementation caused warnings in user code.}\par
{\bkmkstart AAAAAAAOQD}{\bkmkend AAAAAAAOQD}
01525       Secret* {\cf20 /* lhs (NULL) */},\par
{\bkmkstart AAAAAAAOQE}{\bkmkend AAAAAAAOQE}
01526       T* rhs) \{\par
{\bkmkstart AAAAAAAOQF}{\bkmkend AAAAAAAOQF}
01527     {\cf20 // We already know that 'lhs' is a null pointer.}\par
{\bkmkstart AAAAAAAOQG}{\bkmkend AAAAAAAOQG}
01528     {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOMP" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperEQ}}}
(lhs_expression, rhs_expression,\par
{\bkmkstart AAAAAAAOQH}{\bkmkend AAAAAAAOQH}
01529                        {\cf17 static_cast<}T*{\cf17 >}(NULL), rhs);\par
{\bkmkstart AAAAAAAOQI}{\bkmkend AAAAAAAOQI}
01530   \}\par
{\bkmkstart AAAAAAAOQJ}{\bkmkend AAAAAAAOQJ}
01531 \};\par
{\bkmkstart AAAAAAAOQK}{\bkmkend AAAAAAAOQK}
01532 \par
{\bkmkstart AAAAAAAOQL}{\bkmkend AAAAAAAOQL}
01533 {\cf20 // Separate the error generating code from the code path to reduce the stack}\par
{\bkmkstart AAAAAAAOQM}{\bkmkend AAAAAAAOQM}
01534 {\cf20 // frame size of CmpHelperOP. This helps reduce the overhead of some sanitizers}\par
{\bkmkstart AAAAAAAOQN}{\bkmkend AAAAAAAOQN}
01535 {\cf20 // when calling EXPECT_OP in a tight loop.}\par
{\bkmkstart AAAAAAAOQO}{\bkmkend AAAAAAAOQO}
01536 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAOQP}{\bkmkend AAAAAAAOQP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOQQ" }{}}{\fldrslt {\cs37\ul\cf2 01537}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOQQ" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperOpFailure}}}
({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
{\bkmkstart AAAAAAAOQR}{\bkmkend AAAAAAAOQR}
01538                                    {\cf17 const} T1& val1, {\cf17 const} T2& val2,\par
{\bkmkstart AAAAAAAOQS}{\bkmkend AAAAAAAOQS}
01539                                    {\cf17 const} {\cf18 char}* op) \{\par
{\bkmkstart AAAAAAAOQT}{\bkmkend AAAAAAAOQT}
01540   {\cf19 return} AssertionFailure()\par
{\bkmkstart AAAAAAAOQU}{\bkmkend AAAAAAAOQU}
01541          << {\cf22 "Expected: ("} << expr1 << {\cf22 ") "} << op << {\cf22 " ("} << expr2\par
{\bkmkstart AAAAAAAOQV}{\bkmkend AAAAAAAOQV}
01542          << {\cf22 "), actual: "} << {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJTY" }{}}{\fldrslt {\cs37\ul\cf2 FormatForComparisonFailureMessage}}}
(val1, val2)\par
{\bkmkstart AAAAAAAOQW}{\bkmkend AAAAAAAOQW}
01543          << {\cf22 " vs "} << {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAJTY" }{}}{\fldrslt {\cs37\ul\cf2 FormatForComparisonFailureMessage}}}
(val2, val1);\par
{\bkmkstart AAAAAAAOQX}{\bkmkend AAAAAAAOQX}
01544 \}\par
{\bkmkstart AAAAAAAOQY}{\bkmkend AAAAAAAOQY}
01545 \par
{\bkmkstart AAAAAAAOQZ}{\bkmkend AAAAAAAOQZ}
01546 {\cf20 // A macro for implementing the helper functions needed to implement}\par
{\bkmkstart AAAAAAAORA}{\bkmkend AAAAAAAORA}
01547 {\cf20 // ASSERT_?? and EXPECT_??.  It is here just to avoid copy-and-paste}\par
{\bkmkstart AAAAAAAORB}{\bkmkend AAAAAAAORB}
01548 {\cf20 // of similar code.}\par
{\bkmkstart AAAAAAAORC}{\bkmkend AAAAAAAORC}
01549 {\cf20 //}\par
{\bkmkstart AAAAAAAORD}{\bkmkend AAAAAAAORD}
01550 {\cf20 // For each templatized helper function, we also define an overloaded}\par
{\bkmkstart AAAAAAAORE}{\bkmkend AAAAAAAORE}
01551 {\cf20 // version for BiggestInt in order to reduce code bloat and allow}\par
{\bkmkstart AAAAAAAORF}{\bkmkend AAAAAAAORF}
01552 {\cf20 // anonymous enums to be used with \{ASSERT|EXPECT\}_?? when compiled}\par
{\bkmkstart AAAAAAAORG}{\bkmkend AAAAAAAORG}
01553 {\cf20 // with gcc 4.}\par
{\bkmkstart AAAAAAAORH}{\bkmkend AAAAAAAORH}
01554 {\cf20 //}\par
{\bkmkstart AAAAAAAORI}{\bkmkend AAAAAAAORI}
01555 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAORJ}{\bkmkend AAAAAAAORJ}
01556 \par
{\bkmkstart AAAAAAAORK}{\bkmkend AAAAAAAORK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 01557}}}
 {\cf21 #define GTEST_IMPL_CMP_HELPER_(op_name, op)\\}\par
{\bkmkstart AAAAAAAORM}{\bkmkend AAAAAAAORM}
01558 {\cf21 template <typename T1, typename T2>\\}\par
{\bkmkstart AAAAAAAORN}{\bkmkend AAAAAAAORN}
01559 {\cf21 AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \\}\par
{\bkmkstart AAAAAAAORO}{\bkmkend AAAAAAAORO}
01560 {\cf21                                    const T1& val1, const T2& val2) \{\\}\par
{\bkmkstart AAAAAAAORP}{\bkmkend AAAAAAAORP}
01561 {\cf21   if (val1 op val2) \{\\}\par
{\bkmkstart AAAAAAAORQ}{\bkmkend AAAAAAAORQ}
01562 {\cf21     return AssertionSuccess();\\}\par
{\bkmkstart AAAAAAAORR}{\bkmkend AAAAAAAORR}
01563 {\cf21   \} else \{\\}\par
{\bkmkstart AAAAAAAORS}{\bkmkend AAAAAAAORS}
01564 {\cf21     return CmpHelperOpFailure(expr1, expr2, val1, val2, #op);\\}\par
{\bkmkstart AAAAAAAORT}{\bkmkend AAAAAAAORT}
01565 {\cf21   \}\\}\par
{\bkmkstart AAAAAAAORU}{\bkmkend AAAAAAAORU}
01566 {\cf21 \}\\}\par
{\bkmkstart AAAAAAAORV}{\bkmkend AAAAAAAORV}
01567 {\cf21 GTEST_API_ AssertionResult CmpHelper##op_name(\\}\par
{\bkmkstart AAAAAAAORW}{\bkmkend AAAAAAAORW}
01568 {\cf21     const char* expr1, const char* expr2, BiggestInt val1, BiggestInt val2)}\par
{\bkmkstart AAAAAAAORX}{\bkmkend AAAAAAAORX}
01569 \par
{\bkmkstart AAAAAAAORY}{\bkmkend AAAAAAAORY}
01570 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAORZ}{\bkmkend AAAAAAAORZ}
01571 \par
{\bkmkstart AAAAAAAOSA}{\bkmkend AAAAAAAOSA}
01572 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_NE}\par
{\bkmkstart AAAAAAAOSB}{\bkmkend AAAAAAAOSB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSC" }{}}{\fldrslt {\cs37\ul\cf2 01573}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPL_CMP_HELPER_}}}
(NE, !=);\par
{\bkmkstart AAAAAAAOSD}{\bkmkend AAAAAAAOSD}
01574 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_LE}\par
{\bkmkstart AAAAAAAOSE}{\bkmkend AAAAAAAOSE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSF" }{}}{\fldrslt {\cs37\ul\cf2 01575}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPL_CMP_HELPER_}}}
(LE, <=);\par
{\bkmkstart AAAAAAAOSG}{\bkmkend AAAAAAAOSG}
01576 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_LT}\par
{\bkmkstart AAAAAAAOSH}{\bkmkend AAAAAAAOSH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSI" }{}}{\fldrslt {\cs37\ul\cf2 01577}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPL_CMP_HELPER_}}}
(LT, <);\par
{\bkmkstart AAAAAAAOSJ}{\bkmkend AAAAAAAOSJ}
01578 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_GE}\par
{\bkmkstart AAAAAAAOSK}{\bkmkend AAAAAAAOSK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSL" }{}}{\fldrslt {\cs37\ul\cf2 01579}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPL_CMP_HELPER_}}}
(GE, >=);\par
{\bkmkstart AAAAAAAOSM}{\bkmkend AAAAAAAOSM}
01580 {\cf20 // Implements the helper function for \{ASSERT|EXPECT\}_GT}\par
{\bkmkstart AAAAAAAOSN}{\bkmkend AAAAAAAOSN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSO" }{}}{\fldrslt {\cs37\ul\cf2 01581}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAORL" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_IMPL_CMP_HELPER_}}}
(GT, >);\par
{\bkmkstart AAAAAAAOSP}{\bkmkend AAAAAAAOSP}
01582 \par
{\bkmkstart AAAAAAAOSQ}{\bkmkend AAAAAAAOSQ}
01583 {\cf21 #undef GTEST_IMPL_CMP_HELPER_}\par
{\bkmkstart AAAAAAAOSR}{\bkmkend AAAAAAAOSR}
01584 \par
{\bkmkstart AAAAAAAOSS}{\bkmkend AAAAAAAOSS}
01585 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STREQ.}\par
{\bkmkstart AAAAAAAOST}{\bkmkend AAAAAAAOST}
01586 {\cf20 //}\par
{\bkmkstart AAAAAAAOSU}{\bkmkend AAAAAAAOSU}
01587 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOSV}{\bkmkend AAAAAAAOSV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSW" }{}}{\fldrslt {\cs37\ul\cf2 01588}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSX" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTREQ}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOSY}{\bkmkend AAAAAAAOSY}
01589                                           {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOSZ}{\bkmkend AAAAAAAOSZ}
01590                                           {\cf17 const} {\cf18 char}* s1,\par
{\bkmkstart AAAAAAAOTA}{\bkmkend AAAAAAAOTA}
01591                                           {\cf17 const} {\cf18 char}* s2);\par
{\bkmkstart AAAAAAAOTB}{\bkmkend AAAAAAAOTB}
01592 \par
{\bkmkstart AAAAAAAOTC}{\bkmkend AAAAAAAOTC}
01593 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRCASEEQ.}\par
{\bkmkstart AAAAAAAOTD}{\bkmkend AAAAAAAOTD}
01594 {\cf20 //}\par
{\bkmkstart AAAAAAAOTE}{\bkmkend AAAAAAAOTE}
01595 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOTF}{\bkmkend AAAAAAAOTF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTG" }{}}{\fldrslt {\cs37\ul\cf2 01596}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTG" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTRCASEEQ}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOTH}{\bkmkend AAAAAAAOTH}
01597                                               {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOTI}{\bkmkend AAAAAAAOTI}
01598                                               {\cf17 const} {\cf18 char}* s1,\par
{\bkmkstart AAAAAAAOTJ}{\bkmkend AAAAAAAOTJ}
01599                                               {\cf17 const} {\cf18 char}* s2);\par
{\bkmkstart AAAAAAAOTK}{\bkmkend AAAAAAAOTK}
01600 \par
{\bkmkstart AAAAAAAOTL}{\bkmkend AAAAAAAOTL}
01601 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRNE.}\par
{\bkmkstart AAAAAAAOTM}{\bkmkend AAAAAAAOTM}
01602 {\cf20 //}\par
{\bkmkstart AAAAAAAOTN}{\bkmkend AAAAAAAOTN}
01603 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOTO}{\bkmkend AAAAAAAOTO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTP" }{}}{\fldrslt {\cs37\ul\cf2 01604}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTQ" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTRNE}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOTR}{\bkmkend AAAAAAAOTR}
01605                                           {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOTS}{\bkmkend AAAAAAAOTS}
01606                                           {\cf17 const} {\cf18 char}* s1,\par
{\bkmkstart AAAAAAAOTT}{\bkmkend AAAAAAAOTT}
01607                                           {\cf17 const} {\cf18 char}* s2);\par
{\bkmkstart AAAAAAAOTU}{\bkmkend AAAAAAAOTU}
01608 \par
{\bkmkstart AAAAAAAOTV}{\bkmkend AAAAAAAOTV}
01609 {\cf20 // The helper function for \{ASSERT|EXPECT\}_STRCASENE.}\par
{\bkmkstart AAAAAAAOTW}{\bkmkend AAAAAAAOTW}
01610 {\cf20 //}\par
{\bkmkstart AAAAAAAOTX}{\bkmkend AAAAAAAOTX}
01611 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOTY}{\bkmkend AAAAAAAOTY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTZ" }{}}{\fldrslt {\cs37\ul\cf2 01612}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTZ" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTRCASENE}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOUA}{\bkmkend AAAAAAAOUA}
01613                                               {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOUB}{\bkmkend AAAAAAAOUB}
01614                                               {\cf17 const} {\cf18 char}* s1,\par
{\bkmkstart AAAAAAAOUC}{\bkmkend AAAAAAAOUC}
01615                                               {\cf17 const} {\cf18 char}* s2);\par
{\bkmkstart AAAAAAAOUD}{\bkmkend AAAAAAAOUD}
01616 \par
{\bkmkstart AAAAAAAOUE}{\bkmkend AAAAAAAOUE}
01617 \par
{\bkmkstart AAAAAAAOUF}{\bkmkend AAAAAAAOUF}
01618 {\cf20 // Helper function for *_STREQ on wide strings.}\par
{\bkmkstart AAAAAAAOUG}{\bkmkend AAAAAAAOUG}
01619 {\cf20 //}\par
{\bkmkstart AAAAAAAOUH}{\bkmkend AAAAAAAOUH}
01620 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOUI}{\bkmkend AAAAAAAOUI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSX" }{}}{\fldrslt {\cs37\ul\cf2 01621}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOSX" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTREQ}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOUJ}{\bkmkend AAAAAAAOUJ}
01622                                           {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOUK}{\bkmkend AAAAAAAOUK}
01623                                           {\cf17 const} {\cf18 wchar_t}* s1,\par
{\bkmkstart AAAAAAAOUL}{\bkmkend AAAAAAAOUL}
01624                                           {\cf17 const} {\cf18 wchar_t}* s2);\par
{\bkmkstart AAAAAAAOUM}{\bkmkend AAAAAAAOUM}
01625 \par
{\bkmkstart AAAAAAAOUN}{\bkmkend AAAAAAAOUN}
01626 {\cf20 // Helper function for *_STRNE on wide strings.}\par
{\bkmkstart AAAAAAAOUO}{\bkmkend AAAAAAAOUO}
01627 {\cf20 //}\par
{\bkmkstart AAAAAAAOUP}{\bkmkend AAAAAAAOUP}
01628 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOUQ}{\bkmkend AAAAAAAOUQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTQ" }{}}{\fldrslt {\cs37\ul\cf2 01629}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOTQ" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperSTRNE}}}
({\cf17 const} {\cf18 char}* s1_expression,\par
{\bkmkstart AAAAAAAOUR}{\bkmkend AAAAAAAOUR}
01630                                           {\cf17 const} {\cf18 char}* s2_expression,\par
{\bkmkstart AAAAAAAOUS}{\bkmkend AAAAAAAOUS}
01631                                           {\cf17 const} {\cf18 wchar_t}* s1,\par
{\bkmkstart AAAAAAAOUT}{\bkmkend AAAAAAAOUT}
01632                                           {\cf17 const} {\cf18 wchar_t}* s2);\par
{\bkmkstart AAAAAAAOUU}{\bkmkend AAAAAAAOUU}
01633 \par
{\bkmkstart AAAAAAAOUV}{\bkmkend AAAAAAAOUV}
01634 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAAAOUW}{\bkmkend AAAAAAAOUW}
01635 \par
{\bkmkstart AAAAAAAOUX}{\bkmkend AAAAAAAOUX}
01636 {\cf20 // IsSubstring() and IsNotSubstring() are intended to be used as the}\par
{\bkmkstart AAAAAAAOUY}{\bkmkend AAAAAAAOUY}
01637 {\cf20 // first argument to \{EXPECT,ASSERT\}_PRED_FORMAT2(), not by}\par
{\bkmkstart AAAAAAAOUZ}{\bkmkend AAAAAAAOUZ}
01638 {\cf20 // themselves.  They check whether needle is a substring of haystack}\par
{\bkmkstart AAAAAAAOVA}{\bkmkend AAAAAAAOVA}
01639 {\cf20 // (NULL is considered a substring of itself only), and return an}\par
{\bkmkstart AAAAAAAOVB}{\bkmkend AAAAAAAOVB}
01640 {\cf20 // appropriate error message when they fail.}\par
{\bkmkstart AAAAAAAOVC}{\bkmkend AAAAAAAOVC}
01641 {\cf20 //}\par
{\bkmkstart AAAAAAAOVD}{\bkmkend AAAAAAAOVD}
01642 {\cf20 // The \{needle,haystack\}_expr arguments are the stringified}\par
{\bkmkstart AAAAAAAOVE}{\bkmkend AAAAAAAOVE}
01643 {\cf20 // expressions that generated the two real arguments.}\par
{\bkmkstart AAAAAAAOVF}{\bkmkend AAAAAAAOVF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVG" }{}}{\fldrslt {\cs37\ul\cf2 01644}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVG" }{}}{\fldrslt {\cs37\ul\cf2 IsSubstring}}}
(\par
{\bkmkstart AAAAAAAOVH}{\bkmkend AAAAAAAOVH}
01645     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOVI}{\bkmkend AAAAAAAOVI}
01646     {\cf17 const} {\cf18 char}* needle, {\cf17 const} {\cf18 char}* haystack);\par
{\bkmkstart AAAAAAAOVJ}{\bkmkend AAAAAAAOVJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVK" }{}}{\fldrslt {\cs37\ul\cf2 01647}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVG" }{}}{\fldrslt {\cs37\ul\cf2 IsSubstring}}}
(\par
{\bkmkstart AAAAAAAOVL}{\bkmkend AAAAAAAOVL}
01648     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOVM}{\bkmkend AAAAAAAOVM}
01649     {\cf17 const} {\cf18 wchar_t}* needle, {\cf17 const} {\cf18 wchar_t}* haystack);\par
{\bkmkstart AAAAAAAOVN}{\bkmkend AAAAAAAOVN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVO" }{}}{\fldrslt {\cs37\ul\cf2 01650}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVO" }{}}{\fldrslt {\cs37\ul\cf2 IsNotSubstring}}}
(\par
{\bkmkstart AAAAAAAOVP}{\bkmkend AAAAAAAOVP}
01651     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOVQ}{\bkmkend AAAAAAAOVQ}
01652     {\cf17 const} {\cf18 char}* needle, {\cf17 const} {\cf18 char}* haystack);\par
{\bkmkstart AAAAAAAOVR}{\bkmkend AAAAAAAOVR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVS" }{}}{\fldrslt {\cs37\ul\cf2 01653}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVO" }{}}{\fldrslt {\cs37\ul\cf2 IsNotSubstring}}}
(\par
{\bkmkstart AAAAAAAOVT}{\bkmkend AAAAAAAOVT}
01654     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOVU}{\bkmkend AAAAAAAOVU}
01655     {\cf17 const} {\cf18 wchar_t}* needle, {\cf17 const} {\cf18 wchar_t}* haystack);\par
{\bkmkstart AAAAAAAOVV}{\bkmkend AAAAAAAOVV}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVW" }{}}{\fldrslt {\cs37\ul\cf2 01656}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVG" }{}}{\fldrslt {\cs37\ul\cf2 IsSubstring}}}
(\par
{\bkmkstart AAAAAAAOVX}{\bkmkend AAAAAAAOVX}
01657     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOVY}{\bkmkend AAAAAAAOVY}
01658     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& needle, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& haystack);\par
{\bkmkstart AAAAAAAOVZ}{\bkmkend AAAAAAAOVZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOWA" }{}}{\fldrslt {\cs37\ul\cf2 01659}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVO" }{}}{\fldrslt {\cs37\ul\cf2 IsNotSubstring}}}
(\par
{\bkmkstart AAAAAAAOWB}{\bkmkend AAAAAAAOWB}
01660     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOWC}{\bkmkend AAAAAAAOWC}
01661     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& needle, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::string}}}
& haystack);\par
{\bkmkstart AAAAAAAOWD}{\bkmkend AAAAAAAOWD}
01662 \par
{\bkmkstart AAAAAAAOWE}{\bkmkend AAAAAAAOWE}
01663 {\cf21 #if GTEST_HAS_STD_WSTRING}\par
{\bkmkstart AAAAAAAOWF}{\bkmkend AAAAAAAOWF}
01664 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVG" }{}}{\fldrslt {\cs37\ul\cf2 IsSubstring}}}
(\par
{\bkmkstart AAAAAAAOWG}{\bkmkend AAAAAAAOWG}
01665     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOWH}{\bkmkend AAAAAAAOWH}
01666     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::wstring}}}
& needle, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::wstring}}}
& haystack);\par
{\bkmkstart AAAAAAAOWI}{\bkmkend AAAAAAAOWI}
01667 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOVO" }{}}{\fldrslt {\cs37\ul\cf2 IsNotSubstring}}}
(\par
{\bkmkstart AAAAAAAOWJ}{\bkmkend AAAAAAAOWJ}
01668     {\cf17 const} {\cf18 char}* needle_expr, {\cf17 const} {\cf18 char}* haystack_expr,\par
{\bkmkstart AAAAAAAOWK}{\bkmkend AAAAAAAOWK}
01669     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::wstring}}}
& needle, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGTH" }{}}{\fldrslt {\cs37\ul\cf2 const ::std::wstring}}}
& haystack);\par
{\bkmkstart AAAAAAAOWL}{\bkmkend AAAAAAAOWL}
01670 {\cf21 #endif  }{\cf20 // GTEST_HAS_STD_WSTRING}\par
{\bkmkstart AAAAAAAOWM}{\bkmkend AAAAAAAOWM}
01671 \par
{\bkmkstart AAAAAAAOWN}{\bkmkend AAAAAAAOWN}
01672 {\cf17 namespace }internal \{\par
{\bkmkstart AAAAAAAOWO}{\bkmkend AAAAAAAOWO}
01673 \par
{\bkmkstart AAAAAAAOWP}{\bkmkend AAAAAAAOWP}
01674 {\cf20 // Helper template function for comparing floating-points.}\par
{\bkmkstart AAAAAAAOWQ}{\bkmkend AAAAAAAOWQ}
01675 {\cf20 //}\par
{\bkmkstart AAAAAAAOWR}{\bkmkend AAAAAAAOWR}
01676 {\cf20 // Template parameter:}\par
{\bkmkstart AAAAAAAOWS}{\bkmkend AAAAAAAOWS}
01677 {\cf20 //}\par
{\bkmkstart AAAAAAAOWT}{\bkmkend AAAAAAAOWT}
01678 {\cf20 //   RawType: the raw floating-point type (either float or double)}\par
{\bkmkstart AAAAAAAOWU}{\bkmkend AAAAAAAOWU}
01679 {\cf20 //}\par
{\bkmkstart AAAAAAAOWV}{\bkmkend AAAAAAAOWV}
01680 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOWW}{\bkmkend AAAAAAAOWW}
01681 {\cf17 template} <{\cf17 typename} RawType>\par
{\bkmkstart AAAAAAAOWX}{\bkmkend AAAAAAAOWX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOWY" }{}}{\fldrslt {\cs37\ul\cf2 01682}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOWY" }{}}{\fldrslt {\cs37\ul\cf2 CmpHelperFloatingPointEQ}}}
({\cf17 const} {\cf18 char}* lhs_expression,\par
{\bkmkstart AAAAAAAOWZ}{\bkmkend AAAAAAAOWZ}
01683                                          {\cf17 const} {\cf18 char}* rhs_expression,\par
{\bkmkstart AAAAAAAOXA}{\bkmkend AAAAAAAOXA}
01684                                          RawType lhs_value,\par
{\bkmkstart AAAAAAAOXB}{\bkmkend AAAAAAAOXB}
01685                                          RawType rhs_value) \{\par
{\bkmkstart AAAAAAAOXC}{\bkmkend AAAAAAAOXC}
01686   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOXD" }{}}{\fldrslt {\cs37\ul\cf2 FloatingPoint<RawType>}}}
 lhs(lhs_value), rhs(rhs_value);\par
{\bkmkstart AAAAAAAOXE}{\bkmkend AAAAAAAOXE}
01687 \par
{\bkmkstart AAAAAAAOXF}{\bkmkend AAAAAAAOXF}
01688   {\cf19 if} (lhs.AlmostEquals(rhs)) \{\par
{\bkmkstart AAAAAAAOXG}{\bkmkend AAAAAAAOXG}
01689     {\cf19 return} AssertionSuccess();\par
{\bkmkstart AAAAAAAOXH}{\bkmkend AAAAAAAOXH}
01690   \}\par
{\bkmkstart AAAAAAAOXI}{\bkmkend AAAAAAAOXI}
01691 \par
{\bkmkstart AAAAAAAOXJ}{\bkmkend AAAAAAAOXJ}
01692   ::std::stringstream lhs_ss;\par
{\bkmkstart AAAAAAAOXK}{\bkmkend AAAAAAAOXK}
01693   lhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\par
{\bkmkstart AAAAAAAOXL}{\bkmkend AAAAAAAOXL}
01694          << lhs_value;\par
{\bkmkstart AAAAAAAOXM}{\bkmkend AAAAAAAOXM}
01695 \par
{\bkmkstart AAAAAAAOXN}{\bkmkend AAAAAAAOXN}
01696   ::std::stringstream rhs_ss;\par
{\bkmkstart AAAAAAAOXO}{\bkmkend AAAAAAAOXO}
01697   rhs_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)\par
{\bkmkstart AAAAAAAOXP}{\bkmkend AAAAAAAOXP}
01698          << rhs_value;\par
{\bkmkstart AAAAAAAOXQ}{\bkmkend AAAAAAAOXQ}
01699 \par
{\bkmkstart AAAAAAAOXR}{\bkmkend AAAAAAAOXR}
01700   {\cf19 return} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOME" }{}}{\fldrslt {\cs37\ul\cf2 EqFailure}}}
(lhs_expression,\par
{\bkmkstart AAAAAAAOXS}{\bkmkend AAAAAAAOXS}
01701                    rhs_expression,\par
{\bkmkstart AAAAAAAOXT}{\bkmkend AAAAAAAOXT}
01702                    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOXU" }{}}{\fldrslt {\cs37\ul\cf2 StringStreamToString}}}
(&lhs_ss),\par
{\bkmkstart AAAAAAAOXV}{\bkmkend AAAAAAAOXV}
01703                    {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOXU" }{}}{\fldrslt {\cs37\ul\cf2 StringStreamToString}}}
(&rhs_ss),\par
{\bkmkstart AAAAAAAOXW}{\bkmkend AAAAAAAOXW}
01704                    {\cf17 false});\par
{\bkmkstart AAAAAAAOXX}{\bkmkend AAAAAAAOXX}
01705 \}\par
{\bkmkstart AAAAAAAOXY}{\bkmkend AAAAAAAOXY}
01706 \par
{\bkmkstart AAAAAAAOXZ}{\bkmkend AAAAAAAOXZ}
01707 {\cf20 // Helper function for implementing ASSERT_NEAR.}\par
{\bkmkstart AAAAAAAOYA}{\bkmkend AAAAAAAOYA}
01708 {\cf20 //}\par
{\bkmkstart AAAAAAAOYB}{\bkmkend AAAAAAAOYB}
01709 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.}\par
{\bkmkstart AAAAAAAOYC}{\bkmkend AAAAAAAOYC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYD" }{}}{\fldrslt {\cs37\ul\cf2 01710}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYD" }{}}{\fldrslt {\cs37\ul\cf2 DoubleNearPredFormat}}}
({\cf17 const} {\cf18 char}* expr1,\par
{\bkmkstart AAAAAAAOYE}{\bkmkend AAAAAAAOYE}
01711                                                 {\cf17 const} {\cf18 char}* expr2,\par
{\bkmkstart AAAAAAAOYF}{\bkmkend AAAAAAAOYF}
01712                                                 {\cf17 const} {\cf18 char}* abs_error_expr,\par
{\bkmkstart AAAAAAAOYG}{\bkmkend AAAAAAAOYG}
01713                                                 {\cf18 double} val1,\par
{\bkmkstart AAAAAAAOYH}{\bkmkend AAAAAAAOYH}
01714                                                 {\cf18 double} val2,\par
{\bkmkstart AAAAAAAOYI}{\bkmkend AAAAAAAOYI}
01715                                                 {\cf18 double} abs_error);\par
{\bkmkstart AAAAAAAOYJ}{\bkmkend AAAAAAAOYJ}
01716 \par
{\bkmkstart AAAAAAAOYK}{\bkmkend AAAAAAAOYK}
01717 {\cf20 // INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.}\par
{\bkmkstart AAAAAAAOYL}{\bkmkend AAAAAAAOYL}
01718 {\cf20 // A class that enables one to stream messages to assertion macros}\par
{\bkmkstart AAAAAAAOYM}{\bkmkend AAAAAAAOYM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIO" }{}}{\fldrslt {\cs37\ul\cf2 01719}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIO" }{}}{\fldrslt {\cs37\ul\cf2 AssertHelper}}}
 \{\par
{\bkmkstart AAAAAAAOYN}{\bkmkend AAAAAAAOYN}
01720  {\cf17 public}:\par
{\bkmkstart AAAAAAAOYO}{\bkmkend AAAAAAAOYO}
01721   {\cf20 // Constructor.}\par
{\bkmkstart AAAAAAAOYP}{\bkmkend AAAAAAAOYP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYQ" }{}}{\fldrslt {\cs37\ul\cf2 01722}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYQ" }{}}{\fldrslt {\cs37\ul\cf2 AssertHelper}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 TestPartResult::Type}}}
 type,\par
{\bkmkstart AAAAAAAOYR}{\bkmkend AAAAAAAOYR}
01723                {\cf17 const} {\cf18 char}* file,\par
{\bkmkstart AAAAAAAOYS}{\bkmkend AAAAAAAOYS}
01724                {\cf18 int} line,\par
{\bkmkstart AAAAAAAOYT}{\bkmkend AAAAAAAOYT}
01725                {\cf17 const} {\cf18 char}* message);\par
{\bkmkstart AAAAAAAOYU}{\bkmkend AAAAAAAOYU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYV" }{}}{\fldrslt {\cs37\ul\cf2 01726}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOYV" }{}}{\fldrslt {\cs37\ul\cf2 ~AssertHelper}}}
();\par
{\bkmkstart AAAAAAAOYW}{\bkmkend AAAAAAAOYW}
01727 \par
{\bkmkstart AAAAAAAOYX}{\bkmkend AAAAAAAOYX}
01728   {\cf20 // Message assignment is a semantic trick to enable assertion}\par
{\bkmkstart AAAAAAAOYY}{\bkmkend AAAAAAAOYY}
01729   {\cf20 // streaming; see the GTEST_MESSAGE_ macro below.}\par
{\bkmkstart AAAAAAAOYZ}{\bkmkend AAAAAAAOYZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOZA" }{}}{\fldrslt {\cs37\ul\cf2 01730}}}
   {\cf18 void} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOZA" }{}}{\fldrslt {\cs37\ul\cf2 operator=}}}
({\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPA" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
& message) {\cf17 const};\par
{\bkmkstart AAAAAAAOZB}{\bkmkend AAAAAAAOZB}
01731 \par
{\bkmkstart AAAAAAAOZC}{\bkmkend AAAAAAAOZC}
01732  {\cf17 private}:\par
{\bkmkstart AAAAAAAOZD}{\bkmkend AAAAAAAOZD}
01733   {\cf20 // We put our data in a struct so that the size of the AssertHelper class can}\par
{\bkmkstart AAAAAAAOZE}{\bkmkend AAAAAAAOZE}
01734   {\cf20 // be as small as possible.  This is important because gcc is incapable of}\par
{\bkmkstart AAAAAAAOZF}{\bkmkend AAAAAAAOZF}
01735   {\cf20 // re-using stack space even for temporary variables, so every EXPECT_EQ}\par
{\bkmkstart AAAAAAAOZG}{\bkmkend AAAAAAAOZG}
01736   {\cf20 // reserves stack space for another AssertHelper.}\par
{\bkmkstart AAAAAAAOZH}{\bkmkend AAAAAAAOZH}
01737   {\cf17 struct }AssertHelperData \{\par
{\bkmkstart AAAAAAAOZI}{\bkmkend AAAAAAAOZI}
01738     AssertHelperData({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 TestPartResult::Type}}}
 t,\par
{\bkmkstart AAAAAAAOZJ}{\bkmkend AAAAAAAOZJ}
01739                      {\cf17 const} {\cf18 char}* srcfile,\par
{\bkmkstart AAAAAAAOZK}{\bkmkend AAAAAAAOZK}
01740                      {\cf18 int} line_num,\par
{\bkmkstart AAAAAAAOZL}{\bkmkend AAAAAAAOZL}
01741                      {\cf17 const} {\cf18 char}* msg)\par
{\bkmkstart AAAAAAAOZM}{\bkmkend AAAAAAAOZM}
01742         : type(t), file(srcfile), line(line_num), message(msg) \{ \}\par
{\bkmkstart AAAAAAAOZN}{\bkmkend AAAAAAAOZN}
01743 \par
{\bkmkstart AAAAAAAOZO}{\bkmkend AAAAAAAOZO}
01744     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAIP" }{}}{\fldrslt {\cs37\ul\cf2 TestPartResult::Type}}}
 {\cf17 const} type;\par
{\bkmkstart AAAAAAAOZP}{\bkmkend AAAAAAAOZP}
01745     {\cf17 const} {\cf18 char}* {\cf17 const} file;\par
{\bkmkstart AAAAAAAOZQ}{\bkmkend AAAAAAAOZQ}
01746     {\cf18 int} {\cf17 const} line;\par
{\bkmkstart AAAAAAAOZR}{\bkmkend AAAAAAAOZR}
01747     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\cf17 const} message;\par
{\bkmkstart AAAAAAAOZS}{\bkmkend AAAAAAAOZS}
01748 \par
{\bkmkstart AAAAAAAOZT}{\bkmkend AAAAAAAOZT}
01749    {\cf17 private}:\par
{\bkmkstart AAAAAAAOZU}{\bkmkend AAAAAAAOZU}
01750     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(AssertHelperData);\par
{\bkmkstart AAAAAAAOZV}{\bkmkend AAAAAAAOZV}
01751   \};\par
{\bkmkstart AAAAAAAOZW}{\bkmkend AAAAAAAOZW}
01752 \par
{\bkmkstart AAAAAAAOZX}{\bkmkend AAAAAAAOZX}
01753   AssertHelperData* {\cf17 const} data_;\par
{\bkmkstart AAAAAAAOZY}{\bkmkend AAAAAAAOZY}
01754 \par
{\bkmkstart AAAAAAAOZZ}{\bkmkend AAAAAAAOZZ}
01755   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
(AssertHelper);\par
{\bkmkstart AAAAAAAPAA}{\bkmkend AAAAAAAPAA}
01756 \};\par
{\bkmkstart AAAAAAAPAB}{\bkmkend AAAAAAAPAB}
01757 \par
{\bkmkstart AAAAAAAPAC}{\bkmkend AAAAAAAPAC}
01758 \}  {\cf20 // namespace internal}\par
{\bkmkstart AAAAAAAPAD}{\bkmkend AAAAAAAPAD}
01759 \par
{\bkmkstart AAAAAAAPAE}{\bkmkend AAAAAAAPAE}
01760 {\cf20 // The pure interface class that all value-parameterized tests inherit from.}\par
{\bkmkstart AAAAAAAPAF}{\bkmkend AAAAAAAPAF}
01761 {\cf20 // A value-parameterized class must inherit from both ::testing::Test and}\par
{\bkmkstart AAAAAAAPAG}{\bkmkend AAAAAAAPAG}
01762 {\cf20 // ::testing::WithParamInterface. In most cases that just means inheriting}\par
{\bkmkstart AAAAAAAPAH}{\bkmkend AAAAAAAPAH}
01763 {\cf20 // from ::testing::TestWithParam, but more complicated test hierarchies}\par
{\bkmkstart AAAAAAAPAI}{\bkmkend AAAAAAAPAI}
01764 {\cf20 // may need to inherit from Test and WithParamInterface at different levels.}\par
{\bkmkstart AAAAAAAPAJ}{\bkmkend AAAAAAAPAJ}
01765 {\cf20 //}\par
{\bkmkstart AAAAAAAPAK}{\bkmkend AAAAAAAPAK}
01766 {\cf20 // This interface has support for accessing the test parameter value via}\par
{\bkmkstart AAAAAAAPAL}{\bkmkend AAAAAAAPAL}
01767 {\cf20 // the GetParam() method.}\par
{\bkmkstart AAAAAAAPAM}{\bkmkend AAAAAAAPAM}
01768 {\cf20 //}\par
{\bkmkstart AAAAAAAPAN}{\bkmkend AAAAAAAPAN}
01769 {\cf20 // Use it with one of the parameter generator defining functions, like Range(),}\par
{\bkmkstart AAAAAAAPAO}{\bkmkend AAAAAAAPAO}
01770 {\cf20 // Values(), ValuesIn(), Bool(), and Combine().}\par
{\bkmkstart AAAAAAAPAP}{\bkmkend AAAAAAAPAP}
01771 {\cf20 //}\par
{\bkmkstart AAAAAAAPAQ}{\bkmkend AAAAAAAPAQ}
01772 {\cf20 // class FooTest : public ::testing::TestWithParam<int> \{}\par
{\bkmkstart AAAAAAAPAR}{\bkmkend AAAAAAAPAR}
01773 {\cf20 //  protected:}\par
{\bkmkstart AAAAAAAPAS}{\bkmkend AAAAAAAPAS}
01774 {\cf20 //   FooTest() \{}\par
{\bkmkstart AAAAAAAPAT}{\bkmkend AAAAAAAPAT}
01775 {\cf20 //     // Can use GetParam() here.}\par
{\bkmkstart AAAAAAAPAU}{\bkmkend AAAAAAAPAU}
01776 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPAV}{\bkmkend AAAAAAAPAV}
01777 {\cf20 //   virtual ~FooTest() \{}\par
{\bkmkstart AAAAAAAPAW}{\bkmkend AAAAAAAPAW}
01778 {\cf20 //     // Can use GetParam() here.}\par
{\bkmkstart AAAAAAAPAX}{\bkmkend AAAAAAAPAX}
01779 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPAY}{\bkmkend AAAAAAAPAY}
01780 {\cf20 //   virtual void SetUp() \{}\par
{\bkmkstart AAAAAAAPAZ}{\bkmkend AAAAAAAPAZ}
01781 {\cf20 //     // Can use GetParam() here.}\par
{\bkmkstart AAAAAAAPBA}{\bkmkend AAAAAAAPBA}
01782 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPBB}{\bkmkend AAAAAAAPBB}
01783 {\cf20 //   virtual void TearDown \{}\par
{\bkmkstart AAAAAAAPBC}{\bkmkend AAAAAAAPBC}
01784 {\cf20 //     // Can use GetParam() here.}\par
{\bkmkstart AAAAAAAPBD}{\bkmkend AAAAAAAPBD}
01785 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPBE}{\bkmkend AAAAAAAPBE}
01786 {\cf20 // \};}\par
{\bkmkstart AAAAAAAPBF}{\bkmkend AAAAAAAPBF}
01787 {\cf20 // TEST_P(FooTest, DoesBar) \{}\par
{\bkmkstart AAAAAAAPBG}{\bkmkend AAAAAAAPBG}
01788 {\cf20 //   // Can use GetParam() method here.}\par
{\bkmkstart AAAAAAAPBH}{\bkmkend AAAAAAAPBH}
01789 {\cf20 //   Foo foo;}\par
{\bkmkstart AAAAAAAPBI}{\bkmkend AAAAAAAPBI}
01790 {\cf20 //   ASSERT_TRUE(foo.DoesBar(GetParam()));}\par
{\bkmkstart AAAAAAAPBJ}{\bkmkend AAAAAAAPBJ}
01791 {\cf20 // \}}\par
{\bkmkstart AAAAAAAPBK}{\bkmkend AAAAAAAPBK}
01792 {\cf20 // INSTANTIATE_TEST_CASE_P(OneToTenRange, FooTest, ::testing::Range(1, 10));}\par
{\bkmkstart AAAAAAAPBL}{\bkmkend AAAAAAAPBL}
01793 \par
{\bkmkstart AAAAAAAPBM}{\bkmkend AAAAAAAPBM}
01794 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAPBN}{\bkmkend AAAAAAAPBN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCV" }{}}{\fldrslt {\cs37\ul\cf2 01795}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCV" }{}}{\fldrslt {\cs37\ul\cf2 WithParamInterface}}}
 \{\par
{\bkmkstart AAAAAAAPBO}{\bkmkend AAAAAAAPBO}
01796  {\cf17 public}:\par
{\bkmkstart AAAAAAAPBP}{\bkmkend AAAAAAAPBP}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPBQ" }{}}{\fldrslt {\cs37\ul\cf2 01797}}}
   {\cf17 typedef} T {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPBQ" }{}}{\fldrslt {\cs37\ul\cf2 ParamType}}}
;\par
{\bkmkstart AAAAAAAPBR}{\bkmkend AAAAAAAPBR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPBS" }{}}{\fldrslt {\cs37\ul\cf2 01798}}}
   {\cf17 virtual} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPBS" }{}}{\fldrslt {\cs37\ul\cf2 ~WithParamInterface}}}
() \{\}\par
{\bkmkstart AAAAAAAPBT}{\bkmkend AAAAAAAPBT}
01799 \par
{\bkmkstart AAAAAAAPBU}{\bkmkend AAAAAAAPBU}
01800   {\cf20 // The current parameter value. Is also available in the test fixture's}\par
{\bkmkstart AAAAAAAPBV}{\bkmkend AAAAAAAPBV}
01801   {\cf20 // constructor. This member function is non-static, even though it only}\par
{\bkmkstart AAAAAAAPBW}{\bkmkend AAAAAAAPBW}
01802   {\cf20 // references static data, to reduce the opportunity for incorrect uses}\par
{\bkmkstart AAAAAAAPBX}{\bkmkend AAAAAAAPBX}
01803   {\cf20 // like writing 'WithParamInterface<bool>::GetParam()' for a test that}\par
{\bkmkstart AAAAAAAPBY}{\bkmkend AAAAAAAPBY}
01804   {\cf20 // uses a fixture whose parameter type is int.}\par
{\bkmkstart AAAAAAAPBZ}{\bkmkend AAAAAAAPBZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCA" }{}}{\fldrslt {\cs37\ul\cf2 01805}}}
   {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPBQ" }{}}{\fldrslt {\cs37\ul\cf2 ParamType}}}
& {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCA" }{}}{\fldrslt {\cs37\ul\cf2 GetParam}}}
(){\cf17  const }\{\par
{\bkmkstart AAAAAAAPCB}{\bkmkend AAAAAAAPCB}
01806     {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCC" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_CHECK_}}}
(parameter_ != NULL)\par
{\bkmkstart AAAAAAAPCD}{\bkmkend AAAAAAAPCD}
01807         << {\cf22 "GetParam() can only be called inside a value-parameterized test "}\par
{\bkmkstart AAAAAAAPCE}{\bkmkend AAAAAAAPCE}
01808         << {\cf22 "-- did you intend to write TEST_P instead of TEST_F?"};\par
{\bkmkstart AAAAAAAPCF}{\bkmkend AAAAAAAPCF}
01809     {\cf19 return} *parameter_;\par
{\bkmkstart AAAAAAAPCG}{\bkmkend AAAAAAAPCG}
01810   \}\par
{\bkmkstart AAAAAAAPCH}{\bkmkend AAAAAAAPCH}
01811 \par
{\bkmkstart AAAAAAAPCI}{\bkmkend AAAAAAAPCI}
01812  {\cf17 private}:\par
{\bkmkstart AAAAAAAPCJ}{\bkmkend AAAAAAAPCJ}
01813   {\cf20 // Sets parameter value. The caller is responsible for making sure the value}\par
{\bkmkstart AAAAAAAPCK}{\bkmkend AAAAAAAPCK}
01814   {\cf20 // remains alive and unchanged throughout the current test.}\par
{\bkmkstart AAAAAAAPCL}{\bkmkend AAAAAAAPCL}
01815   {\cf17 static} {\cf18 void} SetParam({\cf17 const} ParamType* parameter) \{\par
{\bkmkstart AAAAAAAPCM}{\bkmkend AAAAAAAPCM}
01816     parameter_ = parameter;\par
{\bkmkstart AAAAAAAPCN}{\bkmkend AAAAAAAPCN}
01817   \}\par
{\bkmkstart AAAAAAAPCO}{\bkmkend AAAAAAAPCO}
01818 \par
{\bkmkstart AAAAAAAPCP}{\bkmkend AAAAAAAPCP}
01819   {\cf20 // Static value used for accessing parameter during a test lifetime.}\par
{\bkmkstart AAAAAAAPCQ}{\bkmkend AAAAAAAPCQ}
01820   {\cf17 static} {\cf17 const} ParamType* parameter_;\par
{\bkmkstart AAAAAAAPCR}{\bkmkend AAAAAAAPCR}
01821 \par
{\bkmkstart AAAAAAAPCS}{\bkmkend AAAAAAAPCS}
01822   {\cf20 // TestClass must be a subclass of WithParamInterface<T> and Test.}\par
{\bkmkstart AAAAAAAPCT}{\bkmkend AAAAAAAPCT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCU" }{}}{\fldrslt {\cs37\ul\cf2 01823}}}
   {\cf17 template} <{\cf17 class} TestClass> {\cf17 friend} {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPCV" }{}}{\fldrslt {\cs37\ul\cf2 internal::ParameterizedTestFactory}}}
;\par
{\bkmkstart AAAAAAAPCW}{\bkmkend AAAAAAAPCW}
01824 \};\par
{\bkmkstart AAAAAAAPCX}{\bkmkend AAAAAAAPCX}
01825 \par
{\bkmkstart AAAAAAAPCY}{\bkmkend AAAAAAAPCY}
01826 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAPCZ}{\bkmkend AAAAAAAPCZ}
01827 {\cf17 const} T* {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCV" }{}}{\fldrslt {\cs37\ul\cf2 WithParamInterface<T>::parameter_}}}
 = NULL;\par
{\bkmkstart AAAAAAAPDA}{\bkmkend AAAAAAAPDA}
01828 \par
{\bkmkstart AAAAAAAPDB}{\bkmkend AAAAAAAPDB}
01829 {\cf20 // Most value-parameterized classes can ignore the existence of}\par
{\bkmkstart AAAAAAAPDC}{\bkmkend AAAAAAAPDC}
01830 {\cf20 // WithParamInterface, and can just inherit from ::testing::TestWithParam.}\par
{\bkmkstart AAAAAAAPDD}{\bkmkend AAAAAAAPDD}
01831 \par
{\bkmkstart AAAAAAAPDE}{\bkmkend AAAAAAAPDE}
01832 {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAPDF}{\bkmkend AAAAAAAPDF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGYL" }{}}{\fldrslt {\cs37\ul\cf2 01833}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGYL" }{}}{\fldrslt {\cs37\ul\cf2 TestWithParam}}}
 : {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCP" }{}}{\fldrslt {\cs37\ul\cf2 Test}}}
, {\cf17 public} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHCV" }{}}{\fldrslt {\cs37\ul\cf2 WithParamInterface}}}
<T> \{\par
{\bkmkstart AAAAAAAPDG}{\bkmkend AAAAAAAPDG}
01834 \};\par
{\bkmkstart AAAAAAAPDH}{\bkmkend AAAAAAAPDH}
01835 \par
{\bkmkstart AAAAAAAPDI}{\bkmkend AAAAAAAPDI}
01836 {\cf20 // Macros for indicating success/failure in test code.}\par
{\bkmkstart AAAAAAAPDJ}{\bkmkend AAAAAAAPDJ}
01837 \par
{\bkmkstart AAAAAAAPDK}{\bkmkend AAAAAAAPDK}
01838 {\cf20 // ADD_FAILURE unconditionally adds a failure to the current test.}\par
{\bkmkstart AAAAAAAPDL}{\bkmkend AAAAAAAPDL}
01839 {\cf20 // SUCCEED generates a success - it doesn't automatically make the}\par
{\bkmkstart AAAAAAAPDM}{\bkmkend AAAAAAAPDM}
01840 {\cf20 // current test successful, as a test is only successful when it has}\par
{\bkmkstart AAAAAAAPDN}{\bkmkend AAAAAAAPDN}
01841 {\cf20 // no failure.}\par
{\bkmkstart AAAAAAAPDO}{\bkmkend AAAAAAAPDO}
01842 {\cf20 //}\par
{\bkmkstart AAAAAAAPDP}{\bkmkend AAAAAAAPDP}
01843 {\cf20 // EXPECT_* verifies that a certain condition is satisfied.  If not,}\par
{\bkmkstart AAAAAAAPDQ}{\bkmkend AAAAAAAPDQ}
01844 {\cf20 // it behaves like ADD_FAILURE.  In particular:}\par
{\bkmkstart AAAAAAAPDR}{\bkmkend AAAAAAAPDR}
01845 {\cf20 //}\par
{\bkmkstart AAAAAAAPDS}{\bkmkend AAAAAAAPDS}
01846 {\cf20 //   EXPECT_TRUE  verifies that a Boolean condition is true.}\par
{\bkmkstart AAAAAAAPDT}{\bkmkend AAAAAAAPDT}
01847 {\cf20 //   EXPECT_FALSE verifies that a Boolean condition is false.}\par
{\bkmkstart AAAAAAAPDU}{\bkmkend AAAAAAAPDU}
01848 {\cf20 //}\par
{\bkmkstart AAAAAAAPDV}{\bkmkend AAAAAAAPDV}
01849 {\cf20 // FAIL and ASSERT_* are similar to ADD_FAILURE and EXPECT_*, except}\par
{\bkmkstart AAAAAAAPDW}{\bkmkend AAAAAAAPDW}
01850 {\cf20 // that they will also abort the current function on failure.  People}\par
{\bkmkstart AAAAAAAPDX}{\bkmkend AAAAAAAPDX}
01851 {\cf20 // usually want the fail-fast behavior of FAIL and ASSERT_*, but those}\par
{\bkmkstart AAAAAAAPDY}{\bkmkend AAAAAAAPDY}
01852 {\cf20 // writing data-driven tests often find themselves using ADD_FAILURE}\par
{\bkmkstart AAAAAAAPDZ}{\bkmkend AAAAAAAPDZ}
01853 {\cf20 // and EXPECT_* more.}\par
{\bkmkstart AAAAAAAPEA}{\bkmkend AAAAAAAPEA}
01854 \par
{\bkmkstart AAAAAAAPEB}{\bkmkend AAAAAAAPEB}
01855 {\cf20 // Generates a nonfatal failure with a generic message.}\par
{\bkmkstart AAAAAAAPEC}{\bkmkend AAAAAAAPEC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPED" }{}}{\fldrslt {\cs37\ul\cf2 01856}}}
 {\cf21 #define ADD_FAILURE() GTEST_NONFATAL_FAILURE_("Failed"})\par
{\bkmkstart AAAAAAAPEE}{\bkmkend AAAAAAAPEE}
01857 \par
{\bkmkstart AAAAAAAPEF}{\bkmkend AAAAAAAPEF}
01858 {\cf20 // Generates a nonfatal failure at the given source file location with}\par
{\bkmkstart AAAAAAAPEG}{\bkmkend AAAAAAAPEG}
01859 {\cf20 // a generic message.}\par
{\bkmkstart AAAAAAAPEH}{\bkmkend AAAAAAAPEH}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPEI" }{}}{\fldrslt {\cs37\ul\cf2 01860}}}
 {\cf21 #define ADD_FAILURE_AT(file, line) \\}\par
{\bkmkstart AAAAAAAPEJ}{\bkmkend AAAAAAAPEJ}
01861 {\cf21   GTEST_MESSAGE_AT_(file, line, "Failed"}, \\\par
{\bkmkstart AAAAAAAPEK}{\bkmkend AAAAAAAPEK}
01862                     ::testing::TestPartResult::kNonFatalFailure)\par
{\bkmkstart AAAAAAAPEL}{\bkmkend AAAAAAAPEL}
01863 \par
{\bkmkstart AAAAAAAPEM}{\bkmkend AAAAAAAPEM}
01864 {\cf20 // Generates a fatal failure with a generic message.}\par
{\bkmkstart AAAAAAAPEN}{\bkmkend AAAAAAAPEN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPEO" }{}}{\fldrslt {\cs37\ul\cf2 01865}}}
 {\cf21 #define GTEST_FAIL() GTEST_FATAL_FAILURE_("Failed"})\par
{\bkmkstart AAAAAAAPEP}{\bkmkend AAAAAAAPEP}
01866 \par
{\bkmkstart AAAAAAAPEQ}{\bkmkend AAAAAAAPEQ}
01867 {\cf20 // Define this macro to 1 to omit the definition of FAIL(), which is a}\par
{\bkmkstart AAAAAAAPER}{\bkmkend AAAAAAAPER}
01868 {\cf20 // generic name and clashes with some other libraries.}\par
{\bkmkstart AAAAAAAPES}{\bkmkend AAAAAAAPES}
01869 {\cf21 #if !GTEST_DONT_DEFINE_FAIL}\par
{\bkmkstart AAAAAAAPET}{\bkmkend AAAAAAAPET}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPEU" }{}}{\fldrslt {\cs37\ul\cf2 01870}}}
 {\cf21 # define FAIL() GTEST_FAIL()}\par
{\bkmkstart AAAAAAAPEV}{\bkmkend AAAAAAAPEV}
01871 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPEW}{\bkmkend AAAAAAAPEW}
01872 \par
{\bkmkstart AAAAAAAPEX}{\bkmkend AAAAAAAPEX}
01873 {\cf20 // Generates a success with a generic message.}\par
{\bkmkstart AAAAAAAPEY}{\bkmkend AAAAAAAPEY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPEZ" }{}}{\fldrslt {\cs37\ul\cf2 01874}}}
 {\cf21 #define GTEST_SUCCEED() GTEST_SUCCESS_("Succeeded"})\par
{\bkmkstart AAAAAAAPFA}{\bkmkend AAAAAAAPFA}
01875 \par
{\bkmkstart AAAAAAAPFB}{\bkmkend AAAAAAAPFB}
01876 {\cf20 // Define this macro to 1 to omit the definition of SUCCEED(), which}\par
{\bkmkstart AAAAAAAPFC}{\bkmkend AAAAAAAPFC}
01877 {\cf20 // is a generic name and clashes with some other libraries.}\par
{\bkmkstart AAAAAAAPFD}{\bkmkend AAAAAAAPFD}
01878 {\cf21 #if !GTEST_DONT_DEFINE_SUCCEED}\par
{\bkmkstart AAAAAAAPFE}{\bkmkend AAAAAAAPFE}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPFF" }{}}{\fldrslt {\cs37\ul\cf2 01879}}}
 {\cf21 # define SUCCEED() GTEST_SUCCEED()}\par
{\bkmkstart AAAAAAAPFG}{\bkmkend AAAAAAAPFG}
01880 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPFH}{\bkmkend AAAAAAAPFH}
01881 \par
{\bkmkstart AAAAAAAPFI}{\bkmkend AAAAAAAPFI}
01882 {\cf20 // Macros for testing exceptions.}\par
{\bkmkstart AAAAAAAPFJ}{\bkmkend AAAAAAAPFJ}
01883 {\cf20 //}\par
{\bkmkstart AAAAAAAPFK}{\bkmkend AAAAAAAPFK}
01884 {\cf20 //    * \{ASSERT|EXPECT\}_THROW(statement, expected_exception):}\par
{\bkmkstart AAAAAAAPFL}{\bkmkend AAAAAAAPFL}
01885 {\cf20 //         Tests that the statement throws the expected exception.}\par
{\bkmkstart AAAAAAAPFM}{\bkmkend AAAAAAAPFM}
01886 {\cf20 //    * \{ASSERT|EXPECT\}_NO_THROW(statement):}\par
{\bkmkstart AAAAAAAPFN}{\bkmkend AAAAAAAPFN}
01887 {\cf20 //         Tests that the statement doesn't throw any exception.}\par
{\bkmkstart AAAAAAAPFO}{\bkmkend AAAAAAAPFO}
01888 {\cf20 //    * \{ASSERT|EXPECT\}_ANY_THROW(statement):}\par
{\bkmkstart AAAAAAAPFP}{\bkmkend AAAAAAAPFP}
01889 {\cf20 //         Tests that the statement throws an exception.}\par
{\bkmkstart AAAAAAAPFQ}{\bkmkend AAAAAAAPFQ}
01890 \par
{\bkmkstart AAAAAAAPFR}{\bkmkend AAAAAAAPFR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPFS" }{}}{\fldrslt {\cs37\ul\cf2 01891}}}
 {\cf21 #define EXPECT_THROW(statement, expected_exception) \\}\par
{\bkmkstart AAAAAAAPFT}{\bkmkend AAAAAAAPFT}
01892 {\cf21   GTEST_TEST_THROW_(statement, expected_exception, GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPFU}{\bkmkend AAAAAAAPFU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPFV" }{}}{\fldrslt {\cs37\ul\cf2 01893}}}
 {\cf21 #define EXPECT_NO_THROW(statement) \\}\par
{\bkmkstart AAAAAAAPFW}{\bkmkend AAAAAAAPFW}
01894 {\cf21   GTEST_TEST_NO_THROW_(statement, GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPFX}{\bkmkend AAAAAAAPFX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPFY" }{}}{\fldrslt {\cs37\ul\cf2 01895}}}
 {\cf21 #define EXPECT_ANY_THROW(statement) \\}\par
{\bkmkstart AAAAAAAPFZ}{\bkmkend AAAAAAAPFZ}
01896 {\cf21   GTEST_TEST_ANY_THROW_(statement, GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGA}{\bkmkend AAAAAAAPGA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGB" }{}}{\fldrslt {\cs37\ul\cf2 01897}}}
 {\cf21 #define ASSERT_THROW(statement, expected_exception) \\}\par
{\bkmkstart AAAAAAAPGC}{\bkmkend AAAAAAAPGC}
01898 {\cf21   GTEST_TEST_THROW_(statement, expected_exception, GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGD}{\bkmkend AAAAAAAPGD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGE" }{}}{\fldrslt {\cs37\ul\cf2 01899}}}
 {\cf21 #define ASSERT_NO_THROW(statement) \\}\par
{\bkmkstart AAAAAAAPGF}{\bkmkend AAAAAAAPGF}
01900 {\cf21   GTEST_TEST_NO_THROW_(statement, GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGG}{\bkmkend AAAAAAAPGG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGH" }{}}{\fldrslt {\cs37\ul\cf2 01901}}}
 {\cf21 #define ASSERT_ANY_THROW(statement) \\}\par
{\bkmkstart AAAAAAAPGI}{\bkmkend AAAAAAAPGI}
01902 {\cf21   GTEST_TEST_ANY_THROW_(statement, GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGJ}{\bkmkend AAAAAAAPGJ}
01903 \par
{\bkmkstart AAAAAAAPGK}{\bkmkend AAAAAAAPGK}
01904 {\cf20 // Boolean assertions. Condition can be either a Boolean expression or an}\par
{\bkmkstart AAAAAAAPGL}{\bkmkend AAAAAAAPGL}
01905 {\cf20 // AssertionResult. For more information on how to use AssertionResult with}\par
{\bkmkstart AAAAAAAPGM}{\bkmkend AAAAAAAPGM}
01906 {\cf20 // these macros see comments on that class.}\par
{\bkmkstart AAAAAAAPGN}{\bkmkend AAAAAAAPGN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGYY" }{}}{\fldrslt {\cs37\ul\cf2 01907}}}
 {\cf21 #define EXPECT_TRUE(condition) \\}\par
{\bkmkstart AAAAAAAPGO}{\bkmkend AAAAAAAPGO}
01908 {\cf21   GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\}\par
{\bkmkstart AAAAAAAPGP}{\bkmkend AAAAAAAPGP}
01909 {\cf21                       GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGQ}{\bkmkend AAAAAAAPGQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGR" }{}}{\fldrslt {\cs37\ul\cf2 01910}}}
 {\cf21 #define EXPECT_FALSE(condition) \\}\par
{\bkmkstart AAAAAAAPGS}{\bkmkend AAAAAAAPGS}
01911 {\cf21   GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\}\par
{\bkmkstart AAAAAAAPGT}{\bkmkend AAAAAAAPGT}
01912 {\cf21                       GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGU}{\bkmkend AAAAAAAPGU}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGV" }{}}{\fldrslt {\cs37\ul\cf2 01913}}}
 {\cf21 #define ASSERT_TRUE(condition) \\}\par
{\bkmkstart AAAAAAAPGW}{\bkmkend AAAAAAAPGW}
01914 {\cf21   GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\}\par
{\bkmkstart AAAAAAAPGX}{\bkmkend AAAAAAAPGX}
01915 {\cf21                       GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPGY}{\bkmkend AAAAAAAPGY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPGZ" }{}}{\fldrslt {\cs37\ul\cf2 01916}}}
 {\cf21 #define ASSERT_FALSE(condition) \\}\par
{\bkmkstart AAAAAAAPHA}{\bkmkend AAAAAAAPHA}
01917 {\cf21   GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\}\par
{\bkmkstart AAAAAAAPHB}{\bkmkend AAAAAAAPHB}
01918 {\cf21                       GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPHC}{\bkmkend AAAAAAAPHC}
01919 \par
{\bkmkstart AAAAAAAPHD}{\bkmkend AAAAAAAPHD}
01920 {\cf20 // Macros for testing equalities and inequalities.}\par
{\bkmkstart AAAAAAAPHE}{\bkmkend AAAAAAAPHE}
01921 {\cf20 //}\par
{\bkmkstart AAAAAAAPHF}{\bkmkend AAAAAAAPHF}
01922 {\cf20 //    * \{ASSERT|EXPECT\}_EQ(v1, v2): Tests that v1 == v2}\par
{\bkmkstart AAAAAAAPHG}{\bkmkend AAAAAAAPHG}
01923 {\cf20 //    * \{ASSERT|EXPECT\}_NE(v1, v2): Tests that v1 != v2}\par
{\bkmkstart AAAAAAAPHH}{\bkmkend AAAAAAAPHH}
01924 {\cf20 //    * \{ASSERT|EXPECT\}_LT(v1, v2): Tests that v1 < v2}\par
{\bkmkstart AAAAAAAPHI}{\bkmkend AAAAAAAPHI}
01925 {\cf20 //    * \{ASSERT|EXPECT\}_LE(v1, v2): Tests that v1 <= v2}\par
{\bkmkstart AAAAAAAPHJ}{\bkmkend AAAAAAAPHJ}
01926 {\cf20 //    * \{ASSERT|EXPECT\}_GT(v1, v2): Tests that v1 > v2}\par
{\bkmkstart AAAAAAAPHK}{\bkmkend AAAAAAAPHK}
01927 {\cf20 //    * \{ASSERT|EXPECT\}_GE(v1, v2): Tests that v1 >= v2}\par
{\bkmkstart AAAAAAAPHL}{\bkmkend AAAAAAAPHL}
01928 {\cf20 //}\par
{\bkmkstart AAAAAAAPHM}{\bkmkend AAAAAAAPHM}
01929 {\cf20 // When they are not, Google Test prints both the tested expressions and}\par
{\bkmkstart AAAAAAAPHN}{\bkmkend AAAAAAAPHN}
01930 {\cf20 // their actual values.  The values must be compatible built-in types,}\par
{\bkmkstart AAAAAAAPHO}{\bkmkend AAAAAAAPHO}
01931 {\cf20 // or you will get a compiler error.  By "compatible" we mean that the}\par
{\bkmkstart AAAAAAAPHP}{\bkmkend AAAAAAAPHP}
01932 {\cf20 // values can be compared by the respective operator.}\par
{\bkmkstart AAAAAAAPHQ}{\bkmkend AAAAAAAPHQ}
01933 {\cf20 //}\par
{\bkmkstart AAAAAAAPHR}{\bkmkend AAAAAAAPHR}
01934 {\cf20 // Note:}\par
{\bkmkstart AAAAAAAPHS}{\bkmkend AAAAAAAPHS}
01935 {\cf20 //}\par
{\bkmkstart AAAAAAAPHT}{\bkmkend AAAAAAAPHT}
01936 {\cf20 //   1. It is possible to make a user-defined type work with}\par
{\bkmkstart AAAAAAAPHU}{\bkmkend AAAAAAAPHU}
01937 {\cf20 //   \{ASSERT|EXPECT\}_??(), but that requires overloading the}\par
{\bkmkstart AAAAAAAPHV}{\bkmkend AAAAAAAPHV}
01938 {\cf20 //   comparison operators and is thus discouraged by the Google C++}\par
{\bkmkstart AAAAAAAPHW}{\bkmkend AAAAAAAPHW}
01939 {\cf20 //   Usage Guide.  Therefore, you are advised to use the}\par
{\bkmkstart AAAAAAAPHX}{\bkmkend AAAAAAAPHX}
01940 {\cf20 //   \{ASSERT|EXPECT\}_TRUE() macro to assert that two objects are}\par
{\bkmkstart AAAAAAAPHY}{\bkmkend AAAAAAAPHY}
01941 {\cf20 //   equal.}\par
{\bkmkstart AAAAAAAPHZ}{\bkmkend AAAAAAAPHZ}
01942 {\cf20 //}\par
{\bkmkstart AAAAAAAPIA}{\bkmkend AAAAAAAPIA}
01943 {\cf20 //   2. The \{ASSERT|EXPECT\}_??() macros do pointer comparisons on}\par
{\bkmkstart AAAAAAAPIB}{\bkmkend AAAAAAAPIB}
01944 {\cf20 //   pointers (in particular, C strings).  Therefore, if you use it}\par
{\bkmkstart AAAAAAAPIC}{\bkmkend AAAAAAAPIC}
01945 {\cf20 //   with two C strings, you are testing how their locations in memory}\par
{\bkmkstart AAAAAAAPID}{\bkmkend AAAAAAAPID}
01946 {\cf20 //   are related, not how their content is related.  To compare two C}\par
{\bkmkstart AAAAAAAPIE}{\bkmkend AAAAAAAPIE}
01947 {\cf20 //   strings by content, use \{ASSERT|EXPECT\}_STR*().}\par
{\bkmkstart AAAAAAAPIF}{\bkmkend AAAAAAAPIF}
01948 {\cf20 //}\par
{\bkmkstart AAAAAAAPIG}{\bkmkend AAAAAAAPIG}
01949 {\cf20 //   3. \{ASSERT|EXPECT\}_EQ(v1, v2) is preferred to}\par
{\bkmkstart AAAAAAAPIH}{\bkmkend AAAAAAAPIH}
01950 {\cf20 //   \{ASSERT|EXPECT\}_TRUE(v1 == v2), as the former tells you}\par
{\bkmkstart AAAAAAAPII}{\bkmkend AAAAAAAPII}
01951 {\cf20 //   what the actual value is when it fails, and similarly for the}\par
{\bkmkstart AAAAAAAPIJ}{\bkmkend AAAAAAAPIJ}
01952 {\cf20 //   other comparisons.}\par
{\bkmkstart AAAAAAAPIK}{\bkmkend AAAAAAAPIK}
01953 {\cf20 //}\par
{\bkmkstart AAAAAAAPIL}{\bkmkend AAAAAAAPIL}
01954 {\cf20 //   4. Do not depend on the order in which \{ASSERT|EXPECT\}_??()}\par
{\bkmkstart AAAAAAAPIM}{\bkmkend AAAAAAAPIM}
01955 {\cf20 //   evaluate their arguments, which is undefined.}\par
{\bkmkstart AAAAAAAPIN}{\bkmkend AAAAAAAPIN}
01956 {\cf20 //}\par
{\bkmkstart AAAAAAAPIO}{\bkmkend AAAAAAAPIO}
01957 {\cf20 //   5. These macros evaluate their arguments exactly once.}\par
{\bkmkstart AAAAAAAPIP}{\bkmkend AAAAAAAPIP}
01958 {\cf20 //}\par
{\bkmkstart AAAAAAAPIQ}{\bkmkend AAAAAAAPIQ}
01959 {\cf20 // Examples:}\par
{\bkmkstart AAAAAAAPIR}{\bkmkend AAAAAAAPIR}
01960 {\cf20 //}\par
{\bkmkstart AAAAAAAPIS}{\bkmkend AAAAAAAPIS}
01961 {\cf20 //   EXPECT_NE(Foo(), 5);}\par
{\bkmkstart AAAAAAAPIT}{\bkmkend AAAAAAAPIT}
01962 {\cf20 //   EXPECT_EQ(a_pointer, NULL);}\par
{\bkmkstart AAAAAAAPIU}{\bkmkend AAAAAAAPIU}
01963 {\cf20 //   ASSERT_LT(i, array_size);}\par
{\bkmkstart AAAAAAAPIV}{\bkmkend AAAAAAAPIV}
01964 {\cf20 //   ASSERT_GT(records.size(), 0) << "There is no record left.";}\par
{\bkmkstart AAAAAAAPIW}{\bkmkend AAAAAAAPIW}
01965 \par
{\bkmkstart AAAAAAAPIX}{\bkmkend AAAAAAAPIX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPIY" }{}}{\fldrslt {\cs37\ul\cf2 01966}}}
 {\cf21 #define EXPECT_EQ(val1, val2) \\}\par
{\bkmkstart AAAAAAAPIZ}{\bkmkend AAAAAAAPIZ}
01967 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal:: \\}\par
{\bkmkstart AAAAAAAPJA}{\bkmkend AAAAAAAPJA}
01968 {\cf21                       EqHelper<GTEST_IS_NULL_LITERAL_(val1)>::Compare, \\}\par
{\bkmkstart AAAAAAAPJB}{\bkmkend AAAAAAAPJB}
01969 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPJC}{\bkmkend AAAAAAAPJC}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJD" }{}}{\fldrslt {\cs37\ul\cf2 01970}}}
 {\cf21 #define EXPECT_NE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJE}{\bkmkend AAAAAAAPJE}
01971 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)}\par
{\bkmkstart AAAAAAAPJF}{\bkmkend AAAAAAAPJF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJG" }{}}{\fldrslt {\cs37\ul\cf2 01972}}}
 {\cf21 #define EXPECT_LE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJH}{\bkmkend AAAAAAAPJH}
01973 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)}\par
{\bkmkstart AAAAAAAPJI}{\bkmkend AAAAAAAPJI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJJ" }{}}{\fldrslt {\cs37\ul\cf2 01974}}}
 {\cf21 #define EXPECT_LT(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJK}{\bkmkend AAAAAAAPJK}
01975 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)}\par
{\bkmkstart AAAAAAAPJL}{\bkmkend AAAAAAAPJL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJM" }{}}{\fldrslt {\cs37\ul\cf2 01976}}}
 {\cf21 #define EXPECT_GE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJN}{\bkmkend AAAAAAAPJN}
01977 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)}\par
{\bkmkstart AAAAAAAPJO}{\bkmkend AAAAAAAPJO}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJP" }{}}{\fldrslt {\cs37\ul\cf2 01978}}}
 {\cf21 #define EXPECT_GT(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJQ}{\bkmkend AAAAAAAPJQ}
01979 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)}\par
{\bkmkstart AAAAAAAPJR}{\bkmkend AAAAAAAPJR}
01980 \par
{\bkmkstart AAAAAAAPJS}{\bkmkend AAAAAAAPJS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJT" }{}}{\fldrslt {\cs37\ul\cf2 01981}}}
 {\cf21 #define GTEST_ASSERT_EQ(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJU}{\bkmkend AAAAAAAPJU}
01982 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal:: \\}\par
{\bkmkstart AAAAAAAPJV}{\bkmkend AAAAAAAPJV}
01983 {\cf21                       EqHelper<GTEST_IS_NULL_LITERAL_(val1)>::Compare, \\}\par
{\bkmkstart AAAAAAAPJW}{\bkmkend AAAAAAAPJW}
01984 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPJX}{\bkmkend AAAAAAAPJX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPJY" }{}}{\fldrslt {\cs37\ul\cf2 01985}}}
 {\cf21 #define GTEST_ASSERT_NE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPJZ}{\bkmkend AAAAAAAPJZ}
01986 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)}\par
{\bkmkstart AAAAAAAPKA}{\bkmkend AAAAAAAPKA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKB" }{}}{\fldrslt {\cs37\ul\cf2 01987}}}
 {\cf21 #define GTEST_ASSERT_LE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPKC}{\bkmkend AAAAAAAPKC}
01988 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)}\par
{\bkmkstart AAAAAAAPKD}{\bkmkend AAAAAAAPKD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKE" }{}}{\fldrslt {\cs37\ul\cf2 01989}}}
 {\cf21 #define GTEST_ASSERT_LT(val1, val2) \\}\par
{\bkmkstart AAAAAAAPKF}{\bkmkend AAAAAAAPKF}
01990 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)}\par
{\bkmkstart AAAAAAAPKG}{\bkmkend AAAAAAAPKG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKH" }{}}{\fldrslt {\cs37\ul\cf2 01991}}}
 {\cf21 #define GTEST_ASSERT_GE(val1, val2) \\}\par
{\bkmkstart AAAAAAAPKI}{\bkmkend AAAAAAAPKI}
01992 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)}\par
{\bkmkstart AAAAAAAPKJ}{\bkmkend AAAAAAAPKJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKK" }{}}{\fldrslt {\cs37\ul\cf2 01993}}}
 {\cf21 #define GTEST_ASSERT_GT(val1, val2) \\}\par
{\bkmkstart AAAAAAAPKL}{\bkmkend AAAAAAAPKL}
01994 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)}\par
{\bkmkstart AAAAAAAPKM}{\bkmkend AAAAAAAPKM}
01995 \par
{\bkmkstart AAAAAAAPKN}{\bkmkend AAAAAAAPKN}
01996 {\cf20 // Define macro GTEST_DONT_DEFINE_ASSERT_XY to 1 to omit the definition of}\par
{\bkmkstart AAAAAAAPKO}{\bkmkend AAAAAAAPKO}
01997 {\cf20 // ASSERT_XY(), which clashes with some users' own code.}\par
{\bkmkstart AAAAAAAPKP}{\bkmkend AAAAAAAPKP}
01998 \par
{\bkmkstart AAAAAAAPKQ}{\bkmkend AAAAAAAPKQ}
01999 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_EQ}\par
{\bkmkstart AAAAAAAPKR}{\bkmkend AAAAAAAPKR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKS" }{}}{\fldrslt {\cs37\ul\cf2 02000}}}
 {\cf21 # define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2)}\par
{\bkmkstart AAAAAAAPKT}{\bkmkend AAAAAAAPKT}
02001 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPKU}{\bkmkend AAAAAAAPKU}
02002 \par
{\bkmkstart AAAAAAAPKV}{\bkmkend AAAAAAAPKV}
02003 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_NE}\par
{\bkmkstart AAAAAAAPKW}{\bkmkend AAAAAAAPKW}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPKX" }{}}{\fldrslt {\cs37\ul\cf2 02004}}}
 {\cf21 # define ASSERT_NE(val1, val2) GTEST_ASSERT_NE(val1, val2)}\par
{\bkmkstart AAAAAAAPKY}{\bkmkend AAAAAAAPKY}
02005 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPKZ}{\bkmkend AAAAAAAPKZ}
02006 \par
{\bkmkstart AAAAAAAPLA}{\bkmkend AAAAAAAPLA}
02007 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_LE}\par
{\bkmkstart AAAAAAAPLB}{\bkmkend AAAAAAAPLB}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPLC" }{}}{\fldrslt {\cs37\ul\cf2 02008}}}
 {\cf21 # define ASSERT_LE(val1, val2) GTEST_ASSERT_LE(val1, val2)}\par
{\bkmkstart AAAAAAAPLD}{\bkmkend AAAAAAAPLD}
02009 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPLE}{\bkmkend AAAAAAAPLE}
02010 \par
{\bkmkstart AAAAAAAPLF}{\bkmkend AAAAAAAPLF}
02011 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_LT}\par
{\bkmkstart AAAAAAAPLG}{\bkmkend AAAAAAAPLG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPLH" }{}}{\fldrslt {\cs37\ul\cf2 02012}}}
 {\cf21 # define ASSERT_LT(val1, val2) GTEST_ASSERT_LT(val1, val2)}\par
{\bkmkstart AAAAAAAPLI}{\bkmkend AAAAAAAPLI}
02013 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPLJ}{\bkmkend AAAAAAAPLJ}
02014 \par
{\bkmkstart AAAAAAAPLK}{\bkmkend AAAAAAAPLK}
02015 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_GE}\par
{\bkmkstart AAAAAAAPLL}{\bkmkend AAAAAAAPLL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPLM" }{}}{\fldrslt {\cs37\ul\cf2 02016}}}
 {\cf21 # define ASSERT_GE(val1, val2) GTEST_ASSERT_GE(val1, val2)}\par
{\bkmkstart AAAAAAAPLN}{\bkmkend AAAAAAAPLN}
02017 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPLO}{\bkmkend AAAAAAAPLO}
02018 \par
{\bkmkstart AAAAAAAPLP}{\bkmkend AAAAAAAPLP}
02019 {\cf21 #if !GTEST_DONT_DEFINE_ASSERT_GT}\par
{\bkmkstart AAAAAAAPLQ}{\bkmkend AAAAAAAPLQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPLR" }{}}{\fldrslt {\cs37\ul\cf2 02020}}}
 {\cf21 # define ASSERT_GT(val1, val2) GTEST_ASSERT_GT(val1, val2)}\par
{\bkmkstart AAAAAAAPLS}{\bkmkend AAAAAAAPLS}
02021 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPLT}{\bkmkend AAAAAAAPLT}
02022 \par
{\bkmkstart AAAAAAAPLU}{\bkmkend AAAAAAAPLU}
02023 {\cf20 // C-string Comparisons.  All tests treat NULL and any non-NULL string}\par
{\bkmkstart AAAAAAAPLV}{\bkmkend AAAAAAAPLV}
02024 {\cf20 // as different.  Two NULLs are equal.}\par
{\bkmkstart AAAAAAAPLW}{\bkmkend AAAAAAAPLW}
02025 {\cf20 //}\par
{\bkmkstart AAAAAAAPLX}{\bkmkend AAAAAAAPLX}
02026 {\cf20 //    * \{ASSERT|EXPECT\}_STREQ(s1, s2):     Tests that s1 == s2}\par
{\bkmkstart AAAAAAAPLY}{\bkmkend AAAAAAAPLY}
02027 {\cf20 //    * \{ASSERT|EXPECT\}_STRNE(s1, s2):     Tests that s1 != s2}\par
{\bkmkstart AAAAAAAPLZ}{\bkmkend AAAAAAAPLZ}
02028 {\cf20 //    * \{ASSERT|EXPECT\}_STRCASEEQ(s1, s2): Tests that s1 == s2, ignoring case}\par
{\bkmkstart AAAAAAAPMA}{\bkmkend AAAAAAAPMA}
02029 {\cf20 //    * \{ASSERT|EXPECT\}_STRCASENE(s1, s2): Tests that s1 != s2, ignoring case}\par
{\bkmkstart AAAAAAAPMB}{\bkmkend AAAAAAAPMB}
02030 {\cf20 //}\par
{\bkmkstart AAAAAAAPMC}{\bkmkend AAAAAAAPMC}
02031 {\cf20 // For wide or narrow string objects, you can use the}\par
{\bkmkstart AAAAAAAPMD}{\bkmkend AAAAAAAPMD}
02032 {\cf20 // \{ASSERT|EXPECT\}_??() macros.}\par
{\bkmkstart AAAAAAAPME}{\bkmkend AAAAAAAPME}
02033 {\cf20 //}\par
{\bkmkstart AAAAAAAPMF}{\bkmkend AAAAAAAPMF}
02034 {\cf20 // Don't depend on the order in which the arguments are evaluated,}\par
{\bkmkstart AAAAAAAPMG}{\bkmkend AAAAAAAPMG}
02035 {\cf20 // which is undefined.}\par
{\bkmkstart AAAAAAAPMH}{\bkmkend AAAAAAAPMH}
02036 {\cf20 //}\par
{\bkmkstart AAAAAAAPMI}{\bkmkend AAAAAAAPMI}
02037 {\cf20 // These macros evaluate their arguments exactly once.}\par
{\bkmkstart AAAAAAAPMJ}{\bkmkend AAAAAAAPMJ}
02038 \par
{\bkmkstart AAAAAAAPMK}{\bkmkend AAAAAAAPMK}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPML" }{}}{\fldrslt {\cs37\ul\cf2 02039}}}
 {\cf21 #define EXPECT_STREQ(s1, s2) \\}\par
{\bkmkstart AAAAAAAPMM}{\bkmkend AAAAAAAPMM}
02040 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)}\par
{\bkmkstart AAAAAAAPMN}{\bkmkend AAAAAAAPMN}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPMO" }{}}{\fldrslt {\cs37\ul\cf2 02041}}}
 {\cf21 #define EXPECT_STRNE(s1, s2) \\}\par
{\bkmkstart AAAAAAAPMP}{\bkmkend AAAAAAAPMP}
02042 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)}\par
{\bkmkstart AAAAAAAPMQ}{\bkmkend AAAAAAAPMQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPMR" }{}}{\fldrslt {\cs37\ul\cf2 02043}}}
 {\cf21 #define EXPECT_STRCASEEQ(s1, s2) \\}\par
{\bkmkstart AAAAAAAPMS}{\bkmkend AAAAAAAPMS}
02044 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)}\par
{\bkmkstart AAAAAAAPMT}{\bkmkend AAAAAAAPMT}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPMU" }{}}{\fldrslt {\cs37\ul\cf2 02045}}}
 {\cf21 #define EXPECT_STRCASENE(s1, s2)\\}\par
{\bkmkstart AAAAAAAPMV}{\bkmkend AAAAAAAPMV}
02046 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)}\par
{\bkmkstart AAAAAAAPMW}{\bkmkend AAAAAAAPMW}
02047 \par
{\bkmkstart AAAAAAAPMX}{\bkmkend AAAAAAAPMX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPMY" }{}}{\fldrslt {\cs37\ul\cf2 02048}}}
 {\cf21 #define ASSERT_STREQ(s1, s2) \\}\par
{\bkmkstart AAAAAAAPMZ}{\bkmkend AAAAAAAPMZ}
02049 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2)}\par
{\bkmkstart AAAAAAAPNA}{\bkmkend AAAAAAAPNA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPNB" }{}}{\fldrslt {\cs37\ul\cf2 02050}}}
 {\cf21 #define ASSERT_STRNE(s1, s2) \\}\par
{\bkmkstart AAAAAAAPNC}{\bkmkend AAAAAAAPNC}
02051 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)}\par
{\bkmkstart AAAAAAAPND}{\bkmkend AAAAAAAPND}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPNE" }{}}{\fldrslt {\cs37\ul\cf2 02052}}}
 {\cf21 #define ASSERT_STRCASEEQ(s1, s2) \\}\par
{\bkmkstart AAAAAAAPNF}{\bkmkend AAAAAAAPNF}
02053 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2)}\par
{\bkmkstart AAAAAAAPNG}{\bkmkend AAAAAAAPNG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPNH" }{}}{\fldrslt {\cs37\ul\cf2 02054}}}
 {\cf21 #define ASSERT_STRCASENE(s1, s2)\\}\par
{\bkmkstart AAAAAAAPNI}{\bkmkend AAAAAAAPNI}
02055 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)}\par
{\bkmkstart AAAAAAAPNJ}{\bkmkend AAAAAAAPNJ}
02056 \par
{\bkmkstart AAAAAAAPNK}{\bkmkend AAAAAAAPNK}
02057 {\cf20 // Macros for comparing floating-point numbers.}\par
{\bkmkstart AAAAAAAPNL}{\bkmkend AAAAAAAPNL}
02058 {\cf20 //}\par
{\bkmkstart AAAAAAAPNM}{\bkmkend AAAAAAAPNM}
02059 {\cf20 //    * \{ASSERT|EXPECT\}_FLOAT_EQ(val1, val2):}\par
{\bkmkstart AAAAAAAPNN}{\bkmkend AAAAAAAPNN}
02060 {\cf20 //         Tests that two float values are almost equal.}\par
{\bkmkstart AAAAAAAPNO}{\bkmkend AAAAAAAPNO}
02061 {\cf20 //    * \{ASSERT|EXPECT\}_DOUBLE_EQ(val1, val2):}\par
{\bkmkstart AAAAAAAPNP}{\bkmkend AAAAAAAPNP}
02062 {\cf20 //         Tests that two double values are almost equal.}\par
{\bkmkstart AAAAAAAPNQ}{\bkmkend AAAAAAAPNQ}
02063 {\cf20 //    * \{ASSERT|EXPECT\}_NEAR(v1, v2, abs_error):}\par
{\bkmkstart AAAAAAAPNR}{\bkmkend AAAAAAAPNR}
02064 {\cf20 //         Tests that v1 and v2 are within the given distance to each other.}\par
{\bkmkstart AAAAAAAPNS}{\bkmkend AAAAAAAPNS}
02065 {\cf20 //}\par
{\bkmkstart AAAAAAAPNT}{\bkmkend AAAAAAAPNT}
02066 {\cf20 // Google Test uses ULP-based comparison to automatically pick a default}\par
{\bkmkstart AAAAAAAPNU}{\bkmkend AAAAAAAPNU}
02067 {\cf20 // error bound that is appropriate for the operands.  See the}\par
{\bkmkstart AAAAAAAPNV}{\bkmkend AAAAAAAPNV}
02068 {\cf20 // FloatingPoint template class in gtest-internal.h if you are}\par
{\bkmkstart AAAAAAAPNW}{\bkmkend AAAAAAAPNW}
02069 {\cf20 // interested in the implementation details.}\par
{\bkmkstart AAAAAAAPNX}{\bkmkend AAAAAAAPNX}
02070 \par
{\bkmkstart AAAAAAAPNY}{\bkmkend AAAAAAAPNY}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPNZ" }{}}{\fldrslt {\cs37\ul\cf2 02071}}}
 {\cf21 #define EXPECT_FLOAT_EQ(val1, val2)\\}\par
{\bkmkstart AAAAAAAPOA}{\bkmkend AAAAAAAPOA}
02072 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\}\par
{\bkmkstart AAAAAAAPOB}{\bkmkend AAAAAAAPOB}
02073 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPOC}{\bkmkend AAAAAAAPOC}
02074 \par
{\bkmkstart AAAAAAAPOD}{\bkmkend AAAAAAAPOD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPOE" }{}}{\fldrslt {\cs37\ul\cf2 02075}}}
 {\cf21 #define EXPECT_DOUBLE_EQ(val1, val2)\\}\par
{\bkmkstart AAAAAAAPOF}{\bkmkend AAAAAAAPOF}
02076 {\cf21   EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\}\par
{\bkmkstart AAAAAAAPOG}{\bkmkend AAAAAAAPOG}
02077 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPOH}{\bkmkend AAAAAAAPOH}
02078 \par
{\bkmkstart AAAAAAAPOI}{\bkmkend AAAAAAAPOI}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPOJ" }{}}{\fldrslt {\cs37\ul\cf2 02079}}}
 {\cf21 #define ASSERT_FLOAT_EQ(val1, val2)\\}\par
{\bkmkstart AAAAAAAPOK}{\bkmkend AAAAAAAPOK}
02080 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\}\par
{\bkmkstart AAAAAAAPOL}{\bkmkend AAAAAAAPOL}
02081 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPOM}{\bkmkend AAAAAAAPOM}
02082 \par
{\bkmkstart AAAAAAAPON}{\bkmkend AAAAAAAPON}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPOO" }{}}{\fldrslt {\cs37\ul\cf2 02083}}}
 {\cf21 #define ASSERT_DOUBLE_EQ(val1, val2)\\}\par
{\bkmkstart AAAAAAAPOP}{\bkmkend AAAAAAAPOP}
02084 {\cf21   ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\}\par
{\bkmkstart AAAAAAAPOQ}{\bkmkend AAAAAAAPOQ}
02085 {\cf21                       val1, val2)}\par
{\bkmkstart AAAAAAAPOR}{\bkmkend AAAAAAAPOR}
02086 \par
{\bkmkstart AAAAAAAPOS}{\bkmkend AAAAAAAPOS}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPOT" }{}}{\fldrslt {\cs37\ul\cf2 02087}}}
 {\cf21 #define EXPECT_NEAR(val1, val2, abs_error)\\}\par
{\bkmkstart AAAAAAAPOU}{\bkmkend AAAAAAAPOU}
02088 {\cf21   EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \\}\par
{\bkmkstart AAAAAAAPOV}{\bkmkend AAAAAAAPOV}
02089 {\cf21                       val1, val2, abs_error)}\par
{\bkmkstart AAAAAAAPOW}{\bkmkend AAAAAAAPOW}
02090 \par
{\bkmkstart AAAAAAAPOX}{\bkmkend AAAAAAAPOX}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPOY" }{}}{\fldrslt {\cs37\ul\cf2 02091}}}
 {\cf21 #define ASSERT_NEAR(val1, val2, abs_error)\\}\par
{\bkmkstart AAAAAAAPOZ}{\bkmkend AAAAAAAPOZ}
02092 {\cf21   ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \\}\par
{\bkmkstart AAAAAAAPPA}{\bkmkend AAAAAAAPPA}
02093 {\cf21                       val1, val2, abs_error)}\par
{\bkmkstart AAAAAAAPPB}{\bkmkend AAAAAAAPPB}
02094 \par
{\bkmkstart AAAAAAAPPC}{\bkmkend AAAAAAAPPC}
02095 {\cf20 // These predicate format functions work on floating-point values, and}\par
{\bkmkstart AAAAAAAPPD}{\bkmkend AAAAAAAPPD}
02096 {\cf20 // can be used in \{ASSERT|EXPECT\}_PRED_FORMAT2*(), e.g.}\par
{\bkmkstart AAAAAAAPPE}{\bkmkend AAAAAAAPPE}
02097 {\cf20 //}\par
{\bkmkstart AAAAAAAPPF}{\bkmkend AAAAAAAPPF}
02098 {\cf20 //   EXPECT_PRED_FORMAT2(testing::DoubleLE, Foo(), 5.0);}\par
{\bkmkstart AAAAAAAPPG}{\bkmkend AAAAAAAPPG}
02099 \par
{\bkmkstart AAAAAAAPPH}{\bkmkend AAAAAAAPPH}
02100 {\cf20 // Asserts that val1 is less than, or almost equal to, val2.  Fails}\par
{\bkmkstart AAAAAAAPPI}{\bkmkend AAAAAAAPPI}
02101 {\cf20 // otherwise.  In particular, it fails if either val1 or val2 is NaN.}\par
{\bkmkstart AAAAAAAPPJ}{\bkmkend AAAAAAAPPJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPPK" }{}}{\fldrslt {\cs37\ul\cf2 02102}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPPK" }{}}{\fldrslt {\cs37\ul\cf2 FloatLE}}}
({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
{\bkmkstart AAAAAAAPPL}{\bkmkend AAAAAAAPPL}
02103                                    {\cf18 float} val1, {\cf18 float} val2);\par
{\bkmkstart AAAAAAAPPM}{\bkmkend AAAAAAAPPM}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPPN" }{}}{\fldrslt {\cs37\ul\cf2 02104}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 AssertionResult {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPPN" }{}}{\fldrslt {\cs37\ul\cf2 DoubleLE}}}
({\cf17 const} {\cf18 char}* expr1, {\cf17 const} {\cf18 char}* expr2,\par
{\bkmkstart AAAAAAAPPO}{\bkmkend AAAAAAAPPO}
02105                                     {\cf18 double} val1, {\cf18 double} val2);\par
{\bkmkstart AAAAAAAPPP}{\bkmkend AAAAAAAPPP}
02106 \par
{\bkmkstart AAAAAAAPPQ}{\bkmkend AAAAAAAPPQ}
02107 \par
{\bkmkstart AAAAAAAPPR}{\bkmkend AAAAAAAPPR}
02108 {\cf21 #if GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAPPS}{\bkmkend AAAAAAAPPS}
02109 \par
{\bkmkstart AAAAAAAPPT}{\bkmkend AAAAAAAPPT}
02110 {\cf20 // Macros that test for HRESULT failure and success, these are only useful}\par
{\bkmkstart AAAAAAAPPU}{\bkmkend AAAAAAAPPU}
02111 {\cf20 // on Windows, and rely on Windows SDK macros and APIs to compile.}\par
{\bkmkstart AAAAAAAPPV}{\bkmkend AAAAAAAPPV}
02112 {\cf20 //}\par
{\bkmkstart AAAAAAAPPW}{\bkmkend AAAAAAAPPW}
02113 {\cf20 //    * \{ASSERT|EXPECT\}_HRESULT_\{SUCCEEDED|FAILED\}(expr)}\par
{\bkmkstart AAAAAAAPPX}{\bkmkend AAAAAAAPPX}
02114 {\cf20 //}\par
{\bkmkstart AAAAAAAPPY}{\bkmkend AAAAAAAPPY}
02115 {\cf20 // When expr unexpectedly fails or succeeds, Google Test prints the}\par
{\bkmkstart AAAAAAAPPZ}{\bkmkend AAAAAAAPPZ}
02116 {\cf20 // expected result and the actual result with both a human-readable}\par
{\bkmkstart AAAAAAAPQA}{\bkmkend AAAAAAAPQA}
02117 {\cf20 // string representation of the error, if available, as well as the}\par
{\bkmkstart AAAAAAAPQB}{\bkmkend AAAAAAAPQB}
02118 {\cf20 // hex result code.}\par
{\bkmkstart AAAAAAAPQC}{\bkmkend AAAAAAAPQC}
02119 {\cf21 # define EXPECT_HRESULT_SUCCEEDED(expr) \\}\par
{\bkmkstart AAAAAAAPQD}{\bkmkend AAAAAAAPQD}
02120 {\cf21     EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))}\par
{\bkmkstart AAAAAAAPQE}{\bkmkend AAAAAAAPQE}
02121 \par
{\bkmkstart AAAAAAAPQF}{\bkmkend AAAAAAAPQF}
02122 {\cf21 # define ASSERT_HRESULT_SUCCEEDED(expr) \\}\par
{\bkmkstart AAAAAAAPQG}{\bkmkend AAAAAAAPQG}
02123 {\cf21     ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr))}\par
{\bkmkstart AAAAAAAPQH}{\bkmkend AAAAAAAPQH}
02124 \par
{\bkmkstart AAAAAAAPQI}{\bkmkend AAAAAAAPQI}
02125 {\cf21 # define EXPECT_HRESULT_FAILED(expr) \\}\par
{\bkmkstart AAAAAAAPQJ}{\bkmkend AAAAAAAPQJ}
02126 {\cf21     EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))}\par
{\bkmkstart AAAAAAAPQK}{\bkmkend AAAAAAAPQK}
02127 \par
{\bkmkstart AAAAAAAPQL}{\bkmkend AAAAAAAPQL}
02128 {\cf21 # define ASSERT_HRESULT_FAILED(expr) \\}\par
{\bkmkstart AAAAAAAPQM}{\bkmkend AAAAAAAPQM}
02129 {\cf21     ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr))}\par
{\bkmkstart AAAAAAAPQN}{\bkmkend AAAAAAAPQN}
02130 \par
{\bkmkstart AAAAAAAPQO}{\bkmkend AAAAAAAPQO}
02131 {\cf21 #endif  }{\cf20 // GTEST_OS_WINDOWS}\par
{\bkmkstart AAAAAAAPQP}{\bkmkend AAAAAAAPQP}
02132 \par
{\bkmkstart AAAAAAAPQQ}{\bkmkend AAAAAAAPQQ}
02133 {\cf20 // Macros that execute statement and check that it doesn't generate new fatal}\par
{\bkmkstart AAAAAAAPQR}{\bkmkend AAAAAAAPQR}
02134 {\cf20 // failures in the current thread.}\par
{\bkmkstart AAAAAAAPQS}{\bkmkend AAAAAAAPQS}
02135 {\cf20 //}\par
{\bkmkstart AAAAAAAPQT}{\bkmkend AAAAAAAPQT}
02136 {\cf20 //   * \{ASSERT|EXPECT\}_NO_FATAL_FAILURE(statement);}\par
{\bkmkstart AAAAAAAPQU}{\bkmkend AAAAAAAPQU}
02137 {\cf20 //}\par
{\bkmkstart AAAAAAAPQV}{\bkmkend AAAAAAAPQV}
02138 {\cf20 // Examples:}\par
{\bkmkstart AAAAAAAPQW}{\bkmkend AAAAAAAPQW}
02139 {\cf20 //}\par
{\bkmkstart AAAAAAAPQX}{\bkmkend AAAAAAAPQX}
02140 {\cf20 //   EXPECT_NO_FATAL_FAILURE(Process());}\par
{\bkmkstart AAAAAAAPQY}{\bkmkend AAAAAAAPQY}
02141 {\cf20 //   ASSERT_NO_FATAL_FAILURE(Process()) << "Process() failed";}\par
{\bkmkstart AAAAAAAPQZ}{\bkmkend AAAAAAAPQZ}
02142 {\cf20 //}\par
{\bkmkstart AAAAAAAPRA}{\bkmkend AAAAAAAPRA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPRB" }{}}{\fldrslt {\cs37\ul\cf2 02143}}}
 {\cf21 #define ASSERT_NO_FATAL_FAILURE(statement) \\}\par
{\bkmkstart AAAAAAAPRC}{\bkmkend AAAAAAAPRC}
02144 {\cf21     GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_FATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPRD}{\bkmkend AAAAAAAPRD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPRE" }{}}{\fldrslt {\cs37\ul\cf2 02145}}}
 {\cf21 #define EXPECT_NO_FATAL_FAILURE(statement) \\}\par
{\bkmkstart AAAAAAAPRF}{\bkmkend AAAAAAAPRF}
02146 {\cf21     GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_NONFATAL_FAILURE_)}\par
{\bkmkstart AAAAAAAPRG}{\bkmkend AAAAAAAPRG}
02147 \par
{\bkmkstart AAAAAAAPRH}{\bkmkend AAAAAAAPRH}
02148 {\cf20 // Causes a trace (including the given source file path and line number,}\par
{\bkmkstart AAAAAAAPRI}{\bkmkend AAAAAAAPRI}
02149 {\cf20 // and the given message) to be included in every test failure message generated}\par
{\bkmkstart AAAAAAAPRJ}{\bkmkend AAAAAAAPRJ}
02150 {\cf20 // by code in the scope of the lifetime of an instance of this class. The effect}\par
{\bkmkstart AAAAAAAPRK}{\bkmkend AAAAAAAPRK}
02151 {\cf20 // is undone with the destruction of the instance.}\par
{\bkmkstart AAAAAAAPRL}{\bkmkend AAAAAAAPRL}
02152 {\cf20 //}\par
{\bkmkstart AAAAAAAPRM}{\bkmkend AAAAAAAPRM}
02153 {\cf20 // The message argument can be anything streamable to std::ostream.}\par
{\bkmkstart AAAAAAAPRN}{\bkmkend AAAAAAAPRN}
02154 {\cf20 //}\par
{\bkmkstart AAAAAAAPRO}{\bkmkend AAAAAAAPRO}
02155 {\cf20 // Example:}\par
{\bkmkstart AAAAAAAPRP}{\bkmkend AAAAAAAPRP}
02156 {\cf20 //   testing::ScopedTrace trace("file.cc", 123, "message");}\par
{\bkmkstart AAAAAAAPRQ}{\bkmkend AAAAAAAPRQ}
02157 {\cf20 //}\par
{\bkmkstart AAAAAAAPRR}{\bkmkend AAAAAAAPRR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIJ" }{}}{\fldrslt {\cs37\ul\cf2 02158}}}
 {\cf17 class }{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIJ" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
 \{\par
{\bkmkstart AAAAAAAPRS}{\bkmkend AAAAAAAPRS}
02159  {\cf17 public}:\par
{\bkmkstart AAAAAAAPRT}{\bkmkend AAAAAAAPRT}
02160   {\cf20 // The c'tor pushes the given source file location and message onto}\par
{\bkmkstart AAAAAAAPRU}{\bkmkend AAAAAAAPRU}
02161   {\cf20 // a trace stack maintained by Google Test.}\par
{\bkmkstart AAAAAAAPRV}{\bkmkend AAAAAAAPRV}
02162 \par
{\bkmkstart AAAAAAAPRW}{\bkmkend AAAAAAAPRW}
02163   {\cf20 // Template version. Uses Message() to convert the values into strings.}\par
{\bkmkstart AAAAAAAPRX}{\bkmkend AAAAAAAPRX}
02164   {\cf20 // Slow, but flexible.}\par
{\bkmkstart AAAAAAAPRY}{\bkmkend AAAAAAAPRY}
02165   {\cf17 template} <{\cf17 typename} T>\par
{\bkmkstart AAAAAAAPRZ}{\bkmkend AAAAAAAPRZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSA" }{}}{\fldrslt {\cs37\ul\cf2 02166}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSA" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} T& message) \{\par
{\bkmkstart AAAAAAAPSB}{\bkmkend AAAAAAAPSB}
02167     PushTrace(file, line, ({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGPA" }{}}{\fldrslt {\cs37\ul\cf2 Message}}}
() << message).GetString());\par
{\bkmkstart AAAAAAAPSC}{\bkmkend AAAAAAAPSC}
02168   \}\par
{\bkmkstart AAAAAAAPSD}{\bkmkend AAAAAAAPSD}
02169 \par
{\bkmkstart AAAAAAAPSE}{\bkmkend AAAAAAAPSE}
02170   {\cf20 // Optimize for some known types.}\par
{\bkmkstart AAAAAAAPSF}{\bkmkend AAAAAAAPSF}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSG" }{}}{\fldrslt {\cs37\ul\cf2 02171}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSG" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* message) \{\par
{\bkmkstart AAAAAAAPSH}{\bkmkend AAAAAAAPSH}
02172     PushTrace(file, line, message ? message : {\cf22 "(null)"});\par
{\bkmkstart AAAAAAAPSI}{\bkmkend AAAAAAAPSI}
02173   \}\par
{\bkmkstart AAAAAAAPSJ}{\bkmkend AAAAAAAPSJ}
02174 \par
{\bkmkstart AAAAAAAPSK}{\bkmkend AAAAAAAPSK}
02175 {\cf21 #if GTEST_HAS_GLOBAL_STRING}\par
{\bkmkstart AAAAAAAPSL}{\bkmkend AAAAAAAPSL}
02176   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIJ" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 const ::string}}}
& message) \{\par
{\bkmkstart AAAAAAAPSM}{\bkmkend AAAAAAAPSM}
02177     PushTrace(file, line, message);\par
{\bkmkstart AAAAAAAPSN}{\bkmkend AAAAAAAPSN}
02178   \}\par
{\bkmkstart AAAAAAAPSO}{\bkmkend AAAAAAAPSO}
02179 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPSP}{\bkmkend AAAAAAAPSP}
02180 \par
{\bkmkstart AAAAAAAPSQ}{\bkmkend AAAAAAAPSQ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSR" }{}}{\fldrslt {\cs37\ul\cf2 02181}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPSR" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
& message) \{\par
{\bkmkstart AAAAAAAPSS}{\bkmkend AAAAAAAPSS}
02182     PushTrace(file, line, message);\par
{\bkmkstart AAAAAAAPST}{\bkmkend AAAAAAAPST}
02183   \}\par
{\bkmkstart AAAAAAAPSU}{\bkmkend AAAAAAAPSU}
02184 \par
{\bkmkstart AAAAAAAPSV}{\bkmkend AAAAAAAPSV}
02185   {\cf20 // The d'tor pops the info pushed by the c'tor.}\par
{\bkmkstart AAAAAAAPSW}{\bkmkend AAAAAAAPSW}
02186   {\cf20 //}\par
{\bkmkstart AAAAAAAPSX}{\bkmkend AAAAAAAPSX}
02187   {\cf20 // Note that the d'tor is not virtual in order to be efficient.}\par
{\bkmkstart AAAAAAAPSY}{\bkmkend AAAAAAAPSY}
02188   {\cf20 // Don't inherit from ScopedTrace!}\par
{\bkmkstart AAAAAAAPSZ}{\bkmkend AAAAAAAPSZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPTA" }{}}{\fldrslt {\cs37\ul\cf2 02189}}}
   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPTA" }{}}{\fldrslt {\cs37\ul\cf2 ~ScopedTrace}}}
();\par
{\bkmkstart AAAAAAAPTB}{\bkmkend AAAAAAAPTB}
02190 \par
{\bkmkstart AAAAAAAPTC}{\bkmkend AAAAAAAPTC}
02191  {\cf17 private}:\par
{\bkmkstart AAAAAAAPTD}{\bkmkend AAAAAAAPTD}
02192   {\cf18 void} PushTrace({\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 message);\par
{\bkmkstart AAAAAAAPTE}{\bkmkend AAAAAAAPTE}
02193 \par
{\bkmkstart AAAAAAAPTF}{\bkmkend AAAAAAAPTF}
02194   {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAALDK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISALLOW_COPY_AND_ASSIGN_}}}
({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOIJ" }{}}{\fldrslt {\cs37\ul\cf2 ScopedTrace}}}
);\par
{\bkmkstart AAAAAAAPTG}{\bkmkend AAAAAAAPTG}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPTH" }{}}{\fldrslt {\cs37\ul\cf2 02195}}}
 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPTH" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_ATTRIBUTE_UNUSED_}}}
;  {\cf20 // A ScopedTrace object does its job in its}\par
{\bkmkstart AAAAAAAPTI}{\bkmkend AAAAAAAPTI}
02196                             {\cf20 // c'tor and d'tor.  Therefore it doesn't}\par
{\bkmkstart AAAAAAAPTJ}{\bkmkend AAAAAAAPTJ}
02197                             {\cf20 // need to be used otherwise.}\par
{\bkmkstart AAAAAAAPTK}{\bkmkend AAAAAAAPTK}
02198 \par
{\bkmkstart AAAAAAAPTL}{\bkmkend AAAAAAAPTL}
02199 {\cf20 // Causes a trace (including the source file path, the current line}\par
{\bkmkstart AAAAAAAPTM}{\bkmkend AAAAAAAPTM}
02200 {\cf20 // number, and the given message) to be included in every test failure}\par
{\bkmkstart AAAAAAAPTN}{\bkmkend AAAAAAAPTN}
02201 {\cf20 // message generated by code in the current scope.  The effect is}\par
{\bkmkstart AAAAAAAPTO}{\bkmkend AAAAAAAPTO}
02202 {\cf20 // undone when the control leaves the current scope.}\par
{\bkmkstart AAAAAAAPTP}{\bkmkend AAAAAAAPTP}
02203 {\cf20 //}\par
{\bkmkstart AAAAAAAPTQ}{\bkmkend AAAAAAAPTQ}
02204 {\cf20 // The message argument can be anything streamable to std::ostream.}\par
{\bkmkstart AAAAAAAPTR}{\bkmkend AAAAAAAPTR}
02205 {\cf20 //}\par
{\bkmkstart AAAAAAAPTS}{\bkmkend AAAAAAAPTS}
02206 {\cf20 // In the implementation, we include the current line number as part}\par
{\bkmkstart AAAAAAAPTT}{\bkmkend AAAAAAAPTT}
02207 {\cf20 // of the dummy variable name, thus allowing multiple SCOPED_TRACE()s}\par
{\bkmkstart AAAAAAAPTU}{\bkmkend AAAAAAAPTU}
02208 {\cf20 // to appear in the same block - as long as they are on different}\par
{\bkmkstart AAAAAAAPTV}{\bkmkend AAAAAAAPTV}
02209 {\cf20 // lines.}\par
{\bkmkstart AAAAAAAPTW}{\bkmkend AAAAAAAPTW}
02210 {\cf20 //}\par
{\bkmkstart AAAAAAAPTX}{\bkmkend AAAAAAAPTX}
02211 {\cf20 // Assuming that each thread maintains its own stack of traces.}\par
{\bkmkstart AAAAAAAPTY}{\bkmkend AAAAAAAPTY}
02212 {\cf20 // Therefore, a SCOPED_TRACE() would (correctly) only affect the}\par
{\bkmkstart AAAAAAAPTZ}{\bkmkend AAAAAAAPTZ}
02213 {\cf20 // assertions in its own thread.}\par
{\bkmkstart AAAAAAAPUA}{\bkmkend AAAAAAAPUA}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPUB" }{}}{\fldrslt {\cs37\ul\cf2 02214}}}
 {\cf21 #define SCOPED_TRACE(message) \\}\par
{\bkmkstart AAAAAAAPUC}{\bkmkend AAAAAAAPUC}
02215 {\cf21   ::testing::ScopedTrace GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)(\\}\par
{\bkmkstart AAAAAAAPUD}{\bkmkend AAAAAAAPUD}
02216 {\cf21     __FILE__, __LINE__, (message))}\par
{\bkmkstart AAAAAAAPUE}{\bkmkend AAAAAAAPUE}
02217 \par
{\bkmkstart AAAAAAAPUF}{\bkmkend AAAAAAAPUF}
02218 \par
{\bkmkstart AAAAAAAPUG}{\bkmkend AAAAAAAPUG}
02219 {\cf20 // Compile-time assertion for type equality.}\par
{\bkmkstart AAAAAAAPUH}{\bkmkend AAAAAAAPUH}
02220 {\cf20 // StaticAssertTypeEq<type1, type2>() compiles iff type1 and type2 are}\par
{\bkmkstart AAAAAAAPUI}{\bkmkend AAAAAAAPUI}
02221 {\cf20 // the same type.  The value it returns is not interesting.}\par
{\bkmkstart AAAAAAAPUJ}{\bkmkend AAAAAAAPUJ}
02222 {\cf20 //}\par
{\bkmkstart AAAAAAAPUK}{\bkmkend AAAAAAAPUK}
02223 {\cf20 // Instead of making StaticAssertTypeEq a class template, we make it a}\par
{\bkmkstart AAAAAAAPUL}{\bkmkend AAAAAAAPUL}
02224 {\cf20 // function template that invokes a helper class template.  This}\par
{\bkmkstart AAAAAAAPUM}{\bkmkend AAAAAAAPUM}
02225 {\cf20 // prevents a user from misusing StaticAssertTypeEq<T1, T2> by}\par
{\bkmkstart AAAAAAAPUN}{\bkmkend AAAAAAAPUN}
02226 {\cf20 // defining objects of that type.}\par
{\bkmkstart AAAAAAAPUO}{\bkmkend AAAAAAAPUO}
02227 {\cf20 //}\par
{\bkmkstart AAAAAAAPUP}{\bkmkend AAAAAAAPUP}
02228 {\cf20 // CAVEAT:}\par
{\bkmkstart AAAAAAAPUQ}{\bkmkend AAAAAAAPUQ}
02229 {\cf20 //}\par
{\bkmkstart AAAAAAAPUR}{\bkmkend AAAAAAAPUR}
02230 {\cf20 // When used inside a method of a class template,}\par
{\bkmkstart AAAAAAAPUS}{\bkmkend AAAAAAAPUS}
02231 {\cf20 // StaticAssertTypeEq<T1, T2>() is effective ONLY IF the method is}\par
{\bkmkstart AAAAAAAPUT}{\bkmkend AAAAAAAPUT}
02232 {\cf20 // instantiated.  For example, given:}\par
{\bkmkstart AAAAAAAPUU}{\bkmkend AAAAAAAPUU}
02233 {\cf20 //}\par
{\bkmkstart AAAAAAAPUV}{\bkmkend AAAAAAAPUV}
02234 {\cf20 //   template <typename T> class Foo \{}\par
{\bkmkstart AAAAAAAPUW}{\bkmkend AAAAAAAPUW}
02235 {\cf20 //    public:}\par
{\bkmkstart AAAAAAAPUX}{\bkmkend AAAAAAAPUX}
02236 {\cf20 //     void Bar() \{ testing::StaticAssertTypeEq<int, T>(); \}}\par
{\bkmkstart AAAAAAAPUY}{\bkmkend AAAAAAAPUY}
02237 {\cf20 //   \};}\par
{\bkmkstart AAAAAAAPUZ}{\bkmkend AAAAAAAPUZ}
02238 {\cf20 //}\par
{\bkmkstart AAAAAAAPVA}{\bkmkend AAAAAAAPVA}
02239 {\cf20 // the code:}\par
{\bkmkstart AAAAAAAPVB}{\bkmkend AAAAAAAPVB}
02240 {\cf20 //}\par
{\bkmkstart AAAAAAAPVC}{\bkmkend AAAAAAAPVC}
02241 {\cf20 //   void Test1() \{ Foo<bool> foo; \}}\par
{\bkmkstart AAAAAAAPVD}{\bkmkend AAAAAAAPVD}
02242 {\cf20 //}\par
{\bkmkstart AAAAAAAPVE}{\bkmkend AAAAAAAPVE}
02243 {\cf20 // will NOT generate a compiler error, as Foo<bool>::Bar() is never}\par
{\bkmkstart AAAAAAAPVF}{\bkmkend AAAAAAAPVF}
02244 {\cf20 // actually instantiated.  Instead, you need:}\par
{\bkmkstart AAAAAAAPVG}{\bkmkend AAAAAAAPVG}
02245 {\cf20 //}\par
{\bkmkstart AAAAAAAPVH}{\bkmkend AAAAAAAPVH}
02246 {\cf20 //   void Test2() \{ Foo<bool> foo; foo.Bar(); \}}\par
{\bkmkstart AAAAAAAPVI}{\bkmkend AAAAAAAPVI}
02247 {\cf20 //}\par
{\bkmkstart AAAAAAAPVJ}{\bkmkend AAAAAAAPVJ}
02248 {\cf20 // to cause a compiler error.}\par
{\bkmkstart AAAAAAAPVK}{\bkmkend AAAAAAAPVK}
02249 {\cf17 template} <{\cf17 typename} T1, {\cf17 typename} T2>\par
{\bkmkstart AAAAAAAPVL}{\bkmkend AAAAAAAPVL}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVM" }{}}{\fldrslt {\cs37\ul\cf2 02250}}}
 {\cf18 bool} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVM" }{}}{\fldrslt {\cs37\ul\cf2 StaticAssertTypeEq}}}
() \{\par
{\bkmkstart AAAAAAAPVN}{\bkmkend AAAAAAAPVN}
02251   (void){\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPVO" }{}}{\fldrslt {\cs37\ul\cf2 internal::StaticAssertTypeEqHelper<T1, T2>}}}
();\par
{\bkmkstart AAAAAAAPVP}{\bkmkend AAAAAAAPVP}
02252   {\cf19 return} {\cf17 true};\par
{\bkmkstart AAAAAAAPVQ}{\bkmkend AAAAAAAPVQ}
02253 \}\par
{\bkmkstart AAAAAAAPVR}{\bkmkend AAAAAAAPVR}
02254 \par
{\bkmkstart AAAAAAAPVS}{\bkmkend AAAAAAAPVS}
02255 {\cf20 // Defines a test.}\par
{\bkmkstart AAAAAAAPVT}{\bkmkend AAAAAAAPVT}
02256 {\cf20 //}\par
{\bkmkstart AAAAAAAPVU}{\bkmkend AAAAAAAPVU}
02257 {\cf20 // The first parameter is the name of the test case, and the second}\par
{\bkmkstart AAAAAAAPVV}{\bkmkend AAAAAAAPVV}
02258 {\cf20 // parameter is the name of the test within the test case.}\par
{\bkmkstart AAAAAAAPVW}{\bkmkend AAAAAAAPVW}
02259 {\cf20 //}\par
{\bkmkstart AAAAAAAPVX}{\bkmkend AAAAAAAPVX}
02260 {\cf20 // The convention is to end the test case name with "Test".  For}\par
{\bkmkstart AAAAAAAPVY}{\bkmkend AAAAAAAPVY}
02261 {\cf20 // example, a test case for the Foo class can be named FooTest.}\par
{\bkmkstart AAAAAAAPVZ}{\bkmkend AAAAAAAPVZ}
02262 {\cf20 //}\par
{\bkmkstart AAAAAAAPWA}{\bkmkend AAAAAAAPWA}
02263 {\cf20 // Test code should appear between braces after an invocation of}\par
{\bkmkstart AAAAAAAPWB}{\bkmkend AAAAAAAPWB}
02264 {\cf20 // this macro.  Example:}\par
{\bkmkstart AAAAAAAPWC}{\bkmkend AAAAAAAPWC}
02265 {\cf20 //}\par
{\bkmkstart AAAAAAAPWD}{\bkmkend AAAAAAAPWD}
02266 {\cf20 //   TEST(FooTest, InitializesCorrectly) \{}\par
{\bkmkstart AAAAAAAPWE}{\bkmkend AAAAAAAPWE}
02267 {\cf20 //     Foo foo;}\par
{\bkmkstart AAAAAAAPWF}{\bkmkend AAAAAAAPWF}
02268 {\cf20 //     EXPECT_TRUE(foo.StatusIsOK());}\par
{\bkmkstart AAAAAAAPWG}{\bkmkend AAAAAAAPWG}
02269 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPWH}{\bkmkend AAAAAAAPWH}
02270 \par
{\bkmkstart AAAAAAAPWI}{\bkmkend AAAAAAAPWI}
02271 {\cf20 // Note that we call GetTestTypeId() instead of GetTypeId<}\par
{\bkmkstart AAAAAAAPWJ}{\bkmkend AAAAAAAPWJ}
02272 {\cf20 // ::testing::Test>() here to get the type ID of testing::Test.  This}\par
{\bkmkstart AAAAAAAPWK}{\bkmkend AAAAAAAPWK}
02273 {\cf20 // is to work around a suspected linker bug when using Google Test as}\par
{\bkmkstart AAAAAAAPWL}{\bkmkend AAAAAAAPWL}
02274 {\cf20 // a framework on Mac OS X.  The bug causes GetTypeId<}\par
{\bkmkstart AAAAAAAPWM}{\bkmkend AAAAAAAPWM}
02275 {\cf20 // ::testing::Test>() to return different values depending on whether}\par
{\bkmkstart AAAAAAAPWN}{\bkmkend AAAAAAAPWN}
02276 {\cf20 // the call is from the Google Test framework itself or from user test}\par
{\bkmkstart AAAAAAAPWO}{\bkmkend AAAAAAAPWO}
02277 {\cf20 // code.  GetTestTypeId() is guaranteed to always return the same}\par
{\bkmkstart AAAAAAAPWP}{\bkmkend AAAAAAAPWP}
02278 {\cf20 // value, as it always calls GetTypeId<>() from the Google Test}\par
{\bkmkstart AAAAAAAPWQ}{\bkmkend AAAAAAAPWQ}
02279 {\cf20 // framework.}\par
{\bkmkstart AAAAAAAPWR}{\bkmkend AAAAAAAPWR}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPWS" }{}}{\fldrslt {\cs37\ul\cf2 02280}}}
 {\cf21 #define GTEST_TEST(test_case_name, test_name)\\}\par
{\bkmkstart AAAAAAAPWT}{\bkmkend AAAAAAAPWT}
02281 {\cf21   GTEST_TEST_(test_case_name, test_name, \\}\par
{\bkmkstart AAAAAAAPWU}{\bkmkend AAAAAAAPWU}
02282 {\cf21               ::testing::Test, ::testing::internal::GetTestTypeId())}\par
{\bkmkstart AAAAAAAPWV}{\bkmkend AAAAAAAPWV}
02283 \par
{\bkmkstart AAAAAAAPWW}{\bkmkend AAAAAAAPWW}
02284 {\cf20 // Define this macro to 1 to omit the definition of TEST(), which}\par
{\bkmkstart AAAAAAAPWX}{\bkmkend AAAAAAAPWX}
02285 {\cf20 // is a generic name and clashes with some other libraries.}\par
{\bkmkstart AAAAAAAPWY}{\bkmkend AAAAAAAPWY}
02286 {\cf21 #if !GTEST_DONT_DEFINE_TEST}\par
{\bkmkstart AAAAAAAPWZ}{\bkmkend AAAAAAAPWZ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPXA" }{}}{\fldrslt {\cs37\ul\cf2 02287}}}
 {\cf21 # define TEST(test_case_name, test_name) GTEST_TEST(test_case_name, test_name)}\par
{\bkmkstart AAAAAAAPXB}{\bkmkend AAAAAAAPXB}
02288 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPXC}{\bkmkend AAAAAAAPXC}
02289 \par
{\bkmkstart AAAAAAAPXD}{\bkmkend AAAAAAAPXD}
02290 {\cf20 // Defines a test that uses a test fixture.}\par
{\bkmkstart AAAAAAAPXE}{\bkmkend AAAAAAAPXE}
02291 {\cf20 //}\par
{\bkmkstart AAAAAAAPXF}{\bkmkend AAAAAAAPXF}
02292 {\cf20 // The first parameter is the name of the test fixture class, which}\par
{\bkmkstart AAAAAAAPXG}{\bkmkend AAAAAAAPXG}
02293 {\cf20 // also doubles as the test case name.  The second parameter is the}\par
{\bkmkstart AAAAAAAPXH}{\bkmkend AAAAAAAPXH}
02294 {\cf20 // name of the test within the test case.}\par
{\bkmkstart AAAAAAAPXI}{\bkmkend AAAAAAAPXI}
02295 {\cf20 //}\par
{\bkmkstart AAAAAAAPXJ}{\bkmkend AAAAAAAPXJ}
02296 {\cf20 // A test fixture class must be declared earlier.  The user should put}\par
{\bkmkstart AAAAAAAPXK}{\bkmkend AAAAAAAPXK}
02297 {\cf20 // the test code between braces after using this macro.  Example:}\par
{\bkmkstart AAAAAAAPXL}{\bkmkend AAAAAAAPXL}
02298 {\cf20 //}\par
{\bkmkstart AAAAAAAPXM}{\bkmkend AAAAAAAPXM}
02299 {\cf20 //   class FooTest : public testing::Test \{}\par
{\bkmkstart AAAAAAAPXN}{\bkmkend AAAAAAAPXN}
02300 {\cf20 //    protected:}\par
{\bkmkstart AAAAAAAPXO}{\bkmkend AAAAAAAPXO}
02301 {\cf20 //     virtual void SetUp() \{ b_.AddElement(3); \}}\par
{\bkmkstart AAAAAAAPXP}{\bkmkend AAAAAAAPXP}
02302 {\cf20 //}\par
{\bkmkstart AAAAAAAPXQ}{\bkmkend AAAAAAAPXQ}
02303 {\cf20 //     Foo a_;}\par
{\bkmkstart AAAAAAAPXR}{\bkmkend AAAAAAAPXR}
02304 {\cf20 //     Foo b_;}\par
{\bkmkstart AAAAAAAPXS}{\bkmkend AAAAAAAPXS}
02305 {\cf20 //   \};}\par
{\bkmkstart AAAAAAAPXT}{\bkmkend AAAAAAAPXT}
02306 {\cf20 //}\par
{\bkmkstart AAAAAAAPXU}{\bkmkend AAAAAAAPXU}
02307 {\cf20 //   TEST_F(FooTest, InitializesCorrectly) \{}\par
{\bkmkstart AAAAAAAPXV}{\bkmkend AAAAAAAPXV}
02308 {\cf20 //     EXPECT_TRUE(a_.StatusIsOK());}\par
{\bkmkstart AAAAAAAPXW}{\bkmkend AAAAAAAPXW}
02309 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPXX}{\bkmkend AAAAAAAPXX}
02310 {\cf20 //}\par
{\bkmkstart AAAAAAAPXY}{\bkmkend AAAAAAAPXY}
02311 {\cf20 //   TEST_F(FooTest, ReturnsElementCountCorrectly) \{}\par
{\bkmkstart AAAAAAAPXZ}{\bkmkend AAAAAAAPXZ}
02312 {\cf20 //     EXPECT_EQ(a_.size(), 0);}\par
{\bkmkstart AAAAAAAPYA}{\bkmkend AAAAAAAPYA}
02313 {\cf20 //     EXPECT_EQ(b_.size(), 1);}\par
{\bkmkstart AAAAAAAPYB}{\bkmkend AAAAAAAPYB}
02314 {\cf20 //   \}}\par
{\bkmkstart AAAAAAAPYC}{\bkmkend AAAAAAAPYC}
02315 \par
{\bkmkstart AAAAAAAPYD}{\bkmkend AAAAAAAPYD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAHDA" }{}}{\fldrslt {\cs37\ul\cf2 02316}}}
 {\cf21 #define TEST_F(test_fixture, test_name)\\}\par
{\bkmkstart AAAAAAAPYE}{\bkmkend AAAAAAAPYE}
02317 {\cf21   GTEST_TEST_(test_fixture, test_name, test_fixture, \\}\par
{\bkmkstart AAAAAAAPYF}{\bkmkend AAAAAAAPYF}
02318 {\cf21               ::testing::internal::GetTypeId<test_fixture>())}\par
{\bkmkstart AAAAAAAPYG}{\bkmkend AAAAAAAPYG}
02319 \par
{\bkmkstart AAAAAAAPYH}{\bkmkend AAAAAAAPYH}
02320 {\cf20 // Returns a path to temporary directory.}\par
{\bkmkstart AAAAAAAPYI}{\bkmkend AAAAAAAPYI}
02321 {\cf20 // Tries to determine an appropriate directory for the platform.}\par
{\bkmkstart AAAAAAAPYJ}{\bkmkend AAAAAAAPYJ}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPYK" }{}}{\fldrslt {\cs37\ul\cf2 02322}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGAK" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_API_}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAABRR" }{}}{\fldrslt {\cs37\ul\cf2 std::string}}}
 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPYK" }{}}{\fldrslt {\cs37\ul\cf2 TempDir}}}
();\par
{\bkmkstart AAAAAAAPYL}{\bkmkend AAAAAAAPYL}
02323 \par
{\bkmkstart AAAAAAAPYM}{\bkmkend AAAAAAAPYM}
02324 {\cf21 #ifdef _MSC_VER}\par
{\bkmkstart AAAAAAAPYN}{\bkmkend AAAAAAAPYN}
02325 {\cf21 #  pragma warning(pop)}\par
{\bkmkstart AAAAAAAPYO}{\bkmkend AAAAAAAPYO}
02326 {\cf21 #endif}\par
{\bkmkstart AAAAAAAPYP}{\bkmkend AAAAAAAPYP}
02327 \par
{\bkmkstart AAAAAAAPYQ}{\bkmkend AAAAAAAPYQ}
02328 \}  {\cf20 // namespace testing}\par
{\bkmkstart AAAAAAAPYR}{\bkmkend AAAAAAAPYR}
02329 \par
{\bkmkstart AAAAAAAPYS}{\bkmkend AAAAAAAPYS}
02330 {\cf20 // Use this function in main() to run all tests.  It returns 0 if all}\par
{\bkmkstart AAAAAAAPYT}{\bkmkend AAAAAAAPYT}
02331 {\cf20 // tests are successful, or 1 otherwise.}\par
{\bkmkstart AAAAAAAPYU}{\bkmkend AAAAAAAPYU}
02332 {\cf20 //}\par
{\bkmkstart AAAAAAAPYV}{\bkmkend AAAAAAAPYV}
02333 {\cf20 // RUN_ALL_TESTS() should be invoked after the command line has been}\par
{\bkmkstart AAAAAAAPYW}{\bkmkend AAAAAAAPYW}
02334 {\cf20 // parsed by InitGoogleTest().}\par
{\bkmkstart AAAAAAAPYX}{\bkmkend AAAAAAAPYX}
02335 {\cf20 //}\par
{\bkmkstart AAAAAAAPYY}{\bkmkend AAAAAAAPYY}
02336 {\cf20 // This function was formerly a macro; thus, it is in the global}\par
{\bkmkstart AAAAAAAPYZ}{\bkmkend AAAAAAAPYZ}
02337 {\cf20 // namespace and has an all-caps name.}\par
{\bkmkstart AAAAAAAPZA}{\bkmkend AAAAAAAPZA}
02338 {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPZB" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS}}}
() {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAOCN" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_MUST_USE_RESULT_}}}
;\par
{\bkmkstart AAAAAAAPZC}{\bkmkend AAAAAAAPZC}
02339 \par
{\bkmkstart AAAAAAAPZD}{\bkmkend AAAAAAAPZD}
{\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPZB" }{}}{\fldrslt {\cs37\ul\cf2 02340}}}
 inline {\cf18 int} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAPZB" }{}}{\fldrslt {\cs37\ul\cf2 RUN_ALL_TESTS}}}
() \{\par
{\bkmkstart AAAAAAAPZE}{\bkmkend AAAAAAAPZE}
02341   return ::testing::UnitTest::GetInstance()->Run();\par
{\bkmkstart AAAAAAAPZF}{\bkmkend AAAAAAAPZF}
02342 \}\par
{\bkmkstart AAAAAAAPZG}{\bkmkend AAAAAAAPZG}
02343 \par
{\bkmkstart AAAAAAAPZH}{\bkmkend AAAAAAAPZH}
02344 {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAGVZ" }{}}{\fldrslt {\cs37\ul\cf2 GTEST_DISABLE_MSC_WARNINGS_POP_}}}
()  {\cf20 //  4251}\par
{\bkmkstart AAAAAAAPZI}{\bkmkend AAAAAAAPZI}
02345 \par
{\bkmkstart AAAAAAAPZJ}{\bkmkend AAAAAAAPZJ}
02346 {\cf21 #endif  }{\cf20 // GTEST_INCLUDE_GTEST_GTEST_H_}\par
}
}