.TH "md_doc_manual" 3 "Jueves, 11 de Noviembre de 2021" "Version 0.2.3" "Command Line Processor" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_doc_manual \- Manual 

.SH "Intro"
.PP
Para mostrar el uso de la libreria se ha desarrollado un par de programas 'muy poco funcionales' en C++ y en C
.SH "Sample"
.PP
El programa recopila un conjunto de ficheros de diferentes directorios y los copia en otro\&. Si se definen ciertas expresiones regulares o patrones, busca dentro de los archivos y aplica esos cambios
.PP
Las opciones que acepta son:
.PP
Nombre   Tipo   Defecto   Multiple   Descripcion    verbose   Flag   True   True   Mostrar informacion    summary   Flag   True   True   Mostrar resumen    overwrite   Flag   True   True   Sobreescribir ficheros existentes    config   Opcion   N/A   False   Fichero de configuracion \fBexistente\fP    input   Opcion   \&.   True   Directorio de entrada \fBexistente\fP    output   Opcion   \&.   True   Directorio de salida    pattern   Opcion   *   True   Patron de nombresde ficheros    ext   Opcion   *   True   Patron de extensiones de ficheros    \&.\&.\&.   Defines   N/A   True   Patrones de sustitucion   
.PP
Para las pruebas se ha creado el siguiente entorno:
.SH "Casos de uso"
.PP
.SS "Ayuda"
El flag de ayuda está soportado por defecto en las siguientes versiones:
.PP
.IP "\(bu" 2
-h
.IP "\(bu" 2
--help
.IP "\(bu" 2
+help
.IP "\(bu" 2
+HELP
.PP
.PP
Notese que se soporta la forma clásica de ayuda: \fC-h\fP y \fC--help\fP por su uso extendido y por que no tiene sentido desactivar la ayuda: \fC-help\fP
.SS "Ayuda"
En los casos en que la libreria se configura como sensible a mayúsculas se soporta dos tipos de ayuda a las que se ha denominado \fIsimple\fP y \fIdetallada\fP, el objetivo es ofrecer la opcion de mostrar una ayuda mas simple o una ayuda mas detallada en función de las caracteristicas del programa\&.
.SS "Ayuda simple"
Los siguientes comandos son equivalentes:
.PP
.IP "\(bu" 2
sample -h
.IP "\(bu" 2
sample --help
.IP "\(bu" 2
sample +h
.IP "\(bu" 2
sample +he
.IP "\(bu" 2
sample +help
.PP
.PP
comando: \fCsample -h\fP
.PP
Help detallado\&. Modo clasicoHelp detallado\&. Modo clasicoHelp detallado\&. Modo clasicoHelp detallado\&. Modo clasico 
.PP
comando: \fCsample +h\fP
.PP
  
.PP
Help detallado\&. Modo normal
.PP
 
.PP
comando: \fCsample +he\fP
.PP
  
.PP
Help detallado\&. Modo abreviado
.PP
 
.PP
comando: \fCsample +help\fP
.PP
  
.PP
Help detallado\&. Modo completo
.PP
 
.SS "Ayuda detallada"
El objetivo es poder mostrar una ayuda mas detallada
.PP
Los siguientes comandos son equivalentes:
.PP
.IP "\(bu" 2
sample --HELP
.IP "\(bu" 2
sample +H
.IP "\(bu" 2
sample +HE
.IP "\(bu" 2
sample +HELP
.PP
.PP
comando: \fCsample --HELP\fP
.PP
  
.PP
Help simple\&. Modo clasico
.PP
 
.PP
comando: \fCsample +H\fP
.PP
  
.PP
Help simple\&. Modo normal
.PP
 
.PP
comando: \fCsample +HE\fP
.PP
  
.PP
Help simple\&. Modo abreviado
.PP
 
.PP
comando: \fCsample +HELP\fP
.PP
  
.PP
Help simple\&. Modo completo
.PP
 
.SS "Exceptions"
En C++ los errores son gestionados a través de \fC\fBCmdLineException\fP\fP\&. El programa ejemplo \fCsample_exceptions\fP no realiza ninguna función pero acepta todos los tipos preestablecidos de parámetros\&.
.PP
Por simplicidad unicamente se captura la excepción base, pero la salida indica el tipo de excepción concreta generada\&.
.SS "Source code"
.IP "\(bu" 2
config\&.hpp
.IP "\(bu" 2
showinfo\&.hpp
.IP "\(bu" 2
showinfo\&.cpp
.IP "\(bu" 2
sample_exceptions\&.cpp
.PP
.SS "config\&.hpp"
.PP
.nf
#pragma once
#include <iostream>
#include "cmdline\&.hpp"

constexpr auto VERBOSE    = "verbose";
constexpr auto SUMMARY    = "summary";
constexpr auto FLAG       = "flag";
constexpr auto NUMBERS    = "numbers";
constexpr auto NUMBER     = "number";
constexpr auto DECIMAL    = "decimal";
constexpr auto DECIMALS   = "decimals";
constexpr auto DATE       = "date";
constexpr auto TIME       = "time";
constexpr auto DATETIME   = "datetime";
constexpr auto TIMESTAMP  = "timestamp";
constexpr auto DIRIN      = "dirIn";
constexpr auto DIROUT     = "dirOut";
constexpr auto FILEIN     = "fileIn";
constexpr auto FILEOUT    = "fileOut";
constexpr auto CONFIG     = "config";

using namespace cmdline;


#ifdef __MAIN__
 CmdLine *cmdLine = nullptr;
#else 
extern CmdLine *cmdLine;
#endif
.fi
.PP
.SS "showinfo\&.hpp"
.PP
.nf
#pragma once

#include "config\&.hpp"

void showHelp    (HelpRequested* help);
void showValues  ();
.fi
.PP
.SS "showinfo\&.cpp"
.PP
.nf
#pragma once

#include "config\&.hpp"
#include "showinfo\&.hpp"

void printOption(string option, vector<string> values) {
   int num = 0;
   cout << "\t" << option << "\t: "; 
   if (values\&.size() == 1 && values[0]\&.length() == 0) {
       cout << "No default value\n";
       return;
   }
   for (auto str : values) {
        if (num) cout << ", ";
        cout << str;
        num++;
   }
   cout << endl;
}

void showHelp(HelpRequested* help) {
    cout << "A sample program about error management"                << endl;
    cout << "Use: " << help->name << " [options]"                    << endl;
    cout << "Options:"                                               << endl;
    cout << "\t" << VERBOSE   << ":\t"   << "Flag"                              << endl;
    cout << "\t" << SUMMARY   << ":\t"   << "Flag"                              << endl;
    cout << "\t" << FLAG      << ":\t\t" << "Option boolean"                    << endl;
    cout << "\t" << NUMBERS   << ":\t"   << "Integers"                          << endl;
    cout << "\t" << NUMBER    << ":\t\t" << "Just one integer"                  << endl;
    cout << "\t" << DECIMALS  << ":\t"   << "Decimals"                          << endl;
    cout << "\t" << DECIMAL   << ":\t"   << "Just one decimal"                  << endl;
    cout << "\t" << DATE      << ":\t\t" << "Date"                              << endl;
    cout << "\t" << TIME      << ":\t\t" << "Time"                              << endl;
    cout << "\t" << DATETIME  << ":\t"   << "DateTime"                          << endl;
    cout << "\t" << TIMESTAMP << ":\t"   << "Timestamp"                         << endl;
    cout << "\t" << DIRIN     << ":\t\t" << "Existing directories"              << endl;
    cout << "\t" << DIROUT    << ":\t\t" << "A directory"                       << endl;
    cout << "\t" << FILEIN    << ":\t\t" << "Existing files"                    << endl;
    cout << "\t" << FILEOUT   << ":\t"   << "A possible output file"            << endl;
    cout << "\t" << CONFIG    << ":\t\t" << "An existing configuration file"    << endl;
}

void showValues() {
    Flags   flags   = cmdLine->getCurrentFlags();
    Options options = cmdLine->getCurrentOptions();
    cout << "Flags:" << endl;
    for (auto flag : flags) {
       cout << "\t" << flag\&.first << ": " << std::boolalpha << flag\&.second << endl;
    }
    cout << "Options:" << endl;
    for (auto option : options) {
        printOption(option\&.first, option\&.second);
    }
    
}
.fi
.PP
.SS "sample_exceptions\&.cpp"
.PP
.nf
#define __MAIN__

#include "config\&.hpp"
#include "showinfo\&.hpp"

Parameters  parms { 
    ParmFlag(VERBOSE,  true)                    
   ,ParmFlag(SUMMARY,  true)                     
   ,ParmOption(FLAG,  "true", Type::BOOL,    false)
   ,ParmOption(NUMBERS,   Type::NUMBER,      true) 
   ,ParmOption(NUMBER,    Type::NUMBER,      false)
   ,ParmOption(DECIMALS,  Type::DECIMAL,     true) 
   ,ParmOption(DECIMAL,   Type::DECIMAL,     false)
   ,ParmOption(DATE,      Type::DATE,        false)
   ,ParmOption(TIME,      Type::TIME,        false)
   ,ParmOption(DATETIME,  Type::DATETIME,    false)
   ,ParmOption(TIMESTAMP, Type::TMS,         false)
   ,ParmOption(DIRIN,     Type::DIR_EXISTS,  true) 
   ,ParmOption(DIROUT,    Type::DIR,         false)
   ,ParmOption(FILEIN,    Type::FILE_EXISTS, true) 
   ,ParmOption(FILEOUT,   Type::FILE,        false) 
   ,ParmOption(CONFIG,    Type::CONFIG,      false) 
};

int main(int argc, char *argv[]) {
    cout << "Starting " << argv[0] << endl;
    try {
       cmdLine = CmdLine::getInstance(argc, argv,parms);
       showValues();
    }
    catch (HelpRequested *help) { 
        showHelp(help); 
    } 
    catch (CmdLineException *ex) {
        cerr << ex->what() << endl;
        cerr << "Exception type: " << ex->type << endl;
        exit(1);
    }
    exit (0);
}
.fi
.PP
 
